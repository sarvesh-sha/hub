# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class NetworksApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_log(self, network_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_log(network_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_id: (required)
        :param int older_than_xminutes:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_log_with_http_info(network_id, **kwargs)
        else:
            (data) = self.delete_log_with_http_info(network_id, **kwargs)
            return data

    def delete_log_with_http_info(self, network_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_log_with_http_info(network_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_id: (required)
        :param int older_than_xminutes:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_id', 'older_than_xminutes']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_id' is set
        if ('network_id' not in params) or (params['network_id'] is None):
            raise ValueError("Missing the required parameter `network_id` when calling `delete_log`")


        collection_formats = {}

        resource_path = '/networks/item/{networkId}/log'.replace('{format}', 'json')
        path_params = {}
        if 'network_id' in params:
            path_params['networkId'] = params['network_id']

        query_params = {}
        if 'older_than_xminutes' in params:
            query_params['olderThanXMinutes'] = params['older_than_xminutes']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='int',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def filter_log(self, network_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.filter_log(network_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_id: (required)
        :param LogEntryFilterRequest body:
        :return: list[LogRange]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.filter_log_with_http_info(network_id, **kwargs)
        else:
            (data) = self.filter_log_with_http_info(network_id, **kwargs)
            return data

    def filter_log_with_http_info(self, network_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.filter_log_with_http_info(network_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_id: (required)
        :param LogEntryFilterRequest body:
        :return: list[LogRange]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filter_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_id' is set
        if ('network_id' not in params) or (params['network_id'] is None):
            raise ValueError("Missing the required parameter `network_id` when calling `filter_log`")


        collection_formats = {}

        resource_path = '/networks/item/{networkId}/log/filter'.replace('{format}', 'json')
        path_params = {}
        if 'network_id' in params:
            path_params['networkId'] = params['network_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[LogRange]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_log(self, network_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_log(network_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_id: (required)
        :param int from_offset:
        :param int to_offset:
        :param int limit:
        :return: list[LogLine]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_log_with_http_info(network_id, **kwargs)
        else:
            (data) = self.get_log_with_http_info(network_id, **kwargs)
            return data

    def get_log_with_http_info(self, network_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_log_with_http_info(network_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_id: (required)
        :param int from_offset:
        :param int to_offset:
        :param int limit:
        :return: list[LogLine]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_id', 'from_offset', 'to_offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_id' is set
        if ('network_id' not in params) or (params['network_id'] is None):
            raise ValueError("Missing the required parameter `network_id` when calling `get_log`")


        collection_formats = {}

        resource_path = '/networks/item/{networkId}/log'.replace('{format}', 'json')
        path_params = {}
        if 'network_id' in params:
            path_params['networkId'] = params['network_id']

        query_params = {}
        if 'from_offset' in params:
            query_params['fromOffset'] = params['from_offset']
        if 'to_offset' in params:
            query_params['toOffset'] = params['to_offset']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[LogLine]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def reclassify(self, network_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reclassify(network_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.reclassify_with_http_info(network_id, **kwargs)
        else:
            (data) = self.reclassify_with_http_info(network_id, **kwargs)
            return data

    def reclassify_with_http_info(self, network_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reclassify_with_http_info(network_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reclassify" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_id' is set
        if ('network_id' not in params) or (params['network_id'] is None):
            raise ValueError("Missing the required parameter `network_id` when calling `reclassify`")


        collection_formats = {}

        resource_path = '/networks/item/{networkId}/reclassify'.replace('{format}', 'json')
        path_params = {}
        if 'network_id' in params:
            path_params['networkId'] = params['network_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='bool',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
