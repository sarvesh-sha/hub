# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class NormalizationEngineValueEquipment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, equipment_class_id=None, equipment_class_hint=None, set_unclassified=None, locations=None, child_equipment=None):
        """
        NormalizationEngineValueEquipment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'equipment_class_id': 'str',
            'equipment_class_hint': 'str',
            'set_unclassified': 'bool',
            'locations': 'list[NormalizationEngineValueLocation]',
            'child_equipment': 'list[NormalizationEngineValueEquipment]',
            'discriminator___type': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'equipment_class_id': 'equipmentClassId',
            'equipment_class_hint': 'equipmentClassHint',
            'set_unclassified': 'setUnclassified',
            'locations': 'locations',
            'child_equipment': 'childEquipment',
            'discriminator___type': '__type'
        }

        self._name = name
        self._equipment_class_id = equipment_class_id
        self._equipment_class_hint = equipment_class_hint
        self._set_unclassified = set_unclassified
        self._locations = locations
        self._child_equipment = child_equipment

    @property
    def discriminator___type(self):
        return "NormalizationEngineValueEquipment"

    @discriminator___type.setter
    def discriminator___type(self, discriminator):
        # Don't need to do anything
        return

    @property
    def name(self):
        """
        Gets the name of this NormalizationEngineValueEquipment.

        :return: The name of this NormalizationEngineValueEquipment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NormalizationEngineValueEquipment.

        :param name: The name of this NormalizationEngineValueEquipment.
        :type: str
        """

        self._name = name

    @property
    def equipment_class_id(self):
        """
        Gets the equipment_class_id of this NormalizationEngineValueEquipment.

        :return: The equipment_class_id of this NormalizationEngineValueEquipment.
        :rtype: str
        """
        return self._equipment_class_id

    @equipment_class_id.setter
    def equipment_class_id(self, equipment_class_id):
        """
        Sets the equipment_class_id of this NormalizationEngineValueEquipment.

        :param equipment_class_id: The equipment_class_id of this NormalizationEngineValueEquipment.
        :type: str
        """

        self._equipment_class_id = equipment_class_id

    @property
    def equipment_class_hint(self):
        """
        Gets the equipment_class_hint of this NormalizationEngineValueEquipment.

        :return: The equipment_class_hint of this NormalizationEngineValueEquipment.
        :rtype: str
        """
        return self._equipment_class_hint

    @equipment_class_hint.setter
    def equipment_class_hint(self, equipment_class_hint):
        """
        Sets the equipment_class_hint of this NormalizationEngineValueEquipment.

        :param equipment_class_hint: The equipment_class_hint of this NormalizationEngineValueEquipment.
        :type: str
        """

        self._equipment_class_hint = equipment_class_hint

    @property
    def set_unclassified(self):
        """
        Gets the set_unclassified of this NormalizationEngineValueEquipment.

        :return: The set_unclassified of this NormalizationEngineValueEquipment.
        :rtype: bool
        """
        return self._set_unclassified

    @set_unclassified.setter
    def set_unclassified(self, set_unclassified):
        """
        Sets the set_unclassified of this NormalizationEngineValueEquipment.

        :param set_unclassified: The set_unclassified of this NormalizationEngineValueEquipment.
        :type: bool
        """

        self._set_unclassified = set_unclassified

    @property
    def locations(self):
        """
        Gets the locations of this NormalizationEngineValueEquipment.

        :return: The locations of this NormalizationEngineValueEquipment.
        :rtype: list[NormalizationEngineValueLocation]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """
        Sets the locations of this NormalizationEngineValueEquipment.

        :param locations: The locations of this NormalizationEngineValueEquipment.
        :type: list[NormalizationEngineValueLocation]
        """

        self._locations = locations

    @property
    def child_equipment(self):
        """
        Gets the child_equipment of this NormalizationEngineValueEquipment.

        :return: The child_equipment of this NormalizationEngineValueEquipment.
        :rtype: list[NormalizationEngineValueEquipment]
        """
        return self._child_equipment

    @child_equipment.setter
    def child_equipment(self, child_equipment):
        """
        Sets the child_equipment of this NormalizationEngineValueEquipment.

        :param child_equipment: The child_equipment of this NormalizationEngineValueEquipment.
        :type: list[NormalizationEngineValueEquipment]
        """

        self._child_equipment = child_equipment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NormalizationEngineValueEquipment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
