# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class BrandingConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, primary_color=None, secondary_color=None, text=None, logo_base64=None, horizontal_placement=None, vertical_placement=None):
        """
        BrandingConfiguration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'primary_color': 'str',
            'secondary_color': 'str',
            'text': 'str',
            'logo_base64': 'str',
            'horizontal_placement': 'str',
            'vertical_placement': 'str'
        }

        self.attribute_map = {
            'primary_color': 'primaryColor',
            'secondary_color': 'secondaryColor',
            'text': 'text',
            'logo_base64': 'logoBase64',
            'horizontal_placement': 'horizontalPlacement',
            'vertical_placement': 'verticalPlacement'
        }

        self._primary_color = primary_color
        self._secondary_color = secondary_color
        self._text = text
        self._logo_base64 = logo_base64
        self._horizontal_placement = horizontal_placement
        self._vertical_placement = vertical_placement


    @property
    def primary_color(self):
        """
        Gets the primary_color of this BrandingConfiguration.

        :return: The primary_color of this BrandingConfiguration.
        :rtype: str
        """
        return self._primary_color

    @primary_color.setter
    def primary_color(self, primary_color):
        """
        Sets the primary_color of this BrandingConfiguration.

        :param primary_color: The primary_color of this BrandingConfiguration.
        :type: str
        """

        self._primary_color = primary_color

    @property
    def secondary_color(self):
        """
        Gets the secondary_color of this BrandingConfiguration.

        :return: The secondary_color of this BrandingConfiguration.
        :rtype: str
        """
        return self._secondary_color

    @secondary_color.setter
    def secondary_color(self, secondary_color):
        """
        Sets the secondary_color of this BrandingConfiguration.

        :param secondary_color: The secondary_color of this BrandingConfiguration.
        :type: str
        """

        self._secondary_color = secondary_color

    @property
    def text(self):
        """
        Gets the text of this BrandingConfiguration.

        :return: The text of this BrandingConfiguration.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this BrandingConfiguration.

        :param text: The text of this BrandingConfiguration.
        :type: str
        """

        self._text = text

    @property
    def logo_base64(self):
        """
        Gets the logo_base64 of this BrandingConfiguration.

        :return: The logo_base64 of this BrandingConfiguration.
        :rtype: str
        """
        return self._logo_base64

    @logo_base64.setter
    def logo_base64(self, logo_base64):
        """
        Sets the logo_base64 of this BrandingConfiguration.

        :param logo_base64: The logo_base64 of this BrandingConfiguration.
        :type: str
        """

        self._logo_base64 = logo_base64

    @property
    def horizontal_placement(self):
        """
        Gets the horizontal_placement of this BrandingConfiguration.

        :return: The horizontal_placement of this BrandingConfiguration.
        :rtype: str
        """
        return self._horizontal_placement

    @horizontal_placement.setter
    def horizontal_placement(self, horizontal_placement):
        """
        Sets the horizontal_placement of this BrandingConfiguration.

        :param horizontal_placement: The horizontal_placement of this BrandingConfiguration.
        :type: str
        """
        allowed_values = ["Left", "Center", "Right"]
        if horizontal_placement is not None and horizontal_placement not in allowed_values:
            raise ValueError(
                "Invalid value for `horizontal_placement` ({0}), must be one of {1}"
                .format(horizontal_placement, allowed_values)
            )

        self._horizontal_placement = horizontal_placement

    @property
    def vertical_placement(self):
        """
        Gets the vertical_placement of this BrandingConfiguration.

        :return: The vertical_placement of this BrandingConfiguration.
        :rtype: str
        """
        return self._vertical_placement

    @vertical_placement.setter
    def vertical_placement(self, vertical_placement):
        """
        Sets the vertical_placement of this BrandingConfiguration.

        :param vertical_placement: The vertical_placement of this BrandingConfiguration.
        :type: str
        """
        allowed_values = ["Top", "Middle", "Bottom"]
        if vertical_placement is not None and vertical_placement not in allowed_values:
            raise ValueError(
                "Invalid value for `vertical_placement` ({0}), must be one of {1}"
                .format(vertical_placement, allowed_values)
            )

        self._vertical_placement = vertical_placement

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BrandingConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

