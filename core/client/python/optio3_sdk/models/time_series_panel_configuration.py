# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class TimeSeriesPanelConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, x_axis=None, left_axis=None, right_axis=None, color_settings=None):
        """
        TimeSeriesPanelConfiguration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'x_axis': 'TimeSeriesAxisConfiguration',
            'left_axis': 'TimeSeriesAxisConfiguration',
            'right_axis': 'TimeSeriesAxisConfiguration',
            'color_settings': 'ColorConfiguration'
        }

        self.attribute_map = {
            'x_axis': 'xAxis',
            'left_axis': 'leftAxis',
            'right_axis': 'rightAxis',
            'color_settings': 'colorSettings'
        }

        self._x_axis = x_axis
        self._left_axis = left_axis
        self._right_axis = right_axis
        self._color_settings = color_settings


    @property
    def x_axis(self):
        """
        Gets the x_axis of this TimeSeriesPanelConfiguration.

        :return: The x_axis of this TimeSeriesPanelConfiguration.
        :rtype: TimeSeriesAxisConfiguration
        """
        return self._x_axis

    @x_axis.setter
    def x_axis(self, x_axis):
        """
        Sets the x_axis of this TimeSeriesPanelConfiguration.

        :param x_axis: The x_axis of this TimeSeriesPanelConfiguration.
        :type: TimeSeriesAxisConfiguration
        """

        self._x_axis = x_axis

    @property
    def left_axis(self):
        """
        Gets the left_axis of this TimeSeriesPanelConfiguration.

        :return: The left_axis of this TimeSeriesPanelConfiguration.
        :rtype: TimeSeriesAxisConfiguration
        """
        return self._left_axis

    @left_axis.setter
    def left_axis(self, left_axis):
        """
        Sets the left_axis of this TimeSeriesPanelConfiguration.

        :param left_axis: The left_axis of this TimeSeriesPanelConfiguration.
        :type: TimeSeriesAxisConfiguration
        """

        self._left_axis = left_axis

    @property
    def right_axis(self):
        """
        Gets the right_axis of this TimeSeriesPanelConfiguration.

        :return: The right_axis of this TimeSeriesPanelConfiguration.
        :rtype: TimeSeriesAxisConfiguration
        """
        return self._right_axis

    @right_axis.setter
    def right_axis(self, right_axis):
        """
        Sets the right_axis of this TimeSeriesPanelConfiguration.

        :param right_axis: The right_axis of this TimeSeriesPanelConfiguration.
        :type: TimeSeriesAxisConfiguration
        """

        self._right_axis = right_axis

    @property
    def color_settings(self):
        """
        Gets the color_settings of this TimeSeriesPanelConfiguration.

        :return: The color_settings of this TimeSeriesPanelConfiguration.
        :rtype: ColorConfiguration
        """
        return self._color_settings

    @color_settings.setter
    def color_settings(self, color_settings):
        """
        Sets the color_settings of this TimeSeriesPanelConfiguration.

        :param color_settings: The color_settings of this TimeSeriesPanelConfiguration.
        :type: ColorConfiguration
        """

        self._color_settings = color_settings

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TimeSeriesPanelConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
