# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class UserCreationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, first_name=None, last_name=None, email_address=None, phone_number=None, password=None, roles=None):
        """
        UserCreationRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'first_name': 'str',
            'last_name': 'str',
            'email_address': 'str',
            'phone_number': 'str',
            'password': 'str',
            'roles': 'list[RecordIdentity]'
        }

        self.attribute_map = {
            'first_name': 'firstName',
            'last_name': 'lastName',
            'email_address': 'emailAddress',
            'phone_number': 'phoneNumber',
            'password': 'password',
            'roles': 'roles'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._email_address = email_address
        self._phone_number = phone_number
        self._password = password
        self._roles = roles


    @property
    def first_name(self):
        """
        Gets the first_name of this UserCreationRequest.

        :return: The first_name of this UserCreationRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this UserCreationRequest.

        :param first_name: The first_name of this UserCreationRequest.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this UserCreationRequest.

        :return: The last_name of this UserCreationRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this UserCreationRequest.

        :param last_name: The last_name of this UserCreationRequest.
        :type: str
        """

        self._last_name = last_name

    @property
    def email_address(self):
        """
        Gets the email_address of this UserCreationRequest.

        :return: The email_address of this UserCreationRequest.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """
        Sets the email_address of this UserCreationRequest.

        :param email_address: The email_address of this UserCreationRequest.
        :type: str
        """

        self._email_address = email_address

    @property
    def phone_number(self):
        """
        Gets the phone_number of this UserCreationRequest.

        :return: The phone_number of this UserCreationRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this UserCreationRequest.

        :param phone_number: The phone_number of this UserCreationRequest.
        :type: str
        """

        self._phone_number = phone_number

    @property
    def password(self):
        """
        Gets the password of this UserCreationRequest.

        :return: The password of this UserCreationRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this UserCreationRequest.

        :param password: The password of this UserCreationRequest.
        :type: str
        """

        self._password = password

    @property
    def roles(self):
        """
        Gets the roles of this UserCreationRequest.

        :return: The roles of this UserCreationRequest.
        :rtype: list[RecordIdentity]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this UserCreationRequest.

        :param roles: The roles of this UserCreationRequest.
        :type: list[RecordIdentity]
        """

        self._roles = roles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserCreationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
