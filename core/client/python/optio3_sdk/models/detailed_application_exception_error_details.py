# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class DetailedApplicationExceptionErrorDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, code=None, message=None, exception_trace=None, validation_errors=None):
        """
        DetailedApplicationExceptionErrorDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code': 'str',
            'message': 'str',
            'exception_trace': 'str',
            'validation_errors': 'ValidationResults'
        }

        self.attribute_map = {
            'code': 'code',
            'message': 'message',
            'exception_trace': 'exceptionTrace',
            'validation_errors': 'validationErrors'
        }

        self._code = code
        self._message = message
        self._exception_trace = exception_trace
        self._validation_errors = validation_errors


    @property
    def code(self):
        """
        Gets the code of this DetailedApplicationExceptionErrorDetails.

        :return: The code of this DetailedApplicationExceptionErrorDetails.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this DetailedApplicationExceptionErrorDetails.

        :param code: The code of this DetailedApplicationExceptionErrorDetails.
        :type: str
        """
        allowed_values = ["ALREADY_EXISTS", "NOT_AUTHENTICATED", "NOT_AUTHORIZED", "NOT_FOUND", "NOT_IMPLEMENTED", "INVALID_ARGUMENT", "INVALID_STATE"]
        if code is not None and code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def message(self):
        """
        Gets the message of this DetailedApplicationExceptionErrorDetails.

        :return: The message of this DetailedApplicationExceptionErrorDetails.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this DetailedApplicationExceptionErrorDetails.

        :param message: The message of this DetailedApplicationExceptionErrorDetails.
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def exception_trace(self):
        """
        Gets the exception_trace of this DetailedApplicationExceptionErrorDetails.

        :return: The exception_trace of this DetailedApplicationExceptionErrorDetails.
        :rtype: str
        """
        return self._exception_trace

    @exception_trace.setter
    def exception_trace(self, exception_trace):
        """
        Sets the exception_trace of this DetailedApplicationExceptionErrorDetails.

        :param exception_trace: The exception_trace of this DetailedApplicationExceptionErrorDetails.
        :type: str
        """

        self._exception_trace = exception_trace

    @property
    def validation_errors(self):
        """
        Gets the validation_errors of this DetailedApplicationExceptionErrorDetails.

        :return: The validation_errors of this DetailedApplicationExceptionErrorDetails.
        :rtype: ValidationResults
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """
        Sets the validation_errors of this DetailedApplicationExceptionErrorDetails.

        :param validation_errors: The validation_errors of this DetailedApplicationExceptionErrorDetails.
        :type: ValidationResults
        """

        self._validation_errors = validation_errors

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DetailedApplicationExceptionErrorDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

