# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class PaneFieldAlertCount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, label=None, value=None, only_active=None):
        """
        PaneFieldAlertCount - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'label': 'str',
            'value': 'RecordIdentity',
            'only_active': 'bool',
            'discriminator___type': 'str'
        }

        self.attribute_map = {
            'label': 'label',
            'value': 'value',
            'only_active': 'onlyActive',
            'discriminator___type': '__type'
        }

        self._label = label
        self._value = value
        self._only_active = only_active

    @property
    def discriminator___type(self):
        return "PaneFieldAlertCount"

    @discriminator___type.setter
    def discriminator___type(self, discriminator):
        # Don't need to do anything
        return

    @property
    def label(self):
        """
        Gets the label of this PaneFieldAlertCount.

        :return: The label of this PaneFieldAlertCount.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this PaneFieldAlertCount.

        :param label: The label of this PaneFieldAlertCount.
        :type: str
        """

        self._label = label

    @property
    def value(self):
        """
        Gets the value of this PaneFieldAlertCount.

        :return: The value of this PaneFieldAlertCount.
        :rtype: RecordIdentity
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this PaneFieldAlertCount.

        :param value: The value of this PaneFieldAlertCount.
        :type: RecordIdentity
        """

        self._value = value

    @property
    def only_active(self):
        """
        Gets the only_active of this PaneFieldAlertCount.

        :return: The only_active of this PaneFieldAlertCount.
        :rtype: bool
        """
        return self._only_active

    @only_active.setter
    def only_active(self, only_active):
        """
        Sets the only_active of this PaneFieldAlertCount.

        :param only_active: The only_active of this PaneFieldAlertCount.
        :type: bool
        """

        self._only_active = only_active

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PaneFieldAlertCount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
