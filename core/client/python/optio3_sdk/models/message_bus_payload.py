# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class MessageBusPayload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, message_id=None):
        """
        MessageBusPayload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'message_id': 'str',
            'discriminator_type': 'str'
        }

        self.attribute_map = {
            'message_id': 'messageId',
            'discriminator_type': 'type'
        }

        self._message_id = message_id

    @property
    def discriminator_type(self):
        return "MessageBusPayload"

    @discriminator_type.setter
    def discriminator_type(self, discriminator):
        # Don't need to do anything
        return

    @staticmethod
    def fixup_prototype(data):
        className = data["type"]
        from .. import models
        switcher = {
        "MbControlExchangeCapabilities": models.MbControlExchangeCapabilities,
        "MbControlExchangeCapabilitiesReply": models.MbControlExchangeCapabilitiesReply,
        "MbControlGetIdentity": models.MbControlGetIdentity,
        "MbControlGetIdentityReply": models.MbControlGetIdentityReply,
        "MbControlJoinChannel": models.MbControlJoinChannel,
        "MbControlJoinChannelReply": models.MbControlJoinChannelReply,
        "MbControlKeepAlive": models.MbControlKeepAlive,
        "MbControlKeepAliveReply": models.MbControlKeepAliveReply,
        "MbControlLeaveChannel": models.MbControlLeaveChannel,
        "MbControlLeaveChannelReply": models.MbControlLeaveChannelReply,
        "MbControlListChannels": models.MbControlListChannels,
        "MbControlListChannelsReply": models.MbControlListChannelsReply,
        "MbControlListMembers": models.MbControlListMembers,
        "MbControlListMembersReply": models.MbControlListMembersReply,
        "MbControlListSubscriptions": models.MbControlListSubscriptions,
        "MbControlListSubscriptionsReply": models.MbControlListSubscriptionsReply,
        "MbControlReply": models.MbControlReply,
        "MbControlUpgradeToUDP": models.MbControlUpgradeToUDP,
        "MbControlUpgradeToUDPReply": models.MbControlUpgradeToUDPReply,
        "MbDataMessage": models.MbDataMessage,
        "MbDataMessageReply": models.MbDataMessageReply,
        "MessageBusPayload": MessageBusPayload
        }

        klass = switcher.get(className)
        if klass:
            return klass()
        else:
            raise Exception("Unable to deserialize unknown type")

    @property
    def message_id(self):
        """
        Gets the message_id of this MessageBusPayload.

        :return: The message_id of this MessageBusPayload.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """
        Sets the message_id of this MessageBusPayload.

        :param message_id: The message_id of this MessageBusPayload.
        :type: str
        """

        self._message_id = message_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MessageBusPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
