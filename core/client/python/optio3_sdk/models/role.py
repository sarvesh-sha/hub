# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class Role(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sys_id=None, created_on=None, updated_on=None, name=None, display_name=None, add_allowed=None, remove_allowed=None):
        """
        Role - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_id': 'str',
            'created_on': 'datetime',
            'updated_on': 'datetime',
            'name': 'str',
            'display_name': 'str',
            'add_allowed': 'bool',
            'remove_allowed': 'bool'
        }

        self.attribute_map = {
            'sys_id': 'sysId',
            'created_on': 'createdOn',
            'updated_on': 'updatedOn',
            'name': 'name',
            'display_name': 'displayName',
            'add_allowed': 'addAllowed',
            'remove_allowed': 'removeAllowed'
        }

        self._sys_id = sys_id
        self._created_on = created_on
        self._updated_on = updated_on
        self._name = name
        self._display_name = display_name
        self._add_allowed = add_allowed
        self._remove_allowed = remove_allowed


    @property
    def sys_id(self):
        """
        Gets the sys_id of this Role.

        :return: The sys_id of this Role.
        :rtype: str
        """
        return self._sys_id

    @sys_id.setter
    def sys_id(self, sys_id):
        """
        Sets the sys_id of this Role.

        :param sys_id: The sys_id of this Role.
        :type: str
        """

        self._sys_id = sys_id

    @property
    def created_on(self):
        """
        Gets the created_on of this Role.

        :return: The created_on of this Role.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Role.

        :param created_on: The created_on of this Role.
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_on(self):
        """
        Gets the updated_on of this Role.

        :return: The updated_on of this Role.
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this Role.

        :param updated_on: The updated_on of this Role.
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def name(self):
        """
        Gets the name of this Role.

        :return: The name of this Role.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Role.

        :param name: The name of this Role.
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """
        Gets the display_name of this Role.

        :return: The display_name of this Role.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this Role.

        :param display_name: The display_name of this Role.
        :type: str
        """

        self._display_name = display_name

    @property
    def add_allowed(self):
        """
        Gets the add_allowed of this Role.

        :return: The add_allowed of this Role.
        :rtype: bool
        """
        return self._add_allowed

    @add_allowed.setter
    def add_allowed(self, add_allowed):
        """
        Sets the add_allowed of this Role.

        :param add_allowed: The add_allowed of this Role.
        :type: bool
        """

        self._add_allowed = add_allowed

    @property
    def remove_allowed(self):
        """
        Gets the remove_allowed of this Role.

        :return: The remove_allowed of this Role.
        :rtype: bool
        """
        return self._remove_allowed

    @remove_allowed.setter
    def remove_allowed(self, remove_allowed):
        """
        Sets the remove_allowed of this Role.

        :param remove_allowed: The remove_allowed of this Role.
        :type: bool
        """

        self._remove_allowed = remove_allowed

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Role):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
