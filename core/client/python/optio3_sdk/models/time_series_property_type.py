# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class TimeSeriesPropertyType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, display_name=None, type=None, resolution=None, digits_of_precision=None, is_boolean=None, units_factors=None, values=None, debounce_seconds=None, no_value_marker=None):
        """
        TimeSeriesPropertyType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'display_name': 'str',
            'type': 'str',
            'resolution': 'str',
            'digits_of_precision': 'int',
            'is_boolean': 'bool',
            'units_factors': 'EngineeringUnitsFactors',
            'values': 'list[TimeSeriesEnumeratedValue]',
            'debounce_seconds': 'int',
            'no_value_marker': 'float'
        }

        self.attribute_map = {
            'name': 'name',
            'display_name': 'displayName',
            'type': 'type',
            'resolution': 'resolution',
            'digits_of_precision': 'digitsOfPrecision',
            'is_boolean': 'isBoolean',
            'units_factors': 'unitsFactors',
            'values': 'values',
            'debounce_seconds': 'debounceSeconds',
            'no_value_marker': 'noValueMarker'
        }

        self._name = name
        self._display_name = display_name
        self._type = type
        self._resolution = resolution
        self._digits_of_precision = digits_of_precision
        self._is_boolean = is_boolean
        self._units_factors = units_factors
        self._values = values
        self._debounce_seconds = debounce_seconds
        self._no_value_marker = no_value_marker


    @property
    def name(self):
        """
        Gets the name of this TimeSeriesPropertyType.

        :return: The name of this TimeSeriesPropertyType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TimeSeriesPropertyType.

        :param name: The name of this TimeSeriesPropertyType.
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """
        Gets the display_name of this TimeSeriesPropertyType.

        :return: The display_name of this TimeSeriesPropertyType.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this TimeSeriesPropertyType.

        :param display_name: The display_name of this TimeSeriesPropertyType.
        :type: str
        """

        self._display_name = display_name

    @property
    def type(self):
        """
        Gets the type of this TimeSeriesPropertyType.

        :return: The type of this TimeSeriesPropertyType.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this TimeSeriesPropertyType.

        :param type: The type of this TimeSeriesPropertyType.
        :type: str
        """
        allowed_values = ["Integer", "Decimal", "BitSet", "Enumerated", "EnumeratedSet"]
        if type is not None and type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def resolution(self):
        """
        Gets the resolution of this TimeSeriesPropertyType.

        :return: The resolution of this TimeSeriesPropertyType.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """
        Sets the resolution of this TimeSeriesPropertyType.

        :param resolution: The resolution of this TimeSeriesPropertyType.
        :type: str
        """
        allowed_values = ["Max1Hz", "Max100Hz", "Max1000Hz"]
        if resolution is not None and resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def digits_of_precision(self):
        """
        Gets the digits_of_precision of this TimeSeriesPropertyType.

        :return: The digits_of_precision of this TimeSeriesPropertyType.
        :rtype: int
        """
        return self._digits_of_precision

    @digits_of_precision.setter
    def digits_of_precision(self, digits_of_precision):
        """
        Sets the digits_of_precision of this TimeSeriesPropertyType.

        :param digits_of_precision: The digits_of_precision of this TimeSeriesPropertyType.
        :type: int
        """

        self._digits_of_precision = digits_of_precision

    @property
    def is_boolean(self):
        """
        Gets the is_boolean of this TimeSeriesPropertyType.

        :return: The is_boolean of this TimeSeriesPropertyType.
        :rtype: bool
        """
        return self._is_boolean

    @is_boolean.setter
    def is_boolean(self, is_boolean):
        """
        Sets the is_boolean of this TimeSeriesPropertyType.

        :param is_boolean: The is_boolean of this TimeSeriesPropertyType.
        :type: bool
        """

        self._is_boolean = is_boolean

    @property
    def units_factors(self):
        """
        Gets the units_factors of this TimeSeriesPropertyType.

        :return: The units_factors of this TimeSeriesPropertyType.
        :rtype: EngineeringUnitsFactors
        """
        return self._units_factors

    @units_factors.setter
    def units_factors(self, units_factors):
        """
        Sets the units_factors of this TimeSeriesPropertyType.

        :param units_factors: The units_factors of this TimeSeriesPropertyType.
        :type: EngineeringUnitsFactors
        """

        self._units_factors = units_factors

    @property
    def values(self):
        """
        Gets the values of this TimeSeriesPropertyType.

        :return: The values of this TimeSeriesPropertyType.
        :rtype: list[TimeSeriesEnumeratedValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """
        Sets the values of this TimeSeriesPropertyType.

        :param values: The values of this TimeSeriesPropertyType.
        :type: list[TimeSeriesEnumeratedValue]
        """

        self._values = values

    @property
    def debounce_seconds(self):
        """
        Gets the debounce_seconds of this TimeSeriesPropertyType.

        :return: The debounce_seconds of this TimeSeriesPropertyType.
        :rtype: int
        """
        return self._debounce_seconds

    @debounce_seconds.setter
    def debounce_seconds(self, debounce_seconds):
        """
        Sets the debounce_seconds of this TimeSeriesPropertyType.

        :param debounce_seconds: The debounce_seconds of this TimeSeriesPropertyType.
        :type: int
        """

        self._debounce_seconds = debounce_seconds

    @property
    def no_value_marker(self):
        """
        Gets the no_value_marker of this TimeSeriesPropertyType.

        :return: The no_value_marker of this TimeSeriesPropertyType.
        :rtype: float
        """
        return self._no_value_marker

    @no_value_marker.setter
    def no_value_marker(self, no_value_marker):
        """
        Sets the no_value_marker of this TimeSeriesPropertyType.

        :param no_value_marker: The no_value_marker of this TimeSeriesPropertyType.
        :type: float
        """

        self._no_value_marker = no_value_marker

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TimeSeriesPropertyType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

