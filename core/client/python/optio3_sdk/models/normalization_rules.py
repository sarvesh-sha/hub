# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class NormalizationRules(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, point_classes=None, equipment_classes=None, location_classes=None, known_terms=None, abbreviations=None, starts_with=None, ends_with=None, contains=None, disambiguations=None, score_threshold=None, validation=None, equipment_relationships=None, equipments=None, point_overrides=None, logic=None):
        """
        NormalizationRules - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'point_classes': 'list[PointClass]',
            'equipment_classes': 'list[EquipmentClass]',
            'location_classes': 'list[LocationClass]',
            'known_terms': 'dict(str, NormalizationRulesKnownTerm)',
            'abbreviations': 'dict(str, list[str])',
            'starts_with': 'dict(str, str)',
            'ends_with': 'dict(str, str)',
            'contains': 'dict(str, str)',
            'disambiguations': 'dict(str, str)',
            'score_threshold': 'float',
            'validation': 'ValidationRules',
            'equipment_relationships': 'dict(str, list[str])',
            'equipments': 'dict(str, NormalizationEquipment)',
            'point_overrides': 'dict(str, DeviceElementClassificationOverrides)',
            'logic': 'NormalizationDefinitionDetails'
        }

        self.attribute_map = {
            'point_classes': 'pointClasses',
            'equipment_classes': 'equipmentClasses',
            'location_classes': 'locationClasses',
            'known_terms': 'knownTerms',
            'abbreviations': 'abbreviations',
            'starts_with': 'startsWith',
            'ends_with': 'endsWith',
            'contains': 'contains',
            'disambiguations': 'disambiguations',
            'score_threshold': 'scoreThreshold',
            'validation': 'validation',
            'equipment_relationships': 'equipmentRelationships',
            'equipments': 'equipments',
            'point_overrides': 'pointOverrides',
            'logic': 'logic'
        }

        self._point_classes = point_classes
        self._equipment_classes = equipment_classes
        self._location_classes = location_classes
        self._known_terms = known_terms
        self._abbreviations = abbreviations
        self._starts_with = starts_with
        self._ends_with = ends_with
        self._contains = contains
        self._disambiguations = disambiguations
        self._score_threshold = score_threshold
        self._validation = validation
        self._equipment_relationships = equipment_relationships
        self._equipments = equipments
        self._point_overrides = point_overrides
        self._logic = logic


    @property
    def point_classes(self):
        """
        Gets the point_classes of this NormalizationRules.

        :return: The point_classes of this NormalizationRules.
        :rtype: list[PointClass]
        """
        return self._point_classes

    @point_classes.setter
    def point_classes(self, point_classes):
        """
        Sets the point_classes of this NormalizationRules.

        :param point_classes: The point_classes of this NormalizationRules.
        :type: list[PointClass]
        """

        self._point_classes = point_classes

    @property
    def equipment_classes(self):
        """
        Gets the equipment_classes of this NormalizationRules.

        :return: The equipment_classes of this NormalizationRules.
        :rtype: list[EquipmentClass]
        """
        return self._equipment_classes

    @equipment_classes.setter
    def equipment_classes(self, equipment_classes):
        """
        Sets the equipment_classes of this NormalizationRules.

        :param equipment_classes: The equipment_classes of this NormalizationRules.
        :type: list[EquipmentClass]
        """

        self._equipment_classes = equipment_classes

    @property
    def location_classes(self):
        """
        Gets the location_classes of this NormalizationRules.

        :return: The location_classes of this NormalizationRules.
        :rtype: list[LocationClass]
        """
        return self._location_classes

    @location_classes.setter
    def location_classes(self, location_classes):
        """
        Sets the location_classes of this NormalizationRules.

        :param location_classes: The location_classes of this NormalizationRules.
        :type: list[LocationClass]
        """

        self._location_classes = location_classes

    @property
    def known_terms(self):
        """
        Gets the known_terms of this NormalizationRules.

        :return: The known_terms of this NormalizationRules.
        :rtype: dict(str, NormalizationRulesKnownTerm)
        """
        return self._known_terms

    @known_terms.setter
    def known_terms(self, known_terms):
        """
        Sets the known_terms of this NormalizationRules.

        :param known_terms: The known_terms of this NormalizationRules.
        :type: dict(str, NormalizationRulesKnownTerm)
        """

        self._known_terms = known_terms

    @property
    def abbreviations(self):
        """
        Gets the abbreviations of this NormalizationRules.

        :return: The abbreviations of this NormalizationRules.
        :rtype: dict(str, list[str])
        """
        return self._abbreviations

    @abbreviations.setter
    def abbreviations(self, abbreviations):
        """
        Sets the abbreviations of this NormalizationRules.

        :param abbreviations: The abbreviations of this NormalizationRules.
        :type: dict(str, list[str])
        """

        self._abbreviations = abbreviations

    @property
    def starts_with(self):
        """
        Gets the starts_with of this NormalizationRules.

        :return: The starts_with of this NormalizationRules.
        :rtype: dict(str, str)
        """
        return self._starts_with

    @starts_with.setter
    def starts_with(self, starts_with):
        """
        Sets the starts_with of this NormalizationRules.

        :param starts_with: The starts_with of this NormalizationRules.
        :type: dict(str, str)
        """

        self._starts_with = starts_with

    @property
    def ends_with(self):
        """
        Gets the ends_with of this NormalizationRules.

        :return: The ends_with of this NormalizationRules.
        :rtype: dict(str, str)
        """
        return self._ends_with

    @ends_with.setter
    def ends_with(self, ends_with):
        """
        Sets the ends_with of this NormalizationRules.

        :param ends_with: The ends_with of this NormalizationRules.
        :type: dict(str, str)
        """

        self._ends_with = ends_with

    @property
    def contains(self):
        """
        Gets the contains of this NormalizationRules.

        :return: The contains of this NormalizationRules.
        :rtype: dict(str, str)
        """
        return self._contains

    @contains.setter
    def contains(self, contains):
        """
        Sets the contains of this NormalizationRules.

        :param contains: The contains of this NormalizationRules.
        :type: dict(str, str)
        """

        self._contains = contains

    @property
    def disambiguations(self):
        """
        Gets the disambiguations of this NormalizationRules.

        :return: The disambiguations of this NormalizationRules.
        :rtype: dict(str, str)
        """
        return self._disambiguations

    @disambiguations.setter
    def disambiguations(self, disambiguations):
        """
        Sets the disambiguations of this NormalizationRules.

        :param disambiguations: The disambiguations of this NormalizationRules.
        :type: dict(str, str)
        """

        self._disambiguations = disambiguations

    @property
    def score_threshold(self):
        """
        Gets the score_threshold of this NormalizationRules.

        :return: The score_threshold of this NormalizationRules.
        :rtype: float
        """
        return self._score_threshold

    @score_threshold.setter
    def score_threshold(self, score_threshold):
        """
        Sets the score_threshold of this NormalizationRules.

        :param score_threshold: The score_threshold of this NormalizationRules.
        :type: float
        """

        self._score_threshold = score_threshold

    @property
    def validation(self):
        """
        Gets the validation of this NormalizationRules.

        :return: The validation of this NormalizationRules.
        :rtype: ValidationRules
        """
        return self._validation

    @validation.setter
    def validation(self, validation):
        """
        Sets the validation of this NormalizationRules.

        :param validation: The validation of this NormalizationRules.
        :type: ValidationRules
        """

        self._validation = validation

    @property
    def equipment_relationships(self):
        """
        Gets the equipment_relationships of this NormalizationRules.

        :return: The equipment_relationships of this NormalizationRules.
        :rtype: dict(str, list[str])
        """
        return self._equipment_relationships

    @equipment_relationships.setter
    def equipment_relationships(self, equipment_relationships):
        """
        Sets the equipment_relationships of this NormalizationRules.

        :param equipment_relationships: The equipment_relationships of this NormalizationRules.
        :type: dict(str, list[str])
        """

        self._equipment_relationships = equipment_relationships

    @property
    def equipments(self):
        """
        Gets the equipments of this NormalizationRules.

        :return: The equipments of this NormalizationRules.
        :rtype: dict(str, NormalizationEquipment)
        """
        return self._equipments

    @equipments.setter
    def equipments(self, equipments):
        """
        Sets the equipments of this NormalizationRules.

        :param equipments: The equipments of this NormalizationRules.
        :type: dict(str, NormalizationEquipment)
        """

        self._equipments = equipments

    @property
    def point_overrides(self):
        """
        Gets the point_overrides of this NormalizationRules.

        :return: The point_overrides of this NormalizationRules.
        :rtype: dict(str, DeviceElementClassificationOverrides)
        """
        return self._point_overrides

    @point_overrides.setter
    def point_overrides(self, point_overrides):
        """
        Sets the point_overrides of this NormalizationRules.

        :param point_overrides: The point_overrides of this NormalizationRules.
        :type: dict(str, DeviceElementClassificationOverrides)
        """

        self._point_overrides = point_overrides

    @property
    def logic(self):
        """
        Gets the logic of this NormalizationRules.

        :return: The logic of this NormalizationRules.
        :rtype: NormalizationDefinitionDetails
        """
        return self._logic

    @logic.setter
    def logic(self, logic):
        """
        Sets the logic of this NormalizationRules.

        :param logic: The logic of this NormalizationRules.
        :type: NormalizationDefinitionDetails
        """

        self._logic = logic

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NormalizationRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
