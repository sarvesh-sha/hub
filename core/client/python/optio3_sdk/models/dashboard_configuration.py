# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class DashboardConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, title=None, show_title=None, widget_primary_color=None, widget_secondary_color=None, shared_graphs=None, banner_segments=None, shared_selectors=None, widgets=None):
        """
        DashboardConfiguration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'title': 'str',
            'show_title': 'bool',
            'widget_primary_color': 'str',
            'widget_secondary_color': 'str',
            'shared_graphs': 'list[SharedAssetGraph]',
            'banner_segments': 'list[DashboardBannerSegment]',
            'shared_selectors': 'list[SharedAssetSelector]',
            'widgets': 'list[WidgetComposition]'
        }

        self.attribute_map = {
            'title': 'title',
            'show_title': 'showTitle',
            'widget_primary_color': 'widgetPrimaryColor',
            'widget_secondary_color': 'widgetSecondaryColor',
            'shared_graphs': 'sharedGraphs',
            'banner_segments': 'bannerSegments',
            'shared_selectors': 'sharedSelectors',
            'widgets': 'widgets'
        }

        self._title = title
        self._show_title = show_title
        self._widget_primary_color = widget_primary_color
        self._widget_secondary_color = widget_secondary_color
        self._shared_graphs = shared_graphs
        self._banner_segments = banner_segments
        self._shared_selectors = shared_selectors
        self._widgets = widgets


    @property
    def title(self):
        """
        Gets the title of this DashboardConfiguration.

        :return: The title of this DashboardConfiguration.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this DashboardConfiguration.

        :param title: The title of this DashboardConfiguration.
        :type: str
        """

        self._title = title

    @property
    def show_title(self):
        """
        Gets the show_title of this DashboardConfiguration.

        :return: The show_title of this DashboardConfiguration.
        :rtype: bool
        """
        return self._show_title

    @show_title.setter
    def show_title(self, show_title):
        """
        Sets the show_title of this DashboardConfiguration.

        :param show_title: The show_title of this DashboardConfiguration.
        :type: bool
        """

        self._show_title = show_title

    @property
    def widget_primary_color(self):
        """
        Gets the widget_primary_color of this DashboardConfiguration.

        :return: The widget_primary_color of this DashboardConfiguration.
        :rtype: str
        """
        return self._widget_primary_color

    @widget_primary_color.setter
    def widget_primary_color(self, widget_primary_color):
        """
        Sets the widget_primary_color of this DashboardConfiguration.

        :param widget_primary_color: The widget_primary_color of this DashboardConfiguration.
        :type: str
        """

        self._widget_primary_color = widget_primary_color

    @property
    def widget_secondary_color(self):
        """
        Gets the widget_secondary_color of this DashboardConfiguration.

        :return: The widget_secondary_color of this DashboardConfiguration.
        :rtype: str
        """
        return self._widget_secondary_color

    @widget_secondary_color.setter
    def widget_secondary_color(self, widget_secondary_color):
        """
        Sets the widget_secondary_color of this DashboardConfiguration.

        :param widget_secondary_color: The widget_secondary_color of this DashboardConfiguration.
        :type: str
        """

        self._widget_secondary_color = widget_secondary_color

    @property
    def shared_graphs(self):
        """
        Gets the shared_graphs of this DashboardConfiguration.

        :return: The shared_graphs of this DashboardConfiguration.
        :rtype: list[SharedAssetGraph]
        """
        return self._shared_graphs

    @shared_graphs.setter
    def shared_graphs(self, shared_graphs):
        """
        Sets the shared_graphs of this DashboardConfiguration.

        :param shared_graphs: The shared_graphs of this DashboardConfiguration.
        :type: list[SharedAssetGraph]
        """

        self._shared_graphs = shared_graphs

    @property
    def banner_segments(self):
        """
        Gets the banner_segments of this DashboardConfiguration.

        :return: The banner_segments of this DashboardConfiguration.
        :rtype: list[DashboardBannerSegment]
        """
        return self._banner_segments

    @banner_segments.setter
    def banner_segments(self, banner_segments):
        """
        Sets the banner_segments of this DashboardConfiguration.

        :param banner_segments: The banner_segments of this DashboardConfiguration.
        :type: list[DashboardBannerSegment]
        """

        self._banner_segments = banner_segments

    @property
    def shared_selectors(self):
        """
        Gets the shared_selectors of this DashboardConfiguration.

        :return: The shared_selectors of this DashboardConfiguration.
        :rtype: list[SharedAssetSelector]
        """
        return self._shared_selectors

    @shared_selectors.setter
    def shared_selectors(self, shared_selectors):
        """
        Sets the shared_selectors of this DashboardConfiguration.

        :param shared_selectors: The shared_selectors of this DashboardConfiguration.
        :type: list[SharedAssetSelector]
        """

        self._shared_selectors = shared_selectors

    @property
    def widgets(self):
        """
        Gets the widgets of this DashboardConfiguration.

        :return: The widgets of this DashboardConfiguration.
        :rtype: list[WidgetComposition]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """
        Sets the widgets of this DashboardConfiguration.

        :param widgets: The widgets of this DashboardConfiguration.
        :type: list[WidgetComposition]
        """

        self._widgets = widgets

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DashboardConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
