# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class CustomReportElementAlertTable(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, label=None, group_by=None, rollup_type=None, alert_status_ids=None, alert_type_ids=None, alert_severity_ids=None, locations=None, severity_colors=None, alert_rules=None):
        """
        CustomReportElementAlertTable - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'label': 'str',
            'group_by': 'str',
            'rollup_type': 'str',
            'alert_status_ids': 'list[str]',
            'alert_type_ids': 'list[str]',
            'alert_severity_ids': 'list[str]',
            'locations': 'list[str]',
            'severity_colors': 'list[AlertMapSeverityColor]',
            'alert_rules': 'list[RecordIdentity]',
            'discriminator___type': 'str'
        }

        self.attribute_map = {
            'label': 'label',
            'group_by': 'groupBy',
            'rollup_type': 'rollupType',
            'alert_status_ids': 'alertStatusIDs',
            'alert_type_ids': 'alertTypeIDs',
            'alert_severity_ids': 'alertSeverityIDs',
            'locations': 'locations',
            'severity_colors': 'severityColors',
            'alert_rules': 'alertRules',
            'discriminator___type': '__type'
        }

        self._label = label
        self._group_by = group_by
        self._rollup_type = rollup_type
        self._alert_status_ids = alert_status_ids
        self._alert_type_ids = alert_type_ids
        self._alert_severity_ids = alert_severity_ids
        self._locations = locations
        self._severity_colors = severity_colors
        self._alert_rules = alert_rules

    @property
    def discriminator___type(self):
        return "CustomReportElementAlertTable"

    @discriminator___type.setter
    def discriminator___type(self, discriminator):
        # Don't need to do anything
        return

    @property
    def label(self):
        """
        Gets the label of this CustomReportElementAlertTable.

        :return: The label of this CustomReportElementAlertTable.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this CustomReportElementAlertTable.

        :param label: The label of this CustomReportElementAlertTable.
        :type: str
        """

        self._label = label

    @property
    def group_by(self):
        """
        Gets the group_by of this CustomReportElementAlertTable.

        :return: The group_by of this CustomReportElementAlertTable.
        :rtype: str
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """
        Sets the group_by of this CustomReportElementAlertTable.

        :param group_by: The group_by of this CustomReportElementAlertTable.
        :type: str
        """
        allowed_values = ["location", "manufacturer", "priority", "relation", "rule", "severity", "status", "type"]
        if group_by is not None and group_by not in allowed_values:
            raise ValueError(
                "Invalid value for `group_by` ({0}), must be one of {1}"
                .format(group_by, allowed_values)
            )

        self._group_by = group_by

    @property
    def rollup_type(self):
        """
        Gets the rollup_type of this CustomReportElementAlertTable.

        :return: The rollup_type of this CustomReportElementAlertTable.
        :rtype: str
        """
        return self._rollup_type

    @rollup_type.setter
    def rollup_type(self, rollup_type):
        """
        Sets the rollup_type of this CustomReportElementAlertTable.

        :param rollup_type: The rollup_type of this CustomReportElementAlertTable.
        :type: str
        """
        allowed_values = ["ADMITTING", "APARTMENT", "ATRIUM", "AUDITORIUM", "BACKOFFICE", "BALCONY", "BAR_ROOM", "BATHROOM", "BEDROOM", "BREAK_ROOM", "BUILDING", "CABLE_ROOM", "CAFETERIA_ROOM", "CAMPUS", "CINEMA", "CLASSROOM", "CLEANING_ROOM", "CLIMATE_CONTROL_ROOM", "CLOAK_ROOM", "CONFERENCE_ROOM", "CONVERSATION_ROOM", "COOKING_ROOM", "COPYING_ROOM", "COPY_ROOM", "DATAS_ERVER_ROOM", "DELIVERY_ROOM", "DINING_ROOM", "DISTRIBUTION_CENTER", "DRESSING_ROOM", "EDUCATIONAL_ROOM", "ELECTRICAL_ROOM", "ELEVATOR", "ELEVATOR_ROOM", "ELEVATOR_SHAFT", "ENTRANCE", "EXERCISE_ROOM", "EXHIBITION_ROOM", "FACADE", "FACTORY", "FITTING_ROOM", "FLOOR", "FOOD_HANDLING_ROOM", "FRONT_DESK", "GARAGE", "GROUP_ROOM", "HALLWAY", "HOME", "HOSPITAL", "ICU", "INPATIENT_SERVICES", "KITCHEN", "LABORATORY", "LAB_SERVICES", "LAND", "LAUNDRY_ROOM", "LEVEL", "LIBRARY", "LIVING_ROOM", "LOADING_RECEIVING_ROOM", "LOBBY", "LOCKER_ROOM", "LOUNGE", "MEDITATION_ROOM", "MORGUE", "MOTHERS_ROOM", "MULTI_PURPOSE_ROOM", "NURSERY", "NURSING_FACILITY", "OFFICE", "OFFICE_ROOM", "OPERATING_ROOM", "OUTPATIENT_SERVICES", "PANTRY", "PARKING", "PERSONAL_HYGIENE", "PHARMACY", "RADIOLOGY", "RECEPTION", "RECORDING_ROOM", "RECOVERY_ROOM", "RECREATIONAL_ROOM", "REGION", "REGIONAL_CENTER", "RESTROOM", "RESTING_ROOM", "RETAIL_ROOM", "ROOF_INNER", "ROOF_OUTER", "ROOF_TOP", "ROOM", "SCHOOL", "SECTION", "SECURITY_ROOM", "SERVER_ROOM", "SERVICE_SHAFT", "SHELTER", "SHIP", "SHOPPING_MALL", "SLAB", "SMALL_STUDY_ROOM", "SPRINKLER_ROOM", "STADIUM", "STAFF_ROOM", "STAIRWELL", "STAIRS", "STORAGE", "STORAGE_ROOM", "SUB_BUILDING", "SUPPLY_ROOM", "TELECOMMUNICATION_ROOM", "TENANT_UNIT", "TERRACE", "THEATER", "THERAPY", "TRAILER", "TREATMENT_ROOM", "TREATMENT_WAITING_ROOM", "TRUCK", "UTILITIES_ROOM", "WARD", "WASTE_MANAGEMENT_ROOM", "WORKSHOP", "ZONE", "OTHER"]
        if rollup_type is not None and rollup_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rollup_type` ({0}), must be one of {1}"
                .format(rollup_type, allowed_values)
            )

        self._rollup_type = rollup_type

    @property
    def alert_status_ids(self):
        """
        Gets the alert_status_ids of this CustomReportElementAlertTable.

        :return: The alert_status_ids of this CustomReportElementAlertTable.
        :rtype: list[str]
        """
        return self._alert_status_ids

    @alert_status_ids.setter
    def alert_status_ids(self, alert_status_ids):
        """
        Sets the alert_status_ids of this CustomReportElementAlertTable.

        :param alert_status_ids: The alert_status_ids of this CustomReportElementAlertTable.
        :type: list[str]
        """
        allowed_values = ["active", "muted", "resolved", "closed"]
        if not set(alert_status_ids).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `alert_status_ids` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(alert_status_ids)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._alert_status_ids = alert_status_ids

    @property
    def alert_type_ids(self):
        """
        Gets the alert_type_ids of this CustomReportElementAlertTable.

        :return: The alert_type_ids of this CustomReportElementAlertTable.
        :rtype: list[str]
        """
        return self._alert_type_ids

    @alert_type_ids.setter
    def alert_type_ids(self, alert_type_ids):
        """
        Sets the alert_type_ids of this CustomReportElementAlertTable.

        :param alert_type_ids: The alert_type_ids of this CustomReportElementAlertTable.
        :type: list[str]
        """
        allowed_values = ["ALARM", "COMMUNICATION_PROBLEM", "DEVICE_FAILURE", "END_OF_LIFE", "INFORMATIONAL", "OPERATOR_SUMMARY", "RECALL", "THRESHOLD_EXCEEDED", "WARNING", "WARRANTY"]
        if not set(alert_type_ids).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `alert_type_ids` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(alert_type_ids)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._alert_type_ids = alert_type_ids

    @property
    def alert_severity_ids(self):
        """
        Gets the alert_severity_ids of this CustomReportElementAlertTable.

        :return: The alert_severity_ids of this CustomReportElementAlertTable.
        :rtype: list[str]
        """
        return self._alert_severity_ids

    @alert_severity_ids.setter
    def alert_severity_ids(self, alert_severity_ids):
        """
        Sets the alert_severity_ids of this CustomReportElementAlertTable.

        :param alert_severity_ids: The alert_severity_ids of this CustomReportElementAlertTable.
        :type: list[str]
        """
        allowed_values = ["CRITICAL", "SIGNIFICANT", "NORMAL", "LOW"]
        if not set(alert_severity_ids).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `alert_severity_ids` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(alert_severity_ids)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._alert_severity_ids = alert_severity_ids

    @property
    def locations(self):
        """
        Gets the locations of this CustomReportElementAlertTable.

        :return: The locations of this CustomReportElementAlertTable.
        :rtype: list[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """
        Sets the locations of this CustomReportElementAlertTable.

        :param locations: The locations of this CustomReportElementAlertTable.
        :type: list[str]
        """

        self._locations = locations

    @property
    def severity_colors(self):
        """
        Gets the severity_colors of this CustomReportElementAlertTable.

        :return: The severity_colors of this CustomReportElementAlertTable.
        :rtype: list[AlertMapSeverityColor]
        """
        return self._severity_colors

    @severity_colors.setter
    def severity_colors(self, severity_colors):
        """
        Sets the severity_colors of this CustomReportElementAlertTable.

        :param severity_colors: The severity_colors of this CustomReportElementAlertTable.
        :type: list[AlertMapSeverityColor]
        """

        self._severity_colors = severity_colors

    @property
    def alert_rules(self):
        """
        Gets the alert_rules of this CustomReportElementAlertTable.

        :return: The alert_rules of this CustomReportElementAlertTable.
        :rtype: list[RecordIdentity]
        """
        return self._alert_rules

    @alert_rules.setter
    def alert_rules(self, alert_rules):
        """
        Sets the alert_rules of this CustomReportElementAlertTable.

        :param alert_rules: The alert_rules of this CustomReportElementAlertTable.
        :type: list[RecordIdentity]
        """

        self._alert_rules = alert_rules

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomReportElementAlertTable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

