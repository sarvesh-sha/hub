# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class AssetGraphResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, version=None, offset=None, next_offset=None, results=None, errors=None):
        """
        AssetGraphResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'version': 'int',
            'offset': 'int',
            'next_offset': 'int',
            'results': 'list[AssetGraphResponseResolved]',
            'errors': 'dict(str, str)'
        }

        self.attribute_map = {
            'version': 'version',
            'offset': 'offset',
            'next_offset': 'nextOffset',
            'results': 'results',
            'errors': 'errors'
        }

        self._version = version
        self._offset = offset
        self._next_offset = next_offset
        self._results = results
        self._errors = errors


    @property
    def version(self):
        """
        Gets the version of this AssetGraphResponse.

        :return: The version of this AssetGraphResponse.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this AssetGraphResponse.

        :param version: The version of this AssetGraphResponse.
        :type: int
        """

        self._version = version

    @property
    def offset(self):
        """
        Gets the offset of this AssetGraphResponse.

        :return: The offset of this AssetGraphResponse.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this AssetGraphResponse.

        :param offset: The offset of this AssetGraphResponse.
        :type: int
        """

        self._offset = offset

    @property
    def next_offset(self):
        """
        Gets the next_offset of this AssetGraphResponse.

        :return: The next_offset of this AssetGraphResponse.
        :rtype: int
        """
        return self._next_offset

    @next_offset.setter
    def next_offset(self, next_offset):
        """
        Sets the next_offset of this AssetGraphResponse.

        :param next_offset: The next_offset of this AssetGraphResponse.
        :type: int
        """

        self._next_offset = next_offset

    @property
    def results(self):
        """
        Gets the results of this AssetGraphResponse.

        :return: The results of this AssetGraphResponse.
        :rtype: list[AssetGraphResponseResolved]
        """
        return self._results

    @results.setter
    def results(self, results):
        """
        Sets the results of this AssetGraphResponse.

        :param results: The results of this AssetGraphResponse.
        :type: list[AssetGraphResponseResolved]
        """

        self._results = results

    @property
    def errors(self):
        """
        Gets the errors of this AssetGraphResponse.

        :return: The errors of this AssetGraphResponse.
        :rtype: dict(str, str)
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """
        Sets the errors of this AssetGraphResponse.

        :param errors: The errors of this AssetGraphResponse.
        :type: dict(str, str)
        """
        allowed_values = ["RequiredNodeNoAsset", "MultipleMatches"]
        if not set(errors.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `errors` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(errors.keys())-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._errors = errors

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AssetGraphResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

