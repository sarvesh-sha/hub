# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class DiscoveryState(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, done_discovery=None, done_device_fetch=None, done_objects_listing=None, done_properties_fetch=None, done_auto_configure_sampling=None, ready_for_data_collection=None, request_discovery=None, request_device_fetch=None, request_objects_listing=None, request_properties_fetch=None, request_auto_configure_sampling=None):
        """
        DiscoveryState - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'done_discovery': 'bool',
            'done_device_fetch': 'bool',
            'done_objects_listing': 'bool',
            'done_properties_fetch': 'bool',
            'done_auto_configure_sampling': 'bool',
            'ready_for_data_collection': 'bool',
            'request_discovery': 'str',
            'request_device_fetch': 'str',
            'request_objects_listing': 'str',
            'request_properties_fetch': 'str',
            'request_auto_configure_sampling': 'str'
        }

        self.attribute_map = {
            'done_discovery': 'doneDiscovery',
            'done_device_fetch': 'doneDeviceFetch',
            'done_objects_listing': 'doneObjectsListing',
            'done_properties_fetch': 'donePropertiesFetch',
            'done_auto_configure_sampling': 'doneAutoConfigureSampling',
            'ready_for_data_collection': 'readyForDataCollection',
            'request_discovery': 'requestDiscovery',
            'request_device_fetch': 'requestDeviceFetch',
            'request_objects_listing': 'requestObjectsListing',
            'request_properties_fetch': 'requestPropertiesFetch',
            'request_auto_configure_sampling': 'requestAutoConfigureSampling'
        }

        self._done_discovery = done_discovery
        self._done_device_fetch = done_device_fetch
        self._done_objects_listing = done_objects_listing
        self._done_properties_fetch = done_properties_fetch
        self._done_auto_configure_sampling = done_auto_configure_sampling
        self._ready_for_data_collection = ready_for_data_collection
        self._request_discovery = request_discovery
        self._request_device_fetch = request_device_fetch
        self._request_objects_listing = request_objects_listing
        self._request_properties_fetch = request_properties_fetch
        self._request_auto_configure_sampling = request_auto_configure_sampling


    @property
    def done_discovery(self):
        """
        Gets the done_discovery of this DiscoveryState.

        :return: The done_discovery of this DiscoveryState.
        :rtype: bool
        """
        return self._done_discovery

    @done_discovery.setter
    def done_discovery(self, done_discovery):
        """
        Sets the done_discovery of this DiscoveryState.

        :param done_discovery: The done_discovery of this DiscoveryState.
        :type: bool
        """

        self._done_discovery = done_discovery

    @property
    def done_device_fetch(self):
        """
        Gets the done_device_fetch of this DiscoveryState.

        :return: The done_device_fetch of this DiscoveryState.
        :rtype: bool
        """
        return self._done_device_fetch

    @done_device_fetch.setter
    def done_device_fetch(self, done_device_fetch):
        """
        Sets the done_device_fetch of this DiscoveryState.

        :param done_device_fetch: The done_device_fetch of this DiscoveryState.
        :type: bool
        """

        self._done_device_fetch = done_device_fetch

    @property
    def done_objects_listing(self):
        """
        Gets the done_objects_listing of this DiscoveryState.

        :return: The done_objects_listing of this DiscoveryState.
        :rtype: bool
        """
        return self._done_objects_listing

    @done_objects_listing.setter
    def done_objects_listing(self, done_objects_listing):
        """
        Sets the done_objects_listing of this DiscoveryState.

        :param done_objects_listing: The done_objects_listing of this DiscoveryState.
        :type: bool
        """

        self._done_objects_listing = done_objects_listing

    @property
    def done_properties_fetch(self):
        """
        Gets the done_properties_fetch of this DiscoveryState.

        :return: The done_properties_fetch of this DiscoveryState.
        :rtype: bool
        """
        return self._done_properties_fetch

    @done_properties_fetch.setter
    def done_properties_fetch(self, done_properties_fetch):
        """
        Sets the done_properties_fetch of this DiscoveryState.

        :param done_properties_fetch: The done_properties_fetch of this DiscoveryState.
        :type: bool
        """

        self._done_properties_fetch = done_properties_fetch

    @property
    def done_auto_configure_sampling(self):
        """
        Gets the done_auto_configure_sampling of this DiscoveryState.

        :return: The done_auto_configure_sampling of this DiscoveryState.
        :rtype: bool
        """
        return self._done_auto_configure_sampling

    @done_auto_configure_sampling.setter
    def done_auto_configure_sampling(self, done_auto_configure_sampling):
        """
        Sets the done_auto_configure_sampling of this DiscoveryState.

        :param done_auto_configure_sampling: The done_auto_configure_sampling of this DiscoveryState.
        :type: bool
        """

        self._done_auto_configure_sampling = done_auto_configure_sampling

    @property
    def ready_for_data_collection(self):
        """
        Gets the ready_for_data_collection of this DiscoveryState.

        :return: The ready_for_data_collection of this DiscoveryState.
        :rtype: bool
        """
        return self._ready_for_data_collection

    @ready_for_data_collection.setter
    def ready_for_data_collection(self, ready_for_data_collection):
        """
        Sets the ready_for_data_collection of this DiscoveryState.

        :param ready_for_data_collection: The ready_for_data_collection of this DiscoveryState.
        :type: bool
        """

        self._ready_for_data_collection = ready_for_data_collection

    @property
    def request_discovery(self):
        """
        Gets the request_discovery of this DiscoveryState.

        :return: The request_discovery of this DiscoveryState.
        :rtype: str
        """
        return self._request_discovery

    @request_discovery.setter
    def request_discovery(self, request_discovery):
        """
        Sets the request_discovery of this DiscoveryState.

        :param request_discovery: The request_discovery of this DiscoveryState.
        :type: str
        """
        allowed_values = ["NONE", "INCREMENTAL", "FULL"]
        if request_discovery is not None and request_discovery not in allowed_values:
            raise ValueError(
                "Invalid value for `request_discovery` ({0}), must be one of {1}"
                .format(request_discovery, allowed_values)
            )

        self._request_discovery = request_discovery

    @property
    def request_device_fetch(self):
        """
        Gets the request_device_fetch of this DiscoveryState.

        :return: The request_device_fetch of this DiscoveryState.
        :rtype: str
        """
        return self._request_device_fetch

    @request_device_fetch.setter
    def request_device_fetch(self, request_device_fetch):
        """
        Sets the request_device_fetch of this DiscoveryState.

        :param request_device_fetch: The request_device_fetch of this DiscoveryState.
        :type: str
        """
        allowed_values = ["NONE", "INCREMENTAL", "FULL"]
        if request_device_fetch is not None and request_device_fetch not in allowed_values:
            raise ValueError(
                "Invalid value for `request_device_fetch` ({0}), must be one of {1}"
                .format(request_device_fetch, allowed_values)
            )

        self._request_device_fetch = request_device_fetch

    @property
    def request_objects_listing(self):
        """
        Gets the request_objects_listing of this DiscoveryState.

        :return: The request_objects_listing of this DiscoveryState.
        :rtype: str
        """
        return self._request_objects_listing

    @request_objects_listing.setter
    def request_objects_listing(self, request_objects_listing):
        """
        Sets the request_objects_listing of this DiscoveryState.

        :param request_objects_listing: The request_objects_listing of this DiscoveryState.
        :type: str
        """
        allowed_values = ["NONE", "INCREMENTAL", "FULL"]
        if request_objects_listing is not None and request_objects_listing not in allowed_values:
            raise ValueError(
                "Invalid value for `request_objects_listing` ({0}), must be one of {1}"
                .format(request_objects_listing, allowed_values)
            )

        self._request_objects_listing = request_objects_listing

    @property
    def request_properties_fetch(self):
        """
        Gets the request_properties_fetch of this DiscoveryState.

        :return: The request_properties_fetch of this DiscoveryState.
        :rtype: str
        """
        return self._request_properties_fetch

    @request_properties_fetch.setter
    def request_properties_fetch(self, request_properties_fetch):
        """
        Sets the request_properties_fetch of this DiscoveryState.

        :param request_properties_fetch: The request_properties_fetch of this DiscoveryState.
        :type: str
        """
        allowed_values = ["NONE", "INCREMENTAL", "FULL"]
        if request_properties_fetch is not None and request_properties_fetch not in allowed_values:
            raise ValueError(
                "Invalid value for `request_properties_fetch` ({0}), must be one of {1}"
                .format(request_properties_fetch, allowed_values)
            )

        self._request_properties_fetch = request_properties_fetch

    @property
    def request_auto_configure_sampling(self):
        """
        Gets the request_auto_configure_sampling of this DiscoveryState.

        :return: The request_auto_configure_sampling of this DiscoveryState.
        :rtype: str
        """
        return self._request_auto_configure_sampling

    @request_auto_configure_sampling.setter
    def request_auto_configure_sampling(self, request_auto_configure_sampling):
        """
        Sets the request_auto_configure_sampling of this DiscoveryState.

        :param request_auto_configure_sampling: The request_auto_configure_sampling of this DiscoveryState.
        :type: str
        """
        allowed_values = ["NONE", "INCREMENTAL", "FULL"]
        if request_auto_configure_sampling is not None and request_auto_configure_sampling not in allowed_values:
            raise ValueError(
                "Invalid value for `request_auto_configure_sampling` ({0}), must be one of {1}"
                .format(request_auto_configure_sampling, allowed_values)
            )

        self._request_auto_configure_sampling = request_auto_configure_sampling

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DiscoveryState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

