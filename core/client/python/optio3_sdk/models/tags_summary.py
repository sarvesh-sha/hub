# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class TagsSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, version=None, tag_frequency=None, relation_frequency=None, point_classes_frequency=None, equipment_classes_frequency=None):
        """
        TagsSummary - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'version': 'int',
            'tag_frequency': 'dict(str, int)',
            'relation_frequency': 'dict(str, int)',
            'point_classes_frequency': 'dict(str, int)',
            'equipment_classes_frequency': 'dict(str, int)'
        }

        self.attribute_map = {
            'version': 'version',
            'tag_frequency': 'tagFrequency',
            'relation_frequency': 'relationFrequency',
            'point_classes_frequency': 'pointClassesFrequency',
            'equipment_classes_frequency': 'equipmentClassesFrequency'
        }

        self._version = version
        self._tag_frequency = tag_frequency
        self._relation_frequency = relation_frequency
        self._point_classes_frequency = point_classes_frequency
        self._equipment_classes_frequency = equipment_classes_frequency


    @property
    def version(self):
        """
        Gets the version of this TagsSummary.

        :return: The version of this TagsSummary.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this TagsSummary.

        :param version: The version of this TagsSummary.
        :type: int
        """

        self._version = version

    @property
    def tag_frequency(self):
        """
        Gets the tag_frequency of this TagsSummary.

        :return: The tag_frequency of this TagsSummary.
        :rtype: dict(str, int)
        """
        return self._tag_frequency

    @tag_frequency.setter
    def tag_frequency(self, tag_frequency):
        """
        Sets the tag_frequency of this TagsSummary.

        :param tag_frequency: The tag_frequency of this TagsSummary.
        :type: dict(str, int)
        """

        self._tag_frequency = tag_frequency

    @property
    def relation_frequency(self):
        """
        Gets the relation_frequency of this TagsSummary.

        :return: The relation_frequency of this TagsSummary.
        :rtype: dict(str, int)
        """
        return self._relation_frequency

    @relation_frequency.setter
    def relation_frequency(self, relation_frequency):
        """
        Sets the relation_frequency of this TagsSummary.

        :param relation_frequency: The relation_frequency of this TagsSummary.
        :type: dict(str, int)
        """

        self._relation_frequency = relation_frequency

    @property
    def point_classes_frequency(self):
        """
        Gets the point_classes_frequency of this TagsSummary.

        :return: The point_classes_frequency of this TagsSummary.
        :rtype: dict(str, int)
        """
        return self._point_classes_frequency

    @point_classes_frequency.setter
    def point_classes_frequency(self, point_classes_frequency):
        """
        Sets the point_classes_frequency of this TagsSummary.

        :param point_classes_frequency: The point_classes_frequency of this TagsSummary.
        :type: dict(str, int)
        """

        self._point_classes_frequency = point_classes_frequency

    @property
    def equipment_classes_frequency(self):
        """
        Gets the equipment_classes_frequency of this TagsSummary.

        :return: The equipment_classes_frequency of this TagsSummary.
        :rtype: dict(str, int)
        """
        return self._equipment_classes_frequency

    @equipment_classes_frequency.setter
    def equipment_classes_frequency(self, equipment_classes_frequency):
        """
        Sets the equipment_classes_frequency of this TagsSummary.

        :param equipment_classes_frequency: The equipment_classes_frequency of this TagsSummary.
        :type: dict(str, int)
        """

        self._equipment_classes_frequency = equipment_classes_frequency

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TagsSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
