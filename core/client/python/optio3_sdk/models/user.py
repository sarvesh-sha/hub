# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class User(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sys_id=None, created_on=None, updated_on=None, first_name=None, last_name=None, email_address=None, phone_number=None, roles=None, groups=None, origin=None):
        """
        User - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_id': 'str',
            'created_on': 'datetime',
            'updated_on': 'datetime',
            'first_name': 'str',
            'last_name': 'str',
            'email_address': 'str',
            'phone_number': 'str',
            'roles': 'list[RecordIdentity]',
            'groups': 'list[RecordIdentity]',
            'origin': 'str'
        }

        self.attribute_map = {
            'sys_id': 'sysId',
            'created_on': 'createdOn',
            'updated_on': 'updatedOn',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'email_address': 'emailAddress',
            'phone_number': 'phoneNumber',
            'roles': 'roles',
            'groups': 'groups',
            'origin': 'origin'
        }

        self._sys_id = sys_id
        self._created_on = created_on
        self._updated_on = updated_on
        self._first_name = first_name
        self._last_name = last_name
        self._email_address = email_address
        self._phone_number = phone_number
        self._roles = roles
        self._groups = groups
        self._origin = origin


    @property
    def sys_id(self):
        """
        Gets the sys_id of this User.

        :return: The sys_id of this User.
        :rtype: str
        """
        return self._sys_id

    @sys_id.setter
    def sys_id(self, sys_id):
        """
        Sets the sys_id of this User.

        :param sys_id: The sys_id of this User.
        :type: str
        """

        self._sys_id = sys_id

    @property
    def created_on(self):
        """
        Gets the created_on of this User.

        :return: The created_on of this User.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this User.

        :param created_on: The created_on of this User.
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_on(self):
        """
        Gets the updated_on of this User.

        :return: The updated_on of this User.
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this User.

        :param updated_on: The updated_on of this User.
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def first_name(self):
        """
        Gets the first_name of this User.

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this User.

        :param first_name: The first_name of this User.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this User.

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this User.

        :param last_name: The last_name of this User.
        :type: str
        """

        self._last_name = last_name

    @property
    def email_address(self):
        """
        Gets the email_address of this User.

        :return: The email_address of this User.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """
        Sets the email_address of this User.

        :param email_address: The email_address of this User.
        :type: str
        """

        self._email_address = email_address

    @property
    def phone_number(self):
        """
        Gets the phone_number of this User.

        :return: The phone_number of this User.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this User.

        :param phone_number: The phone_number of this User.
        :type: str
        """

        self._phone_number = phone_number

    @property
    def roles(self):
        """
        Gets the roles of this User.

        :return: The roles of this User.
        :rtype: list[RecordIdentity]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this User.

        :param roles: The roles of this User.
        :type: list[RecordIdentity]
        """

        self._roles = roles

    @property
    def groups(self):
        """
        Gets the groups of this User.

        :return: The groups of this User.
        :rtype: list[RecordIdentity]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this User.

        :param groups: The groups of this User.
        :type: list[RecordIdentity]
        """

        self._groups = groups

    @property
    def origin(self):
        """
        Gets the origin of this User.

        :return: The origin of this User.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """
        Sets the origin of this User.

        :param origin: The origin of this User.
        :type: str
        """

        self._origin = origin

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
