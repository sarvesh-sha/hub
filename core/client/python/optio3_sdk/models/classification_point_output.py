# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class ClassificationPointOutput(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sys_id=None, parent_sys_id=None, network_sys_id=None, point_class_override=None, equipment_overrides=None, details=None, normalized_name=None, old_normalized_name=None, normalization_history=None, last_result=None, current_result=None, equipments=None, equipment_relationships=None, locations=None, matching_dimensions=None, normalization_tags=None):
        """
        ClassificationPointOutput - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_id': 'str',
            'parent_sys_id': 'str',
            'network_sys_id': 'str',
            'point_class_override': 'str',
            'equipment_overrides': 'list[NormalizationEquipment]',
            'details': 'ClassificationPointInputDetails',
            'normalized_name': 'str',
            'old_normalized_name': 'str',
            'normalization_history': 'list[NormalizationMatchHistory]',
            'last_result': 'ClassificationPointOutputDetails',
            'current_result': 'ClassificationPointOutputDetails',
            'equipments': 'dict(str, NormalizationEquipment)',
            'equipment_relationships': 'dict(str, list[str])',
            'locations': 'list[NormalizationEquipmentLocation]',
            'matching_dimensions': 'list[str]',
            'normalization_tags': 'list[str]'
        }

        self.attribute_map = {
            'sys_id': 'sysId',
            'parent_sys_id': 'parentSysId',
            'network_sys_id': 'networkSysId',
            'point_class_override': 'pointClassOverride',
            'equipment_overrides': 'equipmentOverrides',
            'details': 'details',
            'normalized_name': 'normalizedName',
            'old_normalized_name': 'oldNormalizedName',
            'normalization_history': 'normalizationHistory',
            'last_result': 'lastResult',
            'current_result': 'currentResult',
            'equipments': 'equipments',
            'equipment_relationships': 'equipmentRelationships',
            'locations': 'locations',
            'matching_dimensions': 'matchingDimensions',
            'normalization_tags': 'normalizationTags'
        }

        self._sys_id = sys_id
        self._parent_sys_id = parent_sys_id
        self._network_sys_id = network_sys_id
        self._point_class_override = point_class_override
        self._equipment_overrides = equipment_overrides
        self._details = details
        self._normalized_name = normalized_name
        self._old_normalized_name = old_normalized_name
        self._normalization_history = normalization_history
        self._last_result = last_result
        self._current_result = current_result
        self._equipments = equipments
        self._equipment_relationships = equipment_relationships
        self._locations = locations
        self._matching_dimensions = matching_dimensions
        self._normalization_tags = normalization_tags


    @property
    def sys_id(self):
        """
        Gets the sys_id of this ClassificationPointOutput.

        :return: The sys_id of this ClassificationPointOutput.
        :rtype: str
        """
        return self._sys_id

    @sys_id.setter
    def sys_id(self, sys_id):
        """
        Sets the sys_id of this ClassificationPointOutput.

        :param sys_id: The sys_id of this ClassificationPointOutput.
        :type: str
        """

        self._sys_id = sys_id

    @property
    def parent_sys_id(self):
        """
        Gets the parent_sys_id of this ClassificationPointOutput.

        :return: The parent_sys_id of this ClassificationPointOutput.
        :rtype: str
        """
        return self._parent_sys_id

    @parent_sys_id.setter
    def parent_sys_id(self, parent_sys_id):
        """
        Sets the parent_sys_id of this ClassificationPointOutput.

        :param parent_sys_id: The parent_sys_id of this ClassificationPointOutput.
        :type: str
        """

        self._parent_sys_id = parent_sys_id

    @property
    def network_sys_id(self):
        """
        Gets the network_sys_id of this ClassificationPointOutput.

        :return: The network_sys_id of this ClassificationPointOutput.
        :rtype: str
        """
        return self._network_sys_id

    @network_sys_id.setter
    def network_sys_id(self, network_sys_id):
        """
        Sets the network_sys_id of this ClassificationPointOutput.

        :param network_sys_id: The network_sys_id of this ClassificationPointOutput.
        :type: str
        """

        self._network_sys_id = network_sys_id

    @property
    def point_class_override(self):
        """
        Gets the point_class_override of this ClassificationPointOutput.

        :return: The point_class_override of this ClassificationPointOutput.
        :rtype: str
        """
        return self._point_class_override

    @point_class_override.setter
    def point_class_override(self, point_class_override):
        """
        Sets the point_class_override of this ClassificationPointOutput.

        :param point_class_override: The point_class_override of this ClassificationPointOutput.
        :type: str
        """

        self._point_class_override = point_class_override

    @property
    def equipment_overrides(self):
        """
        Gets the equipment_overrides of this ClassificationPointOutput.

        :return: The equipment_overrides of this ClassificationPointOutput.
        :rtype: list[NormalizationEquipment]
        """
        return self._equipment_overrides

    @equipment_overrides.setter
    def equipment_overrides(self, equipment_overrides):
        """
        Sets the equipment_overrides of this ClassificationPointOutput.

        :param equipment_overrides: The equipment_overrides of this ClassificationPointOutput.
        :type: list[NormalizationEquipment]
        """

        self._equipment_overrides = equipment_overrides

    @property
    def details(self):
        """
        Gets the details of this ClassificationPointOutput.

        :return: The details of this ClassificationPointOutput.
        :rtype: ClassificationPointInputDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this ClassificationPointOutput.

        :param details: The details of this ClassificationPointOutput.
        :type: ClassificationPointInputDetails
        """

        self._details = details

    @property
    def normalized_name(self):
        """
        Gets the normalized_name of this ClassificationPointOutput.

        :return: The normalized_name of this ClassificationPointOutput.
        :rtype: str
        """
        return self._normalized_name

    @normalized_name.setter
    def normalized_name(self, normalized_name):
        """
        Sets the normalized_name of this ClassificationPointOutput.

        :param normalized_name: The normalized_name of this ClassificationPointOutput.
        :type: str
        """

        self._normalized_name = normalized_name

    @property
    def old_normalized_name(self):
        """
        Gets the old_normalized_name of this ClassificationPointOutput.

        :return: The old_normalized_name of this ClassificationPointOutput.
        :rtype: str
        """
        return self._old_normalized_name

    @old_normalized_name.setter
    def old_normalized_name(self, old_normalized_name):
        """
        Sets the old_normalized_name of this ClassificationPointOutput.

        :param old_normalized_name: The old_normalized_name of this ClassificationPointOutput.
        :type: str
        """

        self._old_normalized_name = old_normalized_name

    @property
    def normalization_history(self):
        """
        Gets the normalization_history of this ClassificationPointOutput.

        :return: The normalization_history of this ClassificationPointOutput.
        :rtype: list[NormalizationMatchHistory]
        """
        return self._normalization_history

    @normalization_history.setter
    def normalization_history(self, normalization_history):
        """
        Sets the normalization_history of this ClassificationPointOutput.

        :param normalization_history: The normalization_history of this ClassificationPointOutput.
        :type: list[NormalizationMatchHistory]
        """

        self._normalization_history = normalization_history

    @property
    def last_result(self):
        """
        Gets the last_result of this ClassificationPointOutput.

        :return: The last_result of this ClassificationPointOutput.
        :rtype: ClassificationPointOutputDetails
        """
        return self._last_result

    @last_result.setter
    def last_result(self, last_result):
        """
        Sets the last_result of this ClassificationPointOutput.

        :param last_result: The last_result of this ClassificationPointOutput.
        :type: ClassificationPointOutputDetails
        """

        self._last_result = last_result

    @property
    def current_result(self):
        """
        Gets the current_result of this ClassificationPointOutput.

        :return: The current_result of this ClassificationPointOutput.
        :rtype: ClassificationPointOutputDetails
        """
        return self._current_result

    @current_result.setter
    def current_result(self, current_result):
        """
        Sets the current_result of this ClassificationPointOutput.

        :param current_result: The current_result of this ClassificationPointOutput.
        :type: ClassificationPointOutputDetails
        """

        self._current_result = current_result

    @property
    def equipments(self):
        """
        Gets the equipments of this ClassificationPointOutput.

        :return: The equipments of this ClassificationPointOutput.
        :rtype: dict(str, NormalizationEquipment)
        """
        return self._equipments

    @equipments.setter
    def equipments(self, equipments):
        """
        Sets the equipments of this ClassificationPointOutput.

        :param equipments: The equipments of this ClassificationPointOutput.
        :type: dict(str, NormalizationEquipment)
        """

        self._equipments = equipments

    @property
    def equipment_relationships(self):
        """
        Gets the equipment_relationships of this ClassificationPointOutput.

        :return: The equipment_relationships of this ClassificationPointOutput.
        :rtype: dict(str, list[str])
        """
        return self._equipment_relationships

    @equipment_relationships.setter
    def equipment_relationships(self, equipment_relationships):
        """
        Sets the equipment_relationships of this ClassificationPointOutput.

        :param equipment_relationships: The equipment_relationships of this ClassificationPointOutput.
        :type: dict(str, list[str])
        """

        self._equipment_relationships = equipment_relationships

    @property
    def locations(self):
        """
        Gets the locations of this ClassificationPointOutput.

        :return: The locations of this ClassificationPointOutput.
        :rtype: list[NormalizationEquipmentLocation]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """
        Sets the locations of this ClassificationPointOutput.

        :param locations: The locations of this ClassificationPointOutput.
        :type: list[NormalizationEquipmentLocation]
        """

        self._locations = locations

    @property
    def matching_dimensions(self):
        """
        Gets the matching_dimensions of this ClassificationPointOutput.

        :return: The matching_dimensions of this ClassificationPointOutput.
        :rtype: list[str]
        """
        return self._matching_dimensions

    @matching_dimensions.setter
    def matching_dimensions(self, matching_dimensions):
        """
        Sets the matching_dimensions of this ClassificationPointOutput.

        :param matching_dimensions: The matching_dimensions of this ClassificationPointOutput.
        :type: list[str]
        """

        self._matching_dimensions = matching_dimensions

    @property
    def normalization_tags(self):
        """
        Gets the normalization_tags of this ClassificationPointOutput.

        :return: The normalization_tags of this ClassificationPointOutput.
        :rtype: list[str]
        """
        return self._normalization_tags

    @normalization_tags.setter
    def normalization_tags(self, normalization_tags):
        """
        Sets the normalization_tags of this ClassificationPointOutput.

        :param normalization_tags: The normalization_tags of this ClassificationPointOutput.
        :type: list[str]
        """

        self._normalization_tags = normalization_tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClassificationPointOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
