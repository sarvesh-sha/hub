# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class BackgroundActivity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sys_id=None, created_on=None, updated_on=None, title=None, context=None, status=None, timeout=None, next_activation=None, last_activation=None, last_activation_status=None, last_activation_failure=None, last_activation_failure_trace=None, worker=None, waiting_activities=None, sub_activities=None):
        """
        BackgroundActivity - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_id': 'str',
            'created_on': 'datetime',
            'updated_on': 'datetime',
            'title': 'str',
            'context': 'RecordIdentity',
            'status': 'str',
            'timeout': 'int',
            'next_activation': 'datetime',
            'last_activation': 'datetime',
            'last_activation_status': 'str',
            'last_activation_failure': 'str',
            'last_activation_failure_trace': 'str',
            'worker': 'HostAsset',
            'waiting_activities': 'list[RecordIdentity]',
            'sub_activities': 'list[RecordIdentity]'
        }

        self.attribute_map = {
            'sys_id': 'sysId',
            'created_on': 'createdOn',
            'updated_on': 'updatedOn',
            'title': 'title',
            'context': 'context',
            'status': 'status',
            'timeout': 'timeout',
            'next_activation': 'nextActivation',
            'last_activation': 'lastActivation',
            'last_activation_status': 'lastActivationStatus',
            'last_activation_failure': 'lastActivationFailure',
            'last_activation_failure_trace': 'lastActivationFailureTrace',
            'worker': 'worker',
            'waiting_activities': 'waitingActivities',
            'sub_activities': 'subActivities'
        }

        self._sys_id = sys_id
        self._created_on = created_on
        self._updated_on = updated_on
        self._title = title
        self._context = context
        self._status = status
        self._timeout = timeout
        self._next_activation = next_activation
        self._last_activation = last_activation
        self._last_activation_status = last_activation_status
        self._last_activation_failure = last_activation_failure
        self._last_activation_failure_trace = last_activation_failure_trace
        self._worker = worker
        self._waiting_activities = waiting_activities
        self._sub_activities = sub_activities


    @property
    def sys_id(self):
        """
        Gets the sys_id of this BackgroundActivity.

        :return: The sys_id of this BackgroundActivity.
        :rtype: str
        """
        return self._sys_id

    @sys_id.setter
    def sys_id(self, sys_id):
        """
        Sets the sys_id of this BackgroundActivity.

        :param sys_id: The sys_id of this BackgroundActivity.
        :type: str
        """

        self._sys_id = sys_id

    @property
    def created_on(self):
        """
        Gets the created_on of this BackgroundActivity.

        :return: The created_on of this BackgroundActivity.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this BackgroundActivity.

        :param created_on: The created_on of this BackgroundActivity.
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_on(self):
        """
        Gets the updated_on of this BackgroundActivity.

        :return: The updated_on of this BackgroundActivity.
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this BackgroundActivity.

        :param updated_on: The updated_on of this BackgroundActivity.
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def title(self):
        """
        Gets the title of this BackgroundActivity.

        :return: The title of this BackgroundActivity.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this BackgroundActivity.

        :param title: The title of this BackgroundActivity.
        :type: str
        """

        self._title = title

    @property
    def context(self):
        """
        Gets the context of this BackgroundActivity.

        :return: The context of this BackgroundActivity.
        :rtype: RecordIdentity
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this BackgroundActivity.

        :param context: The context of this BackgroundActivity.
        :type: RecordIdentity
        """

        self._context = context

    @property
    def status(self):
        """
        Gets the status of this BackgroundActivity.

        :return: The status of this BackgroundActivity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this BackgroundActivity.

        :param status: The status of this BackgroundActivity.
        :type: str
        """
        allowed_values = ["ACTIVE", "ACTIVE_BUT_CANCELLING", "PAUSED", "PAUSED_BUT_CANCELLING", "WAITING", "WAITING_BUT_CANCELLING", "SLEEPING", "SLEEPING_BUT_CANCELLIN", "EXECUTING", "EXECUTING_BUT_CANCELLING", "CANCELLED", "COMPLETED", "FAILED"]
        if status is not None and status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timeout(self):
        """
        Gets the timeout of this BackgroundActivity.

        :return: The timeout of this BackgroundActivity.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this BackgroundActivity.

        :param timeout: The timeout of this BackgroundActivity.
        :type: int
        """

        self._timeout = timeout

    @property
    def next_activation(self):
        """
        Gets the next_activation of this BackgroundActivity.

        :return: The next_activation of this BackgroundActivity.
        :rtype: datetime
        """
        return self._next_activation

    @next_activation.setter
    def next_activation(self, next_activation):
        """
        Sets the next_activation of this BackgroundActivity.

        :param next_activation: The next_activation of this BackgroundActivity.
        :type: datetime
        """

        self._next_activation = next_activation

    @property
    def last_activation(self):
        """
        Gets the last_activation of this BackgroundActivity.

        :return: The last_activation of this BackgroundActivity.
        :rtype: datetime
        """
        return self._last_activation

    @last_activation.setter
    def last_activation(self, last_activation):
        """
        Sets the last_activation of this BackgroundActivity.

        :param last_activation: The last_activation of this BackgroundActivity.
        :type: datetime
        """

        self._last_activation = last_activation

    @property
    def last_activation_status(self):
        """
        Gets the last_activation_status of this BackgroundActivity.

        :return: The last_activation_status of this BackgroundActivity.
        :rtype: str
        """
        return self._last_activation_status

    @last_activation_status.setter
    def last_activation_status(self, last_activation_status):
        """
        Sets the last_activation_status of this BackgroundActivity.

        :param last_activation_status: The last_activation_status of this BackgroundActivity.
        :type: str
        """
        allowed_values = ["ACTIVE", "ACTIVE_BUT_CANCELLING", "PAUSED", "PAUSED_BUT_CANCELLING", "WAITING", "WAITING_BUT_CANCELLING", "SLEEPING", "SLEEPING_BUT_CANCELLIN", "EXECUTING", "EXECUTING_BUT_CANCELLING", "CANCELLED", "COMPLETED", "FAILED"]
        if last_activation_status is not None and last_activation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `last_activation_status` ({0}), must be one of {1}"
                .format(last_activation_status, allowed_values)
            )

        self._last_activation_status = last_activation_status

    @property
    def last_activation_failure(self):
        """
        Gets the last_activation_failure of this BackgroundActivity.

        :return: The last_activation_failure of this BackgroundActivity.
        :rtype: str
        """
        return self._last_activation_failure

    @last_activation_failure.setter
    def last_activation_failure(self, last_activation_failure):
        """
        Sets the last_activation_failure of this BackgroundActivity.

        :param last_activation_failure: The last_activation_failure of this BackgroundActivity.
        :type: str
        """

        self._last_activation_failure = last_activation_failure

    @property
    def last_activation_failure_trace(self):
        """
        Gets the last_activation_failure_trace of this BackgroundActivity.

        :return: The last_activation_failure_trace of this BackgroundActivity.
        :rtype: str
        """
        return self._last_activation_failure_trace

    @last_activation_failure_trace.setter
    def last_activation_failure_trace(self, last_activation_failure_trace):
        """
        Sets the last_activation_failure_trace of this BackgroundActivity.

        :param last_activation_failure_trace: The last_activation_failure_trace of this BackgroundActivity.
        :type: str
        """

        self._last_activation_failure_trace = last_activation_failure_trace

    @property
    def worker(self):
        """
        Gets the worker of this BackgroundActivity.

        :return: The worker of this BackgroundActivity.
        :rtype: HostAsset
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """
        Sets the worker of this BackgroundActivity.

        :param worker: The worker of this BackgroundActivity.
        :type: HostAsset
        """

        self._worker = worker

    @property
    def waiting_activities(self):
        """
        Gets the waiting_activities of this BackgroundActivity.

        :return: The waiting_activities of this BackgroundActivity.
        :rtype: list[RecordIdentity]
        """
        return self._waiting_activities

    @waiting_activities.setter
    def waiting_activities(self, waiting_activities):
        """
        Sets the waiting_activities of this BackgroundActivity.

        :param waiting_activities: The waiting_activities of this BackgroundActivity.
        :type: list[RecordIdentity]
        """

        self._waiting_activities = waiting_activities

    @property
    def sub_activities(self):
        """
        Gets the sub_activities of this BackgroundActivity.

        :return: The sub_activities of this BackgroundActivity.
        :rtype: list[RecordIdentity]
        """
        return self._sub_activities

    @sub_activities.setter
    def sub_activities(self, sub_activities):
        """
        Sets the sub_activities of this BackgroundActivity.

        :param sub_activities: The sub_activities of this BackgroundActivity.
        :type: list[RecordIdentity]
        """

        self._sub_activities = sub_activities

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BackgroundActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

