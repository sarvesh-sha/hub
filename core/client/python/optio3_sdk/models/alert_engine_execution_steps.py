# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class AlertEngineExecutionSteps(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, timestamp=None, steps=None, log_entries=None):
        """
        AlertEngineExecutionSteps - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'timestamp': 'datetime',
            'steps': 'list[AlertEngineExecutionStep]',
            'log_entries': 'list[LogLine]'
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'steps': 'steps',
            'log_entries': 'logEntries'
        }

        self._timestamp = timestamp
        self._steps = steps
        self._log_entries = log_entries


    @property
    def timestamp(self):
        """
        Gets the timestamp of this AlertEngineExecutionSteps.

        :return: The timestamp of this AlertEngineExecutionSteps.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this AlertEngineExecutionSteps.

        :param timestamp: The timestamp of this AlertEngineExecutionSteps.
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def steps(self):
        """
        Gets the steps of this AlertEngineExecutionSteps.

        :return: The steps of this AlertEngineExecutionSteps.
        :rtype: list[AlertEngineExecutionStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """
        Sets the steps of this AlertEngineExecutionSteps.

        :param steps: The steps of this AlertEngineExecutionSteps.
        :type: list[AlertEngineExecutionStep]
        """

        self._steps = steps

    @property
    def log_entries(self):
        """
        Gets the log_entries of this AlertEngineExecutionSteps.

        :return: The log_entries of this AlertEngineExecutionSteps.
        :rtype: list[LogLine]
        """
        return self._log_entries

    @log_entries.setter
    def log_entries(self, log_entries):
        """
        Sets the log_entries of this AlertEngineExecutionSteps.

        :param log_entries: The log_entries of this AlertEngineExecutionSteps.
        :type: list[LogLine]
        """

        self._log_entries = log_entries

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AlertEngineExecutionSteps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
