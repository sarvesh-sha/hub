# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class GeoFenceByPolygon(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, unique_id=None, boundary=None, inner_exclusions=None):
        """
        GeoFenceByPolygon - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'unique_id': 'str',
            'boundary': 'LocationPolygon',
            'inner_exclusions': 'list[LocationPolygon]',
            'discriminator___type': 'str'
        }

        self.attribute_map = {
            'unique_id': 'uniqueId',
            'boundary': 'boundary',
            'inner_exclusions': 'innerExclusions',
            'discriminator___type': '__type'
        }

        self._unique_id = unique_id
        self._boundary = boundary
        self._inner_exclusions = inner_exclusions

    @property
    def discriminator___type(self):
        return "GeoFenceByPolygon"

    @discriminator___type.setter
    def discriminator___type(self, discriminator):
        # Don't need to do anything
        return

    @property
    def unique_id(self):
        """
        Gets the unique_id of this GeoFenceByPolygon.

        :return: The unique_id of this GeoFenceByPolygon.
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """
        Sets the unique_id of this GeoFenceByPolygon.

        :param unique_id: The unique_id of this GeoFenceByPolygon.
        :type: str
        """

        self._unique_id = unique_id

    @property
    def boundary(self):
        """
        Gets the boundary of this GeoFenceByPolygon.

        :return: The boundary of this GeoFenceByPolygon.
        :rtype: LocationPolygon
        """
        return self._boundary

    @boundary.setter
    def boundary(self, boundary):
        """
        Sets the boundary of this GeoFenceByPolygon.

        :param boundary: The boundary of this GeoFenceByPolygon.
        :type: LocationPolygon
        """

        self._boundary = boundary

    @property
    def inner_exclusions(self):
        """
        Gets the inner_exclusions of this GeoFenceByPolygon.

        :return: The inner_exclusions of this GeoFenceByPolygon.
        :rtype: list[LocationPolygon]
        """
        return self._inner_exclusions

    @inner_exclusions.setter
    def inner_exclusions(self, inner_exclusions):
        """
        Sets the inner_exclusions of this GeoFenceByPolygon.

        :param inner_exclusions: The inner_exclusions of this GeoFenceByPolygon.
        :type: list[LocationPolygon]
        """

        self._inner_exclusions = inner_exclusions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GeoFenceByPolygon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
