# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class DeviceElementNormalizationProgress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, status=None, devices_to_process=None, devices_processed=None, elements_processed=None, all_words=None, all_unknown_words=None, equipments=None, equipment_relationships=None, details=None, workflow_overrides=None):
        """
        DeviceElementNormalizationProgress - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'status': 'str',
            'devices_to_process': 'int',
            'devices_processed': 'int',
            'elements_processed': 'int',
            'all_words': 'dict(str, int)',
            'all_unknown_words': 'dict(str, int)',
            'equipments': 'dict(str, NormalizationEquipment)',
            'equipment_relationships': 'dict(str, list[str])',
            'details': 'list[ClassificationPointOutput]',
            'workflow_overrides': 'WorkflowOverrides'
        }

        self.attribute_map = {
            'status': 'status',
            'devices_to_process': 'devicesToProcess',
            'devices_processed': 'devicesProcessed',
            'elements_processed': 'elementsProcessed',
            'all_words': 'allWords',
            'all_unknown_words': 'allUnknownWords',
            'equipments': 'equipments',
            'equipment_relationships': 'equipmentRelationships',
            'details': 'details',
            'workflow_overrides': 'workflowOverrides'
        }

        self._status = status
        self._devices_to_process = devices_to_process
        self._devices_processed = devices_processed
        self._elements_processed = elements_processed
        self._all_words = all_words
        self._all_unknown_words = all_unknown_words
        self._equipments = equipments
        self._equipment_relationships = equipment_relationships
        self._details = details
        self._workflow_overrides = workflow_overrides


    @property
    def status(self):
        """
        Gets the status of this DeviceElementNormalizationProgress.

        :return: The status of this DeviceElementNormalizationProgress.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this DeviceElementNormalizationProgress.

        :param status: The status of this DeviceElementNormalizationProgress.
        :type: str
        """
        allowed_values = ["ACTIVE", "ACTIVE_BUT_CANCELLING", "PAUSED", "PAUSED_BUT_CANCELLING", "WAITING", "WAITING_BUT_CANCELLING", "SLEEPING", "SLEEPING_BUT_CANCELLIN", "EXECUTING", "EXECUTING_BUT_CANCELLING", "CANCELLED", "COMPLETED", "FAILED"]
        if status is not None and status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def devices_to_process(self):
        """
        Gets the devices_to_process of this DeviceElementNormalizationProgress.

        :return: The devices_to_process of this DeviceElementNormalizationProgress.
        :rtype: int
        """
        return self._devices_to_process

    @devices_to_process.setter
    def devices_to_process(self, devices_to_process):
        """
        Sets the devices_to_process of this DeviceElementNormalizationProgress.

        :param devices_to_process: The devices_to_process of this DeviceElementNormalizationProgress.
        :type: int
        """

        self._devices_to_process = devices_to_process

    @property
    def devices_processed(self):
        """
        Gets the devices_processed of this DeviceElementNormalizationProgress.

        :return: The devices_processed of this DeviceElementNormalizationProgress.
        :rtype: int
        """
        return self._devices_processed

    @devices_processed.setter
    def devices_processed(self, devices_processed):
        """
        Sets the devices_processed of this DeviceElementNormalizationProgress.

        :param devices_processed: The devices_processed of this DeviceElementNormalizationProgress.
        :type: int
        """

        self._devices_processed = devices_processed

    @property
    def elements_processed(self):
        """
        Gets the elements_processed of this DeviceElementNormalizationProgress.

        :return: The elements_processed of this DeviceElementNormalizationProgress.
        :rtype: int
        """
        return self._elements_processed

    @elements_processed.setter
    def elements_processed(self, elements_processed):
        """
        Sets the elements_processed of this DeviceElementNormalizationProgress.

        :param elements_processed: The elements_processed of this DeviceElementNormalizationProgress.
        :type: int
        """

        self._elements_processed = elements_processed

    @property
    def all_words(self):
        """
        Gets the all_words of this DeviceElementNormalizationProgress.

        :return: The all_words of this DeviceElementNormalizationProgress.
        :rtype: dict(str, int)
        """
        return self._all_words

    @all_words.setter
    def all_words(self, all_words):
        """
        Sets the all_words of this DeviceElementNormalizationProgress.

        :param all_words: The all_words of this DeviceElementNormalizationProgress.
        :type: dict(str, int)
        """

        self._all_words = all_words

    @property
    def all_unknown_words(self):
        """
        Gets the all_unknown_words of this DeviceElementNormalizationProgress.

        :return: The all_unknown_words of this DeviceElementNormalizationProgress.
        :rtype: dict(str, int)
        """
        return self._all_unknown_words

    @all_unknown_words.setter
    def all_unknown_words(self, all_unknown_words):
        """
        Sets the all_unknown_words of this DeviceElementNormalizationProgress.

        :param all_unknown_words: The all_unknown_words of this DeviceElementNormalizationProgress.
        :type: dict(str, int)
        """

        self._all_unknown_words = all_unknown_words

    @property
    def equipments(self):
        """
        Gets the equipments of this DeviceElementNormalizationProgress.

        :return: The equipments of this DeviceElementNormalizationProgress.
        :rtype: dict(str, NormalizationEquipment)
        """
        return self._equipments

    @equipments.setter
    def equipments(self, equipments):
        """
        Sets the equipments of this DeviceElementNormalizationProgress.

        :param equipments: The equipments of this DeviceElementNormalizationProgress.
        :type: dict(str, NormalizationEquipment)
        """

        self._equipments = equipments

    @property
    def equipment_relationships(self):
        """
        Gets the equipment_relationships of this DeviceElementNormalizationProgress.

        :return: The equipment_relationships of this DeviceElementNormalizationProgress.
        :rtype: dict(str, list[str])
        """
        return self._equipment_relationships

    @equipment_relationships.setter
    def equipment_relationships(self, equipment_relationships):
        """
        Sets the equipment_relationships of this DeviceElementNormalizationProgress.

        :param equipment_relationships: The equipment_relationships of this DeviceElementNormalizationProgress.
        :type: dict(str, list[str])
        """

        self._equipment_relationships = equipment_relationships

    @property
    def details(self):
        """
        Gets the details of this DeviceElementNormalizationProgress.

        :return: The details of this DeviceElementNormalizationProgress.
        :rtype: list[ClassificationPointOutput]
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this DeviceElementNormalizationProgress.

        :param details: The details of this DeviceElementNormalizationProgress.
        :type: list[ClassificationPointOutput]
        """

        self._details = details

    @property
    def workflow_overrides(self):
        """
        Gets the workflow_overrides of this DeviceElementNormalizationProgress.

        :return: The workflow_overrides of this DeviceElementNormalizationProgress.
        :rtype: WorkflowOverrides
        """
        return self._workflow_overrides

    @workflow_overrides.setter
    def workflow_overrides(self, workflow_overrides):
        """
        Sets the workflow_overrides of this DeviceElementNormalizationProgress.

        :param workflow_overrides: The workflow_overrides of this DeviceElementNormalizationProgress.
        :type: WorkflowOverrides
        """

        self._workflow_overrides = workflow_overrides

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceElementNormalizationProgress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

