# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class ImportedMetadata(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sys_id=None, created_on=None, updated_on=None, version=None, active=None, metadata=None):
        """
        ImportedMetadata - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_id': 'str',
            'created_on': 'datetime',
            'updated_on': 'datetime',
            'version': 'int',
            'active': 'bool',
            'metadata': 'list[ImportExportData]'
        }

        self.attribute_map = {
            'sys_id': 'sysId',
            'created_on': 'createdOn',
            'updated_on': 'updatedOn',
            'version': 'version',
            'active': 'active',
            'metadata': 'metadata'
        }

        self._sys_id = sys_id
        self._created_on = created_on
        self._updated_on = updated_on
        self._version = version
        self._active = active
        self._metadata = metadata


    @property
    def sys_id(self):
        """
        Gets the sys_id of this ImportedMetadata.

        :return: The sys_id of this ImportedMetadata.
        :rtype: str
        """
        return self._sys_id

    @sys_id.setter
    def sys_id(self, sys_id):
        """
        Sets the sys_id of this ImportedMetadata.

        :param sys_id: The sys_id of this ImportedMetadata.
        :type: str
        """

        self._sys_id = sys_id

    @property
    def created_on(self):
        """
        Gets the created_on of this ImportedMetadata.

        :return: The created_on of this ImportedMetadata.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this ImportedMetadata.

        :param created_on: The created_on of this ImportedMetadata.
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_on(self):
        """
        Gets the updated_on of this ImportedMetadata.

        :return: The updated_on of this ImportedMetadata.
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this ImportedMetadata.

        :param updated_on: The updated_on of this ImportedMetadata.
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def version(self):
        """
        Gets the version of this ImportedMetadata.

        :return: The version of this ImportedMetadata.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this ImportedMetadata.

        :param version: The version of this ImportedMetadata.
        :type: int
        """

        self._version = version

    @property
    def active(self):
        """
        Gets the active of this ImportedMetadata.

        :return: The active of this ImportedMetadata.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this ImportedMetadata.

        :param active: The active of this ImportedMetadata.
        :type: bool
        """

        self._active = active

    @property
    def metadata(self):
        """
        Gets the metadata of this ImportedMetadata.

        :return: The metadata of this ImportedMetadata.
        :rtype: list[ImportExportData]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this ImportedMetadata.

        :param metadata: The metadata of this ImportedMetadata.
        :type: list[ImportExportData]
        """

        self._metadata = metadata

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ImportedMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
