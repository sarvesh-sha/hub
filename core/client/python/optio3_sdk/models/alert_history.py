# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class AlertHistory(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sys_id=None, created_on=None, updated_on=None, alert=None, level=None, type=None, text=None):
        """
        AlertHistory - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_id': 'str',
            'created_on': 'datetime',
            'updated_on': 'datetime',
            'alert': 'RecordIdentity',
            'level': 'str',
            'type': 'str',
            'text': 'str'
        }

        self.attribute_map = {
            'sys_id': 'sysId',
            'created_on': 'createdOn',
            'updated_on': 'updatedOn',
            'alert': 'alert',
            'level': 'level',
            'type': 'type',
            'text': 'text'
        }

        self._sys_id = sys_id
        self._created_on = created_on
        self._updated_on = updated_on
        self._alert = alert
        self._level = level
        self._type = type
        self._text = text


    @property
    def sys_id(self):
        """
        Gets the sys_id of this AlertHistory.

        :return: The sys_id of this AlertHistory.
        :rtype: str
        """
        return self._sys_id

    @sys_id.setter
    def sys_id(self, sys_id):
        """
        Sets the sys_id of this AlertHistory.

        :param sys_id: The sys_id of this AlertHistory.
        :type: str
        """

        self._sys_id = sys_id

    @property
    def created_on(self):
        """
        Gets the created_on of this AlertHistory.

        :return: The created_on of this AlertHistory.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this AlertHistory.

        :param created_on: The created_on of this AlertHistory.
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_on(self):
        """
        Gets the updated_on of this AlertHistory.

        :return: The updated_on of this AlertHistory.
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this AlertHistory.

        :param updated_on: The updated_on of this AlertHistory.
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def alert(self):
        """
        Gets the alert of this AlertHistory.

        :return: The alert of this AlertHistory.
        :rtype: RecordIdentity
        """
        return self._alert

    @alert.setter
    def alert(self, alert):
        """
        Sets the alert of this AlertHistory.

        :param alert: The alert of this AlertHistory.
        :type: RecordIdentity
        """

        self._alert = alert

    @property
    def level(self):
        """
        Gets the level of this AlertHistory.

        :return: The level of this AlertHistory.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this AlertHistory.

        :param level: The level of this AlertHistory.
        :type: str
        """
        allowed_values = ["failure", "info", "recall", "success", "certification"]
        if level is not None and level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def type(self):
        """
        Gets the type of this AlertHistory.

        :return: The type of this AlertHistory.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this AlertHistory.

        :param type: The type of this AlertHistory.
        :type: str
        """
        allowed_values = ["created", "updatedWithNotes", "reassigned", "muted", "unmuted", "resolved", "closed", "reopened"]
        if type is not None and type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def text(self):
        """
        Gets the text of this AlertHistory.

        :return: The text of this AlertHistory.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this AlertHistory.

        :param text: The text of this AlertHistory.
        :type: str
        """

        self._text = text

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AlertHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

