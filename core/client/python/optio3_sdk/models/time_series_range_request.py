# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class TimeSeriesRangeRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, spec=None, range_start=None, range_end=None):
        """
        TimeSeriesRangeRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'spec': 'TimeSeriesPropertyRequest',
            'range_start': 'datetime',
            'range_end': 'datetime'
        }

        self.attribute_map = {
            'spec': 'spec',
            'range_start': 'rangeStart',
            'range_end': 'rangeEnd'
        }

        self._spec = spec
        self._range_start = range_start
        self._range_end = range_end


    @property
    def spec(self):
        """
        Gets the spec of this TimeSeriesRangeRequest.

        :return: The spec of this TimeSeriesRangeRequest.
        :rtype: TimeSeriesPropertyRequest
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """
        Sets the spec of this TimeSeriesRangeRequest.

        :param spec: The spec of this TimeSeriesRangeRequest.
        :type: TimeSeriesPropertyRequest
        """

        self._spec = spec

    @property
    def range_start(self):
        """
        Gets the range_start of this TimeSeriesRangeRequest.

        :return: The range_start of this TimeSeriesRangeRequest.
        :rtype: datetime
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start):
        """
        Sets the range_start of this TimeSeriesRangeRequest.

        :param range_start: The range_start of this TimeSeriesRangeRequest.
        :type: datetime
        """

        self._range_start = range_start

    @property
    def range_end(self):
        """
        Gets the range_end of this TimeSeriesRangeRequest.

        :return: The range_end of this TimeSeriesRangeRequest.
        :rtype: datetime
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end):
        """
        Sets the range_end of this TimeSeriesRangeRequest.

        :param range_end: The range_end of this TimeSeriesRangeRequest.
        :type: datetime
        """

        self._range_end = range_end

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TimeSeriesRangeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
