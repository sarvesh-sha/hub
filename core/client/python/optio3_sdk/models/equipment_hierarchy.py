# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class EquipmentHierarchy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sys_id=None, name=None, equipment_class_id=None, location_sys_id=None, tags=None, children=None):
        """
        EquipmentHierarchy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_id': 'str',
            'name': 'str',
            'equipment_class_id': 'str',
            'location_sys_id': 'str',
            'tags': 'list[str]',
            'children': 'list[EquipmentHierarchy]'
        }

        self.attribute_map = {
            'sys_id': 'sysId',
            'name': 'name',
            'equipment_class_id': 'equipmentClassId',
            'location_sys_id': 'locationSysId',
            'tags': 'tags',
            'children': 'children'
        }

        self._sys_id = sys_id
        self._name = name
        self._equipment_class_id = equipment_class_id
        self._location_sys_id = location_sys_id
        self._tags = tags
        self._children = children


    @property
    def sys_id(self):
        """
        Gets the sys_id of this EquipmentHierarchy.

        :return: The sys_id of this EquipmentHierarchy.
        :rtype: str
        """
        return self._sys_id

    @sys_id.setter
    def sys_id(self, sys_id):
        """
        Sets the sys_id of this EquipmentHierarchy.

        :param sys_id: The sys_id of this EquipmentHierarchy.
        :type: str
        """

        self._sys_id = sys_id

    @property
    def name(self):
        """
        Gets the name of this EquipmentHierarchy.

        :return: The name of this EquipmentHierarchy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EquipmentHierarchy.

        :param name: The name of this EquipmentHierarchy.
        :type: str
        """

        self._name = name

    @property
    def equipment_class_id(self):
        """
        Gets the equipment_class_id of this EquipmentHierarchy.

        :return: The equipment_class_id of this EquipmentHierarchy.
        :rtype: str
        """
        return self._equipment_class_id

    @equipment_class_id.setter
    def equipment_class_id(self, equipment_class_id):
        """
        Sets the equipment_class_id of this EquipmentHierarchy.

        :param equipment_class_id: The equipment_class_id of this EquipmentHierarchy.
        :type: str
        """

        self._equipment_class_id = equipment_class_id

    @property
    def location_sys_id(self):
        """
        Gets the location_sys_id of this EquipmentHierarchy.

        :return: The location_sys_id of this EquipmentHierarchy.
        :rtype: str
        """
        return self._location_sys_id

    @location_sys_id.setter
    def location_sys_id(self, location_sys_id):
        """
        Sets the location_sys_id of this EquipmentHierarchy.

        :param location_sys_id: The location_sys_id of this EquipmentHierarchy.
        :type: str
        """

        self._location_sys_id = location_sys_id

    @property
    def tags(self):
        """
        Gets the tags of this EquipmentHierarchy.

        :return: The tags of this EquipmentHierarchy.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this EquipmentHierarchy.

        :param tags: The tags of this EquipmentHierarchy.
        :type: list[str]
        """

        self._tags = tags

    @property
    def children(self):
        """
        Gets the children of this EquipmentHierarchy.

        :return: The children of this EquipmentHierarchy.
        :rtype: list[EquipmentHierarchy]
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this EquipmentHierarchy.

        :param children: The children of this EquipmentHierarchy.
        :type: list[EquipmentHierarchy]
        """

        self._children = children

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EquipmentHierarchy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
