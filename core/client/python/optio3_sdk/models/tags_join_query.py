# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class TagsJoinQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, terms=None, joins=None, start_offset=None, max_results=None):
        """
        TagsJoinQuery - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'terms': 'list[TagsJoinTerm]',
            'joins': 'list[TagsJoin]',
            'start_offset': 'int',
            'max_results': 'int'
        }

        self.attribute_map = {
            'terms': 'terms',
            'joins': 'joins',
            'start_offset': 'startOffset',
            'max_results': 'maxResults'
        }

        self._terms = terms
        self._joins = joins
        self._start_offset = start_offset
        self._max_results = max_results


    @property
    def terms(self):
        """
        Gets the terms of this TagsJoinQuery.

        :return: The terms of this TagsJoinQuery.
        :rtype: list[TagsJoinTerm]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """
        Sets the terms of this TagsJoinQuery.

        :param terms: The terms of this TagsJoinQuery.
        :type: list[TagsJoinTerm]
        """

        self._terms = terms

    @property
    def joins(self):
        """
        Gets the joins of this TagsJoinQuery.

        :return: The joins of this TagsJoinQuery.
        :rtype: list[TagsJoin]
        """
        return self._joins

    @joins.setter
    def joins(self, joins):
        """
        Sets the joins of this TagsJoinQuery.

        :param joins: The joins of this TagsJoinQuery.
        :type: list[TagsJoin]
        """

        self._joins = joins

    @property
    def start_offset(self):
        """
        Gets the start_offset of this TagsJoinQuery.

        :return: The start_offset of this TagsJoinQuery.
        :rtype: int
        """
        return self._start_offset

    @start_offset.setter
    def start_offset(self, start_offset):
        """
        Sets the start_offset of this TagsJoinQuery.

        :param start_offset: The start_offset of this TagsJoinQuery.
        :type: int
        """

        self._start_offset = start_offset

    @property
    def max_results(self):
        """
        Gets the max_results of this TagsJoinQuery.

        :return: The max_results of this TagsJoinQuery.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """
        Sets the max_results of this TagsJoinQuery.

        :param max_results: The max_results of this TagsJoinQuery.
        :type: int
        """

        self._max_results = max_results

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TagsJoinQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
