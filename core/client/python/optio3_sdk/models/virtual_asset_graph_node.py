# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class VirtualAssetGraphNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, node_id=None, type=None, ascending=None, collapsed=None):
        """
        VirtualAssetGraphNode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'node_id': 'str',
            'type': 'str',
            'ascending': 'bool',
            'collapsed': 'bool'
        }

        self.attribute_map = {
            'node_id': 'nodeId',
            'type': 'type',
            'ascending': 'ascending',
            'collapsed': 'collapsed'
        }

        self._node_id = node_id
        self._type = type
        self._ascending = ascending
        self._collapsed = collapsed


    @property
    def node_id(self):
        """
        Gets the node_id of this VirtualAssetGraphNode.

        :return: The node_id of this VirtualAssetGraphNode.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """
        Sets the node_id of this VirtualAssetGraphNode.

        :param node_id: The node_id of this VirtualAssetGraphNode.
        :type: str
        """

        self._node_id = node_id

    @property
    def type(self):
        """
        Gets the type of this VirtualAssetGraphNode.

        :return: The type of this VirtualAssetGraphNode.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this VirtualAssetGraphNode.

        :param type: The type of this VirtualAssetGraphNode.
        :type: str
        """
        allowed_values = ["Name", "Identifier", "Location", "FullLocation", "PointClass", "EquipmentClass"]
        if type is not None and type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def ascending(self):
        """
        Gets the ascending of this VirtualAssetGraphNode.

        :return: The ascending of this VirtualAssetGraphNode.
        :rtype: bool
        """
        return self._ascending

    @ascending.setter
    def ascending(self, ascending):
        """
        Sets the ascending of this VirtualAssetGraphNode.

        :param ascending: The ascending of this VirtualAssetGraphNode.
        :type: bool
        """

        self._ascending = ascending

    @property
    def collapsed(self):
        """
        Gets the collapsed of this VirtualAssetGraphNode.

        :return: The collapsed of this VirtualAssetGraphNode.
        :rtype: bool
        """
        return self._collapsed

    @collapsed.setter
    def collapsed(self, collapsed):
        """
        Sets the collapsed of this VirtualAssetGraphNode.

        :param collapsed: The collapsed of this VirtualAssetGraphNode.
        :type: bool
        """

        self._collapsed = collapsed

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VirtualAssetGraphNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

