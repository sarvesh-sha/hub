# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class AzureDigitalTwinsHelperCredentials(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, tenant_id=None, client_id=None, client_secret=None, endpoint=None):
        """
        AzureDigitalTwinsHelperCredentials - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tenant_id': 'str',
            'client_id': 'str',
            'client_secret': 'str',
            'endpoint': 'str'
        }

        self.attribute_map = {
            'tenant_id': 'tenantId',
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'endpoint': 'endpoint'
        }

        self._tenant_id = tenant_id
        self._client_id = client_id
        self._client_secret = client_secret
        self._endpoint = endpoint


    @property
    def tenant_id(self):
        """
        Gets the tenant_id of this AzureDigitalTwinsHelperCredentials.

        :return: The tenant_id of this AzureDigitalTwinsHelperCredentials.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """
        Sets the tenant_id of this AzureDigitalTwinsHelperCredentials.

        :param tenant_id: The tenant_id of this AzureDigitalTwinsHelperCredentials.
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def client_id(self):
        """
        Gets the client_id of this AzureDigitalTwinsHelperCredentials.

        :return: The client_id of this AzureDigitalTwinsHelperCredentials.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this AzureDigitalTwinsHelperCredentials.

        :param client_id: The client_id of this AzureDigitalTwinsHelperCredentials.
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """
        Gets the client_secret of this AzureDigitalTwinsHelperCredentials.

        :return: The client_secret of this AzureDigitalTwinsHelperCredentials.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """
        Sets the client_secret of this AzureDigitalTwinsHelperCredentials.

        :param client_secret: The client_secret of this AzureDigitalTwinsHelperCredentials.
        :type: str
        """

        self._client_secret = client_secret

    @property
    def endpoint(self):
        """
        Gets the endpoint of this AzureDigitalTwinsHelperCredentials.

        :return: The endpoint of this AzureDigitalTwinsHelperCredentials.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """
        Sets the endpoint of this AzureDigitalTwinsHelperCredentials.

        :param endpoint: The endpoint of this AzureDigitalTwinsHelperCredentials.
        :type: str
        """

        self._endpoint = endpoint

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AzureDigitalTwinsHelperCredentials):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
