# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class TagsJoin(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, left_side=None, relation=None, right_side=None):
        """
        TagsJoin - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'left_side': 'str',
            'relation': 'str',
            'right_side': 'str'
        }

        self.attribute_map = {
            'left_side': 'leftSide',
            'relation': 'relation',
            'right_side': 'rightSide'
        }

        self._left_side = left_side
        self._relation = relation
        self._right_side = right_side


    @property
    def left_side(self):
        """
        Gets the left_side of this TagsJoin.

        :return: The left_side of this TagsJoin.
        :rtype: str
        """
        return self._left_side

    @left_side.setter
    def left_side(self, left_side):
        """
        Sets the left_side of this TagsJoin.

        :param left_side: The left_side of this TagsJoin.
        :type: str
        """

        self._left_side = left_side

    @property
    def relation(self):
        """
        Gets the relation of this TagsJoin.

        :return: The relation of this TagsJoin.
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """
        Sets the relation of this TagsJoin.

        :param relation: The relation of this TagsJoin.
        :type: str
        """
        allowed_values = ["structural", "controls"]
        if relation is not None and relation not in allowed_values:
            raise ValueError(
                "Invalid value for `relation` ({0}), must be one of {1}"
                .format(relation, allowed_values)
            )

        self._relation = relation

    @property
    def right_side(self):
        """
        Gets the right_side of this TagsJoin.

        :return: The right_side of this TagsJoin.
        :rtype: str
        """
        return self._right_side

    @right_side.setter
    def right_side(self, right_side):
        """
        Sets the right_side of this TagsJoin.

        :param right_side: The right_side of this TagsJoin.
        :type: str
        """

        self._right_side = right_side

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TagsJoin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

