# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class AlertMapPinConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, pin_icon=None, pin_size=None, color_mode=None, data_source=None, static_color=None, count_colors=None, severity_colors=None):
        """
        AlertMapPinConfig - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'pin_icon': 'str',
            'pin_size': 'int',
            'color_mode': 'str',
            'data_source': 'str',
            'static_color': 'str',
            'count_colors': 'list[ColorSegment]',
            'severity_colors': 'list[AlertMapSeverityColor]'
        }

        self.attribute_map = {
            'pin_icon': 'pinIcon',
            'pin_size': 'pinSize',
            'color_mode': 'colorMode',
            'data_source': 'dataSource',
            'static_color': 'staticColor',
            'count_colors': 'countColors',
            'severity_colors': 'severityColors'
        }

        self._pin_icon = pin_icon
        self._pin_size = pin_size
        self._color_mode = color_mode
        self._data_source = data_source
        self._static_color = static_color
        self._count_colors = count_colors
        self._severity_colors = severity_colors


    @property
    def pin_icon(self):
        """
        Gets the pin_icon of this AlertMapPinConfig.

        :return: The pin_icon of this AlertMapPinConfig.
        :rtype: str
        """
        return self._pin_icon

    @pin_icon.setter
    def pin_icon(self, pin_icon):
        """
        Sets the pin_icon of this AlertMapPinConfig.

        :param pin_icon: The pin_icon of this AlertMapPinConfig.
        :type: str
        """
        allowed_values = ["Pin", "Circle", "Dot"]
        if pin_icon is not None and pin_icon not in allowed_values:
            raise ValueError(
                "Invalid value for `pin_icon` ({0}), must be one of {1}"
                .format(pin_icon, allowed_values)
            )

        self._pin_icon = pin_icon

    @property
    def pin_size(self):
        """
        Gets the pin_size of this AlertMapPinConfig.

        :return: The pin_size of this AlertMapPinConfig.
        :rtype: int
        """
        return self._pin_size

    @pin_size.setter
    def pin_size(self, pin_size):
        """
        Sets the pin_size of this AlertMapPinConfig.

        :param pin_size: The pin_size of this AlertMapPinConfig.
        :type: int
        """

        self._pin_size = pin_size

    @property
    def color_mode(self):
        """
        Gets the color_mode of this AlertMapPinConfig.

        :return: The color_mode of this AlertMapPinConfig.
        :rtype: str
        """
        return self._color_mode

    @color_mode.setter
    def color_mode(self, color_mode):
        """
        Sets the color_mode of this AlertMapPinConfig.

        :param color_mode: The color_mode of this AlertMapPinConfig.
        :type: str
        """
        allowed_values = ["Dynamic", "Fixed"]
        if color_mode is not None and color_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `color_mode` ({0}), must be one of {1}"
                .format(color_mode, allowed_values)
            )

        self._color_mode = color_mode

    @property
    def data_source(self):
        """
        Gets the data_source of this AlertMapPinConfig.

        :return: The data_source of this AlertMapPinConfig.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """
        Sets the data_source of this AlertMapPinConfig.

        :param data_source: The data_source of this AlertMapPinConfig.
        :type: str
        """
        allowed_values = ["AlertCount", "Severity"]
        if data_source is not None and data_source not in allowed_values:
            raise ValueError(
                "Invalid value for `data_source` ({0}), must be one of {1}"
                .format(data_source, allowed_values)
            )

        self._data_source = data_source

    @property
    def static_color(self):
        """
        Gets the static_color of this AlertMapPinConfig.

        :return: The static_color of this AlertMapPinConfig.
        :rtype: str
        """
        return self._static_color

    @static_color.setter
    def static_color(self, static_color):
        """
        Sets the static_color of this AlertMapPinConfig.

        :param static_color: The static_color of this AlertMapPinConfig.
        :type: str
        """

        self._static_color = static_color

    @property
    def count_colors(self):
        """
        Gets the count_colors of this AlertMapPinConfig.

        :return: The count_colors of this AlertMapPinConfig.
        :rtype: list[ColorSegment]
        """
        return self._count_colors

    @count_colors.setter
    def count_colors(self, count_colors):
        """
        Sets the count_colors of this AlertMapPinConfig.

        :param count_colors: The count_colors of this AlertMapPinConfig.
        :type: list[ColorSegment]
        """

        self._count_colors = count_colors

    @property
    def severity_colors(self):
        """
        Gets the severity_colors of this AlertMapPinConfig.

        :return: The severity_colors of this AlertMapPinConfig.
        :rtype: list[AlertMapSeverityColor]
        """
        return self._severity_colors

    @severity_colors.setter
    def severity_colors(self, severity_colors):
        """
        Sets the severity_colors of this AlertMapPinConfig.

        :param severity_colors: The severity_colors of this AlertMapPinConfig.
        :type: list[AlertMapSeverityColor]
        """

        self._severity_colors = severity_colors

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AlertMapPinConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

