# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class ReportConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, shared_graphs=None, pdf_format=None, landscape=None, container=None):
        """
        ReportConfiguration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'shared_graphs': 'list[SharedAssetGraph]',
            'pdf_format': 'str',
            'landscape': 'bool',
            'container': 'ReportLayoutBase'
        }

        self.attribute_map = {
            'shared_graphs': 'sharedGraphs',
            'pdf_format': 'pdfFormat',
            'landscape': 'landscape',
            'container': 'container'
        }

        self._shared_graphs = shared_graphs
        self._pdf_format = pdf_format
        self._landscape = landscape
        self._container = container


    @property
    def shared_graphs(self):
        """
        Gets the shared_graphs of this ReportConfiguration.

        :return: The shared_graphs of this ReportConfiguration.
        :rtype: list[SharedAssetGraph]
        """
        return self._shared_graphs

    @shared_graphs.setter
    def shared_graphs(self, shared_graphs):
        """
        Sets the shared_graphs of this ReportConfiguration.

        :param shared_graphs: The shared_graphs of this ReportConfiguration.
        :type: list[SharedAssetGraph]
        """

        self._shared_graphs = shared_graphs

    @property
    def pdf_format(self):
        """
        Gets the pdf_format of this ReportConfiguration.

        :return: The pdf_format of this ReportConfiguration.
        :rtype: str
        """
        return self._pdf_format

    @pdf_format.setter
    def pdf_format(self, pdf_format):
        """
        Sets the pdf_format of this ReportConfiguration.

        :param pdf_format: The pdf_format of this ReportConfiguration.
        :type: str
        """
        allowed_values = ["letter", "legal", "tabloid", "ledger", "a0", "a1", "a2", "a3", "a4", "a5", "a6"]
        if pdf_format is not None and pdf_format not in allowed_values:
            raise ValueError(
                "Invalid value for `pdf_format` ({0}), must be one of {1}"
                .format(pdf_format, allowed_values)
            )

        self._pdf_format = pdf_format

    @property
    def landscape(self):
        """
        Gets the landscape of this ReportConfiguration.

        :return: The landscape of this ReportConfiguration.
        :rtype: bool
        """
        return self._landscape

    @landscape.setter
    def landscape(self, landscape):
        """
        Sets the landscape of this ReportConfiguration.

        :param landscape: The landscape of this ReportConfiguration.
        :type: bool
        """

        self._landscape = landscape

    @property
    def container(self):
        """
        Gets the container of this ReportConfiguration.

        :return: The container of this ReportConfiguration.
        :rtype: ReportLayoutBase
        """
        return self._container

    @container.setter
    def container(self, container):
        """
        Sets the container of this ReportConfiguration.

        :param container: The container of this ReportConfiguration.
        :type: ReportLayoutBase
        """

        self._container = container

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

