# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class PointClass(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, disabled=None, ignore_point_if_matched=None, id=None, point_class_name=None, point_class_description=None, type=None, unit_id=None, unit_description=None, unit=None, kind_id=None, kind_description=None, hints=None, alias_point_class_id=None, azure_digital_twin=None, well_known=None, tags=None):
        """
        PointClass - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'disabled': 'bool',
            'ignore_point_if_matched': 'bool',
            'id': 'int',
            'point_class_name': 'str',
            'point_class_description': 'str',
            'type': 'str',
            'unit_id': 'int',
            'unit_description': 'str',
            'unit': 'str',
            'kind_id': 'int',
            'kind_description': 'str',
            'hints': 'str',
            'alias_point_class_id': 'str',
            'azure_digital_twin': 'str',
            'well_known': 'str',
            'tags': 'list[str]'
        }

        self.attribute_map = {
            'disabled': 'disabled',
            'ignore_point_if_matched': 'ignorePointIfMatched',
            'id': 'id',
            'point_class_name': 'pointClassName',
            'point_class_description': 'pointClassDescription',
            'type': 'type',
            'unit_id': 'unitId',
            'unit_description': 'unitDescription',
            'unit': 'unit',
            'kind_id': 'kindId',
            'kind_description': 'kindDescription',
            'hints': 'hints',
            'alias_point_class_id': 'aliasPointClassId',
            'azure_digital_twin': 'azureDigitalTwin',
            'well_known': 'wellKnown',
            'tags': 'tags'
        }

        self._disabled = disabled
        self._ignore_point_if_matched = ignore_point_if_matched
        self._id = id
        self._point_class_name = point_class_name
        self._point_class_description = point_class_description
        self._type = type
        self._unit_id = unit_id
        self._unit_description = unit_description
        self._unit = unit
        self._kind_id = kind_id
        self._kind_description = kind_description
        self._hints = hints
        self._alias_point_class_id = alias_point_class_id
        self._azure_digital_twin = azure_digital_twin
        self._well_known = well_known
        self._tags = tags


    @property
    def disabled(self):
        """
        Gets the disabled of this PointClass.

        :return: The disabled of this PointClass.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """
        Sets the disabled of this PointClass.

        :param disabled: The disabled of this PointClass.
        :type: bool
        """

        self._disabled = disabled

    @property
    def ignore_point_if_matched(self):
        """
        Gets the ignore_point_if_matched of this PointClass.

        :return: The ignore_point_if_matched of this PointClass.
        :rtype: bool
        """
        return self._ignore_point_if_matched

    @ignore_point_if_matched.setter
    def ignore_point_if_matched(self, ignore_point_if_matched):
        """
        Sets the ignore_point_if_matched of this PointClass.

        :param ignore_point_if_matched: The ignore_point_if_matched of this PointClass.
        :type: bool
        """

        self._ignore_point_if_matched = ignore_point_if_matched

    @property
    def id(self):
        """
        Gets the id of this PointClass.

        :return: The id of this PointClass.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PointClass.

        :param id: The id of this PointClass.
        :type: int
        """

        self._id = id

    @property
    def point_class_name(self):
        """
        Gets the point_class_name of this PointClass.

        :return: The point_class_name of this PointClass.
        :rtype: str
        """
        return self._point_class_name

    @point_class_name.setter
    def point_class_name(self, point_class_name):
        """
        Sets the point_class_name of this PointClass.

        :param point_class_name: The point_class_name of this PointClass.
        :type: str
        """

        self._point_class_name = point_class_name

    @property
    def point_class_description(self):
        """
        Gets the point_class_description of this PointClass.

        :return: The point_class_description of this PointClass.
        :rtype: str
        """
        return self._point_class_description

    @point_class_description.setter
    def point_class_description(self, point_class_description):
        """
        Sets the point_class_description of this PointClass.

        :param point_class_description: The point_class_description of this PointClass.
        :type: str
        """

        self._point_class_description = point_class_description

    @property
    def type(self):
        """
        Gets the type of this PointClass.

        :return: The type of this PointClass.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PointClass.

        :param type: The type of this PointClass.
        :type: str
        """
        allowed_values = ["Analytic", "Command", "Setpoint", "Status", "Value"]
        if type is not None and type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unit_id(self):
        """
        Gets the unit_id of this PointClass.

        :return: The unit_id of this PointClass.
        :rtype: int
        """
        return self._unit_id

    @unit_id.setter
    def unit_id(self, unit_id):
        """
        Sets the unit_id of this PointClass.

        :param unit_id: The unit_id of this PointClass.
        :type: int
        """

        self._unit_id = unit_id

    @property
    def unit_description(self):
        """
        Gets the unit_description of this PointClass.

        :return: The unit_description of this PointClass.
        :rtype: str
        """
        return self._unit_description

    @unit_description.setter
    def unit_description(self, unit_description):
        """
        Sets the unit_description of this PointClass.

        :param unit_description: The unit_description of this PointClass.
        :type: str
        """

        self._unit_description = unit_description

    @property
    def unit(self):
        """
        Gets the unit of this PointClass.

        :return: The unit of this PointClass.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """
        Sets the unit of this PointClass.

        :param unit: The unit of this PointClass.
        :type: str
        """
        allowed_values = ["enumerated", "onOff", "activeInactive", "constant", "log", "meters", "nanometers", "micrometers", "millimeters", "centimeters", "kilometers", "inches", "feet", "miles", "seconds", "hundredths_seconds", "milliseconds", "minutes", "hours", "days", "weeks", "months", "years", "grams", "nanograms", "micrograms", "milligrams", "kilograms", "pounds_mass", "tons", "meters_per_second", "meters_per_minute", "meters_per_hour", "millimeters_per_second", "millimeters_per_minute", "millimeters_per_hour", "kilometers_per_hour", "feet_per_second", "feet_per_minute", "miles_per_hour", "knots", "longitude", "latitude", "meters_per_second_per_second", "millig", "cubic_meters", "cubic_feet", "liters", "milliliters", "imperial_gallons", "us_gallons", "cubic_feet_per_minute", "cubic_feet_per_second", "cubic_feet_per_hour", "cubic_feet_per_day", "thousand_cubic_feet_per_day", "standard_cubic_feet_per_day", "million_standard_cubic_feet_per_minute", "million_standard_cubic_feet_per_day", "thousand_standard_cubic_feet_per_day", "cubic_meters_per_minute", "cubic_meters_per_second", "cubic_meters_per_hour", "cubic_meters_per_day", "liters_per_second", "liters_per_minute", "liters_per_hour", "milliliters_per_second", "pounds_mass_per_day", "imperial_gallons_per_minute", "us_gallons_per_minute", "us_gallons_per_hour", "square_meters", "square_centimeters", "square_feet", "square_inches", "currency_dollar_US", "currency_dollar_Canadian", "currency_euro", "currency_generic", "amperes", "milliamperes", "kiloamperes", "megaamperes", "volts", "millivolts", "kilovolts", "megavolts", "watts", "milliwatts", "kilowatts", "megawatts", "amperes_per_meter", "amperes_per_square_meter", "ampere_square_meters", "ohms", "milliohms", "kilohms", "megohms", "ohm_meters", "ohm_meter_squared_per_meter", "siemens", "millisiemens", "microsiemens", "siemens_per_meter", "microsiemens_per_millimeter", "decibels", "decibels_milliwatts", "decibels_millivolt", "decibels_volt", "farads", "henrys", "teslas", "webers", "power_factor", "volt_amperes", "kilovolt_amperes", "megavolt_amperes", "volt_amperes_reactive", "kilovolt_amperes_reactive", "megavolt_amperes_reactive", "volts_per_meter", "volts_per_degree_kelvin", "degrees_phase", "ampere_seconds", "ampere_hours", "volt_ampere_hours", "kilovolt_ampere_hours", "megavolt_ampere_hours", "volt_ampere_hours_reactive", "kilovolt_ampere_hours_reactive", "megavolt_ampere_hours_reactive", "volt_square_hours", "ampere_square_hours", "joules", "kilojoules", "megajoules", "kilojoules_per_kilogram", "watt_hours", "kilowatt_hours", "megawatt_hours", "watt_hours_reactive", "kilowatt_hours_reactive", "megawatt_hours_reactive", "btus", "kilo_btus", "mega_btus", "therms", "ton_hours", "joules_per_kilogram_dry_air", "kilojoules_per_kilogram_dry_air", "megajoules_per_kilogram_dry_air", "btus_per_pound_dry_air", "btus_per_pound", "joules_per_degree_kelvin", "kilojoules_per_degree_kelvin", "megajoules_per_degree_kelvin", "joules_per_kilogram_degree_kelvin", "newton", "newton_meters", "hertz", "kilohertz", "megahertz", "cycles_per_minute", "cycles_per_hour", "per_hour", "per_minute", "per_second", "grams_of_water_per_kilogram_dry_air", "percent_relative_humidity", "watts_per_square_foot", "watts_per_square_meter", "milliwatts_per_square_centimeter", "candelas", "candelas_per_square_meter", "lumens", "luxes", "foot_candles", "grams_per_second", "grams_per_minute", "kilograms_per_second", "kilograms_per_minute", "kilograms_per_hour", "pounds_mass_per_second", "pounds_mass_per_minute", "pounds_mass_per_hour", "tons_per_hour", "btus_per_hour", "kilo_btus_per_hour", "joule_per_hours", "horsepower", "tons_refrigeration", "pascals", "hectopascals", "kilopascals", "megapascals", "millibars", "bars", "pounds_force_per_square_inch", "millimeters_of_water", "centimeters_of_water", "inches_of_water", "millimeters_of_mercury", "centimeters_of_mercury", "inches_of_mercury", "degrees_celsius", "degrees_kelvin", "degrees_fahrenheit", "degrees_kelvin_per_hour", "degrees_kelvin_per_minute", "degrees_celsius_per_hour", "degrees_celsius_per_minute", "degrees_fahrenheit_per_hour", "degrees_fahrenheit_per_minute", "degree_days_celsius", "degree_days_fahrenheit", "delta_degrees_kelvin", "delta_degrees_fahrenheit", "no_units", "ticks", "counts", "bytes", "kilo_bytes", "mega_bytes", "giga_bytes", "tera_bytes", "degrees_angular", "radians", "degrees_angular_per_second", "radians_per_second", "mole_percent", "percent", "per_mille", "percent_per_second", "percent_obscuration_per_meter", "percent_obscuration_per_foot", "parts_per_million", "parts_per_billion", "revolutions_per_minute", "joule_seconds", "newton_seconds", "newtons_per_meter", "pascal_seconds", "psi_per_degree_fahrenheit", "kilograms_per_cubic_meter", "kilometers_per_liter", "miles_per_us_gallon", "kilowatts_per_ton", "kilowatt_hours_per_square_meter", "kilowatt_hours_per_square_foot", "watt_hours_per_cubic_meter", "joules_per_cubic_meter", "megajoules_per_square_meter", "megajoules_per_square_foot", "square_meters_per_newton", "watts_per_meter_per_degree_kelvin", "watts_per_square_meter_degree_kelvin", "grams_per_gram", "kilograms_per_kilogram", "grams_per_kilogram", "milligrams_per_gram", "milligrams_per_kilogram", "grams_per_milliliter", "grams_per_liter", "grams_per_square_meter", "milligrams_per_liter", "micrograms_per_liter", "grams_per_cubic_meter", "milligrams_per_cubic_meter", "micrograms_per_cubic_meter", "nanograms_per_cubic_meter", "grams_per_cubic_centimeter", "becquerels", "kilobecquerels", "megabecquerels", "gray", "milligray", "microgray", "sieverts", "millisieverts", "microsieverts", "microsieverts_per_hour", "millirems", "millirems_per_hour", "decibels_a", "nephelometric_turbidity_unit", "pH", "minutes_per_degree_kelvin"]
        if unit is not None and unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def kind_id(self):
        """
        Gets the kind_id of this PointClass.

        :return: The kind_id of this PointClass.
        :rtype: int
        """
        return self._kind_id

    @kind_id.setter
    def kind_id(self, kind_id):
        """
        Sets the kind_id of this PointClass.

        :param kind_id: The kind_id of this PointClass.
        :type: int
        """

        self._kind_id = kind_id

    @property
    def kind_description(self):
        """
        Gets the kind_description of this PointClass.

        :return: The kind_description of this PointClass.
        :rtype: str
        """
        return self._kind_description

    @kind_description.setter
    def kind_description(self, kind_description):
        """
        Sets the kind_description of this PointClass.

        :param kind_description: The kind_description of this PointClass.
        :type: str
        """

        self._kind_description = kind_description

    @property
    def hints(self):
        """
        Gets the hints of this PointClass.

        :return: The hints of this PointClass.
        :rtype: str
        """
        return self._hints

    @hints.setter
    def hints(self, hints):
        """
        Sets the hints of this PointClass.

        :param hints: The hints of this PointClass.
        :type: str
        """

        self._hints = hints

    @property
    def alias_point_class_id(self):
        """
        Gets the alias_point_class_id of this PointClass.

        :return: The alias_point_class_id of this PointClass.
        :rtype: str
        """
        return self._alias_point_class_id

    @alias_point_class_id.setter
    def alias_point_class_id(self, alias_point_class_id):
        """
        Sets the alias_point_class_id of this PointClass.

        :param alias_point_class_id: The alias_point_class_id of this PointClass.
        :type: str
        """

        self._alias_point_class_id = alias_point_class_id

    @property
    def azure_digital_twin(self):
        """
        Gets the azure_digital_twin of this PointClass.

        :return: The azure_digital_twin of this PointClass.
        :rtype: str
        """
        return self._azure_digital_twin

    @azure_digital_twin.setter
    def azure_digital_twin(self, azure_digital_twin):
        """
        Sets the azure_digital_twin of this PointClass.

        :param azure_digital_twin: The azure_digital_twin of this PointClass.
        :type: str
        """

        self._azure_digital_twin = azure_digital_twin

    @property
    def well_known(self):
        """
        Gets the well_known of this PointClass.

        :return: The well_known of this PointClass.
        :rtype: str
        """
        return self._well_known

    @well_known.setter
    def well_known(self, well_known):
        """
        Sets the well_known of this PointClass.

        :param well_known: The well_known of this PointClass.
        :type: str
        """
        allowed_values = ["None", "Log", "Ignored", "LocationLongitude", "LocationLatitude", "LocationSpeed", "LocationAltitude", "LocationHeading", "AccelerationX", "AccelerationY", "AccelerationZ", "Acceleration", "VelocityX", "VelocityY", "VelocityZ", "Velocity", "ArrayVoltage", "ArrayCurrent", "ArrayPower", "BatteryVoltage", "BatteryCurrent", "BatteryPower", "BatteryStateOfCharge", "BatteryTemperature", "ExternalVoltage1", "ExternalVoltage2", "LoadVoltage", "LoadCurrent", "LoadPower", "LoadVoltAmpere", "LoadPowerReactive", "LoadPowerFactor", "LoadEnergy", "LoadEnergyReactive", "ChargingStatus", "TotalCharge", "TotalDischarge", "HeatsinkTemperature", "FaultCode", "FaultCodeCharging", "FaultCodeDischarging", "CounterResettable", "CounterNonResettable", "CommandOpen", "CommandClose", "CommandLift", "CommandLower", "CommandTiltUp", "CommandTiltDown", "CommandSlideIn", "CommandSlideOut", "DigitalOutput", "DigitalInput", "MotorSolenoid", "HvacTemperature", "HvacSetTemperature", "HvacCompressorSpeed", "HvacOperatingMode", "HvacStateOfCharge", "HvacStateOfHealth", "NoIdleState", "NoIdleSupplyVoltage", "NoIdleOemVoltage", "NoIdleParkNeutralVoltage", "NoIdleParkingBrakeVoltage", "NoIdleShorelineDetectionVoltage", "NoIdleEmergencyLightsVoltage", "NoIdleDischargeCurrent", "NoIdleAlternatorCurrent", "NoIdleRelays", "NoIdleIgnitionSignal", "NoIdleParkSignal", "NoIdleParkingBrakeSignal", "NoIdleHoodClosedSignal", "NoIdleEmergencyLightsSignal", "NoIdleTemperature", "NoIdleMinTemperature", "NoIdleMaxTemperature", "NoIdleKeyInserted", "NoIdleEngineRunning", "NoIdleMaxDischargeTime", "NoIdleCutoffVoltage", "NoIdleEngineStartCounter", "NoIdleEngineStopCounter", "NoIdleEmergencyLight", "NoIdleChargeEnable", "NoIdleDischargeEnable", "NoIdleRampDoorOpen", "NoIdleACRequest", "ObdiiFaultCodes", "ObdiiTimeRunWithMalfunction", "ObdiiDistanceTraveledWithMalfunction", "ObdiiEngineRPM", "ObdiiCalculatedEngineLoad", "ObdiiEngineCoolantTemperature", "ObdiiEngineOilTemperature", "ObdiiVehicleSpeed", "ObdiiVin", "ObdiiSupportedPIDs", "ObdiiOdometer", "ObdiiEngineRuntime", "ObdiiEngineRuntimeTotal", "SensorTemperature", "SensorPressure", "SensorRSSI", "SensorSignalQuality", "SensorBitErrorRate", "SensorEvent", "SensorExtraTemperature1", "SensorExtraTemperature2", "SensorFlood", "SensorAxisX", "SensorAxisY", "SensorAxisZ", "SensorAxisPitch", "SensorAxisYaw", "SensorAxisRoll", "SensorLevel", "SensorNoise", "SensorAcidity", "SensorFrequency", "SensorFlow", "SensorStatus", "SensorHumidity", "SensorVoltage", "SensorCurrent", "SensorParticleMonitor", "TrackerTrips", "TrackerInTrip", "TrackerTamperAlert", "TrackerRecoveryModeActive", "HolykellLevel", "HolykellTemperature", "SurvalentAnalog", "SurvalentStatus", "SurvalentText"]
        if well_known is not None and well_known not in allowed_values:
            raise ValueError(
                "Invalid value for `well_known` ({0}), must be one of {1}"
                .format(well_known, allowed_values)
            )

        self._well_known = well_known

    @property
    def tags(self):
        """
        Gets the tags of this PointClass.

        :return: The tags of this PointClass.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this PointClass.

        :param tags: The tags of this PointClass.
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PointClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

