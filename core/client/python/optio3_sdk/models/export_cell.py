# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class ExportCell(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, text=None, date_time=None, decimal=None):
        """
        ExportCell - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'text': 'str',
            'date_time': 'datetime',
            'decimal': 'float'
        }

        self.attribute_map = {
            'text': 'text',
            'date_time': 'dateTime',
            'decimal': 'decimal'
        }

        self._text = text
        self._date_time = date_time
        self._decimal = decimal


    @property
    def text(self):
        """
        Gets the text of this ExportCell.

        :return: The text of this ExportCell.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this ExportCell.

        :param text: The text of this ExportCell.
        :type: str
        """

        self._text = text

    @property
    def date_time(self):
        """
        Gets the date_time of this ExportCell.

        :return: The date_time of this ExportCell.
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """
        Sets the date_time of this ExportCell.

        :param date_time: The date_time of this ExportCell.
        :type: datetime
        """

        self._date_time = date_time

    @property
    def decimal(self):
        """
        Gets the decimal of this ExportCell.

        :return: The decimal of this ExportCell.
        :rtype: float
        """
        return self._decimal

    @decimal.setter
    def decimal(self, decimal):
        """
        Sets the decimal of this ExportCell.

        :param decimal: The decimal of this ExportCell.
        :type: float
        """

        self._decimal = decimal

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExportCell):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
