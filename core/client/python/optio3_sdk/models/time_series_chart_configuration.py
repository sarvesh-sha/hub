# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class TimeSeriesChartConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, version=None, type=None, display=None, panels=None, tooltip=None, annotations=None, hierarchy=None, graph=None, data_sources=None, scatter_plot=None, palette=None):
        """
        TimeSeriesChartConfiguration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'version': 'int',
            'type': 'str',
            'display': 'TimeSeriesDisplayConfiguration',
            'panels': 'list[TimeSeriesPanelConfiguration]',
            'tooltip': 'TimeSeriesTooltipConfiguration',
            'annotations': 'list[TimeSeriesAnnotationConfiguration]',
            'hierarchy': 'HierarchicalVisualization',
            'graph': 'TimeSeriesGraphConfiguration',
            'data_sources': 'list[TimeSeriesSourceConfiguration]',
            'scatter_plot': 'ScatterPlot',
            'palette': 'str',
            'discriminator___type': 'str'
        }

        self.attribute_map = {
            'version': 'version',
            'type': 'type',
            'display': 'display',
            'panels': 'panels',
            'tooltip': 'tooltip',
            'annotations': 'annotations',
            'hierarchy': 'hierarchy',
            'graph': 'graph',
            'data_sources': 'dataSources',
            'scatter_plot': 'scatterPlot',
            'palette': 'palette',
            'discriminator___type': '__type'
        }

        self._version = version
        self._type = type
        self._display = display
        self._panels = panels
        self._tooltip = tooltip
        self._annotations = annotations
        self._hierarchy = hierarchy
        self._graph = graph
        self._data_sources = data_sources
        self._scatter_plot = scatter_plot
        self._palette = palette

    @property
    def discriminator___type(self):
        return "TimeSeriesChartConfiguration"

    @discriminator___type.setter
    def discriminator___type(self, discriminator):
        # Don't need to do anything
        return

    @property
    def version(self):
        """
        Gets the version of this TimeSeriesChartConfiguration.

        :return: The version of this TimeSeriesChartConfiguration.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this TimeSeriesChartConfiguration.

        :param version: The version of this TimeSeriesChartConfiguration.
        :type: int
        """

        self._version = version

    @property
    def type(self):
        """
        Gets the type of this TimeSeriesChartConfiguration.

        :return: The type of this TimeSeriesChartConfiguration.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this TimeSeriesChartConfiguration.

        :param type: The type of this TimeSeriesChartConfiguration.
        :type: str
        """
        allowed_values = ["STANDARD", "HIERARCHICAL", "COORDINATE", "GRAPH", "SCATTER", "GRAPH_SCATTER"]
        if type is not None and type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def display(self):
        """
        Gets the display of this TimeSeriesChartConfiguration.

        :return: The display of this TimeSeriesChartConfiguration.
        :rtype: TimeSeriesDisplayConfiguration
        """
        return self._display

    @display.setter
    def display(self, display):
        """
        Sets the display of this TimeSeriesChartConfiguration.

        :param display: The display of this TimeSeriesChartConfiguration.
        :type: TimeSeriesDisplayConfiguration
        """

        self._display = display

    @property
    def panels(self):
        """
        Gets the panels of this TimeSeriesChartConfiguration.

        :return: The panels of this TimeSeriesChartConfiguration.
        :rtype: list[TimeSeriesPanelConfiguration]
        """
        return self._panels

    @panels.setter
    def panels(self, panels):
        """
        Sets the panels of this TimeSeriesChartConfiguration.

        :param panels: The panels of this TimeSeriesChartConfiguration.
        :type: list[TimeSeriesPanelConfiguration]
        """

        self._panels = panels

    @property
    def tooltip(self):
        """
        Gets the tooltip of this TimeSeriesChartConfiguration.

        :return: The tooltip of this TimeSeriesChartConfiguration.
        :rtype: TimeSeriesTooltipConfiguration
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """
        Sets the tooltip of this TimeSeriesChartConfiguration.

        :param tooltip: The tooltip of this TimeSeriesChartConfiguration.
        :type: TimeSeriesTooltipConfiguration
        """

        self._tooltip = tooltip

    @property
    def annotations(self):
        """
        Gets the annotations of this TimeSeriesChartConfiguration.

        :return: The annotations of this TimeSeriesChartConfiguration.
        :rtype: list[TimeSeriesAnnotationConfiguration]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """
        Sets the annotations of this TimeSeriesChartConfiguration.

        :param annotations: The annotations of this TimeSeriesChartConfiguration.
        :type: list[TimeSeriesAnnotationConfiguration]
        """

        self._annotations = annotations

    @property
    def hierarchy(self):
        """
        Gets the hierarchy of this TimeSeriesChartConfiguration.

        :return: The hierarchy of this TimeSeriesChartConfiguration.
        :rtype: HierarchicalVisualization
        """
        return self._hierarchy

    @hierarchy.setter
    def hierarchy(self, hierarchy):
        """
        Sets the hierarchy of this TimeSeriesChartConfiguration.

        :param hierarchy: The hierarchy of this TimeSeriesChartConfiguration.
        :type: HierarchicalVisualization
        """

        self._hierarchy = hierarchy

    @property
    def graph(self):
        """
        Gets the graph of this TimeSeriesChartConfiguration.

        :return: The graph of this TimeSeriesChartConfiguration.
        :rtype: TimeSeriesGraphConfiguration
        """
        return self._graph

    @graph.setter
    def graph(self, graph):
        """
        Sets the graph of this TimeSeriesChartConfiguration.

        :param graph: The graph of this TimeSeriesChartConfiguration.
        :type: TimeSeriesGraphConfiguration
        """

        self._graph = graph

    @property
    def data_sources(self):
        """
        Gets the data_sources of this TimeSeriesChartConfiguration.

        :return: The data_sources of this TimeSeriesChartConfiguration.
        :rtype: list[TimeSeriesSourceConfiguration]
        """
        return self._data_sources

    @data_sources.setter
    def data_sources(self, data_sources):
        """
        Sets the data_sources of this TimeSeriesChartConfiguration.

        :param data_sources: The data_sources of this TimeSeriesChartConfiguration.
        :type: list[TimeSeriesSourceConfiguration]
        """

        self._data_sources = data_sources

    @property
    def scatter_plot(self):
        """
        Gets the scatter_plot of this TimeSeriesChartConfiguration.

        :return: The scatter_plot of this TimeSeriesChartConfiguration.
        :rtype: ScatterPlot
        """
        return self._scatter_plot

    @scatter_plot.setter
    def scatter_plot(self, scatter_plot):
        """
        Sets the scatter_plot of this TimeSeriesChartConfiguration.

        :param scatter_plot: The scatter_plot of this TimeSeriesChartConfiguration.
        :type: ScatterPlot
        """

        self._scatter_plot = scatter_plot

    @property
    def palette(self):
        """
        Gets the palette of this TimeSeriesChartConfiguration.

        :return: The palette of this TimeSeriesChartConfiguration.
        :rtype: str
        """
        return self._palette

    @palette.setter
    def palette(self, palette):
        """
        Sets the palette of this TimeSeriesChartConfiguration.

        :param palette: The palette of this TimeSeriesChartConfiguration.
        :type: str
        """

        self._palette = palette

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TimeSeriesChartConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

