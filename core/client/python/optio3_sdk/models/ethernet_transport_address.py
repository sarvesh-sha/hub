# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class EthernetTransportAddress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, d1=None, d2=None, d3=None, d4=None, d5=None, d6=None):
        """
        EthernetTransportAddress - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'd1': 'int',
            'd2': 'int',
            'd3': 'int',
            'd4': 'int',
            'd5': 'int',
            'd6': 'int',
            'discriminator___type': 'str'
        }

        self.attribute_map = {
            'd1': 'd1',
            'd2': 'd2',
            'd3': 'd3',
            'd4': 'd4',
            'd5': 'd5',
            'd6': 'd6',
            'discriminator___type': '__type'
        }

        self._d1 = d1
        self._d2 = d2
        self._d3 = d3
        self._d4 = d4
        self._d5 = d5
        self._d6 = d6

    @property
    def discriminator___type(self):
        return "EthernetTransportAddress"

    @discriminator___type.setter
    def discriminator___type(self, discriminator):
        # Don't need to do anything
        return

    @property
    def d1(self):
        """
        Gets the d1 of this EthernetTransportAddress.

        :return: The d1 of this EthernetTransportAddress.
        :rtype: int
        """
        return self._d1

    @d1.setter
    def d1(self, d1):
        """
        Sets the d1 of this EthernetTransportAddress.

        :param d1: The d1 of this EthernetTransportAddress.
        :type: int
        """

        self._d1 = d1

    @property
    def d2(self):
        """
        Gets the d2 of this EthernetTransportAddress.

        :return: The d2 of this EthernetTransportAddress.
        :rtype: int
        """
        return self._d2

    @d2.setter
    def d2(self, d2):
        """
        Sets the d2 of this EthernetTransportAddress.

        :param d2: The d2 of this EthernetTransportAddress.
        :type: int
        """

        self._d2 = d2

    @property
    def d3(self):
        """
        Gets the d3 of this EthernetTransportAddress.

        :return: The d3 of this EthernetTransportAddress.
        :rtype: int
        """
        return self._d3

    @d3.setter
    def d3(self, d3):
        """
        Sets the d3 of this EthernetTransportAddress.

        :param d3: The d3 of this EthernetTransportAddress.
        :type: int
        """

        self._d3 = d3

    @property
    def d4(self):
        """
        Gets the d4 of this EthernetTransportAddress.

        :return: The d4 of this EthernetTransportAddress.
        :rtype: int
        """
        return self._d4

    @d4.setter
    def d4(self, d4):
        """
        Sets the d4 of this EthernetTransportAddress.

        :param d4: The d4 of this EthernetTransportAddress.
        :type: int
        """

        self._d4 = d4

    @property
    def d5(self):
        """
        Gets the d5 of this EthernetTransportAddress.

        :return: The d5 of this EthernetTransportAddress.
        :rtype: int
        """
        return self._d5

    @d5.setter
    def d5(self, d5):
        """
        Sets the d5 of this EthernetTransportAddress.

        :param d5: The d5 of this EthernetTransportAddress.
        :type: int
        """

        self._d5 = d5

    @property
    def d6(self):
        """
        Gets the d6 of this EthernetTransportAddress.

        :return: The d6 of this EthernetTransportAddress.
        :rtype: int
        """
        return self._d6

    @d6.setter
    def d6(self, d6):
        """
        Sets the d6 of this EthernetTransportAddress.

        :param d6: The d6 of this EthernetTransportAddress.
        :type: int
        """

        self._d6 = d6

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EthernetTransportAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
