# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class AlertDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sys_id=None, created_on=None, updated_on=None, title=None, description=None, active=None, purpose=None, last_output=None, last_offset=None, head_version=None, release_version=None, versions=None):
        """
        AlertDefinition - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_id': 'str',
            'created_on': 'datetime',
            'updated_on': 'datetime',
            'title': 'str',
            'description': 'str',
            'active': 'bool',
            'purpose': 'str',
            'last_output': 'datetime',
            'last_offset': 'int',
            'head_version': 'RecordIdentity',
            'release_version': 'RecordIdentity',
            'versions': 'list[RecordIdentity]'
        }

        self.attribute_map = {
            'sys_id': 'sysId',
            'created_on': 'createdOn',
            'updated_on': 'updatedOn',
            'title': 'title',
            'description': 'description',
            'active': 'active',
            'purpose': 'purpose',
            'last_output': 'lastOutput',
            'last_offset': 'lastOffset',
            'head_version': 'headVersion',
            'release_version': 'releaseVersion',
            'versions': 'versions'
        }

        self._sys_id = sys_id
        self._created_on = created_on
        self._updated_on = updated_on
        self._title = title
        self._description = description
        self._active = active
        self._purpose = purpose
        self._last_output = last_output
        self._last_offset = last_offset
        self._head_version = head_version
        self._release_version = release_version
        self._versions = versions


    @property
    def sys_id(self):
        """
        Gets the sys_id of this AlertDefinition.

        :return: The sys_id of this AlertDefinition.
        :rtype: str
        """
        return self._sys_id

    @sys_id.setter
    def sys_id(self, sys_id):
        """
        Sets the sys_id of this AlertDefinition.

        :param sys_id: The sys_id of this AlertDefinition.
        :type: str
        """

        self._sys_id = sys_id

    @property
    def created_on(self):
        """
        Gets the created_on of this AlertDefinition.

        :return: The created_on of this AlertDefinition.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this AlertDefinition.

        :param created_on: The created_on of this AlertDefinition.
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_on(self):
        """
        Gets the updated_on of this AlertDefinition.

        :return: The updated_on of this AlertDefinition.
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this AlertDefinition.

        :param updated_on: The updated_on of this AlertDefinition.
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def title(self):
        """
        Gets the title of this AlertDefinition.

        :return: The title of this AlertDefinition.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this AlertDefinition.

        :param title: The title of this AlertDefinition.
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """
        Gets the description of this AlertDefinition.

        :return: The description of this AlertDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AlertDefinition.

        :param description: The description of this AlertDefinition.
        :type: str
        """

        self._description = description

    @property
    def active(self):
        """
        Gets the active of this AlertDefinition.

        :return: The active of this AlertDefinition.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this AlertDefinition.

        :param active: The active of this AlertDefinition.
        :type: bool
        """

        self._active = active

    @property
    def purpose(self):
        """
        Gets the purpose of this AlertDefinition.

        :return: The purpose of this AlertDefinition.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """
        Sets the purpose of this AlertDefinition.

        :param purpose: The purpose of this AlertDefinition.
        :type: str
        """
        allowed_values = ["Definition", "Library"]
        if purpose is not None and purpose not in allowed_values:
            raise ValueError(
                "Invalid value for `purpose` ({0}), must be one of {1}"
                .format(purpose, allowed_values)
            )

        self._purpose = purpose

    @property
    def last_output(self):
        """
        Gets the last_output of this AlertDefinition.

        :return: The last_output of this AlertDefinition.
        :rtype: datetime
        """
        return self._last_output

    @last_output.setter
    def last_output(self, last_output):
        """
        Sets the last_output of this AlertDefinition.

        :param last_output: The last_output of this AlertDefinition.
        :type: datetime
        """

        self._last_output = last_output

    @property
    def last_offset(self):
        """
        Gets the last_offset of this AlertDefinition.

        :return: The last_offset of this AlertDefinition.
        :rtype: int
        """
        return self._last_offset

    @last_offset.setter
    def last_offset(self, last_offset):
        """
        Sets the last_offset of this AlertDefinition.

        :param last_offset: The last_offset of this AlertDefinition.
        :type: int
        """

        self._last_offset = last_offset

    @property
    def head_version(self):
        """
        Gets the head_version of this AlertDefinition.

        :return: The head_version of this AlertDefinition.
        :rtype: RecordIdentity
        """
        return self._head_version

    @head_version.setter
    def head_version(self, head_version):
        """
        Sets the head_version of this AlertDefinition.

        :param head_version: The head_version of this AlertDefinition.
        :type: RecordIdentity
        """

        self._head_version = head_version

    @property
    def release_version(self):
        """
        Gets the release_version of this AlertDefinition.

        :return: The release_version of this AlertDefinition.
        :rtype: RecordIdentity
        """
        return self._release_version

    @release_version.setter
    def release_version(self, release_version):
        """
        Sets the release_version of this AlertDefinition.

        :param release_version: The release_version of this AlertDefinition.
        :type: RecordIdentity
        """

        self._release_version = release_version

    @property
    def versions(self):
        """
        Gets the versions of this AlertDefinition.

        :return: The versions of this AlertDefinition.
        :rtype: list[RecordIdentity]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """
        Sets the versions of this AlertDefinition.

        :param versions: The versions of this AlertDefinition.
        :type: list[RecordIdentity]
        """

        self._versions = versions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AlertDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

