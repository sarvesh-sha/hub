# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class EquipmentAggregation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, equipments=None, controllers=None, location_hierarchy=None, point_classes=None, equipment_classes=None, location_classes=None):
        """
        EquipmentAggregation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'equipments': 'list[EquipmentHierarchy]',
            'controllers': 'list[str]',
            'location_hierarchy': 'list[LocationHierarchy]',
            'point_classes': 'list[PointClass]',
            'equipment_classes': 'list[EquipmentClass]',
            'location_classes': 'list[LocationClass]'
        }

        self.attribute_map = {
            'equipments': 'equipments',
            'controllers': 'controllers',
            'location_hierarchy': 'locationHierarchy',
            'point_classes': 'pointClasses',
            'equipment_classes': 'equipmentClasses',
            'location_classes': 'locationClasses'
        }

        self._equipments = equipments
        self._controllers = controllers
        self._location_hierarchy = location_hierarchy
        self._point_classes = point_classes
        self._equipment_classes = equipment_classes
        self._location_classes = location_classes


    @property
    def equipments(self):
        """
        Gets the equipments of this EquipmentAggregation.

        :return: The equipments of this EquipmentAggregation.
        :rtype: list[EquipmentHierarchy]
        """
        return self._equipments

    @equipments.setter
    def equipments(self, equipments):
        """
        Sets the equipments of this EquipmentAggregation.

        :param equipments: The equipments of this EquipmentAggregation.
        :type: list[EquipmentHierarchy]
        """

        self._equipments = equipments

    @property
    def controllers(self):
        """
        Gets the controllers of this EquipmentAggregation.

        :return: The controllers of this EquipmentAggregation.
        :rtype: list[str]
        """
        return self._controllers

    @controllers.setter
    def controllers(self, controllers):
        """
        Sets the controllers of this EquipmentAggregation.

        :param controllers: The controllers of this EquipmentAggregation.
        :type: list[str]
        """

        self._controllers = controllers

    @property
    def location_hierarchy(self):
        """
        Gets the location_hierarchy of this EquipmentAggregation.

        :return: The location_hierarchy of this EquipmentAggregation.
        :rtype: list[LocationHierarchy]
        """
        return self._location_hierarchy

    @location_hierarchy.setter
    def location_hierarchy(self, location_hierarchy):
        """
        Sets the location_hierarchy of this EquipmentAggregation.

        :param location_hierarchy: The location_hierarchy of this EquipmentAggregation.
        :type: list[LocationHierarchy]
        """

        self._location_hierarchy = location_hierarchy

    @property
    def point_classes(self):
        """
        Gets the point_classes of this EquipmentAggregation.

        :return: The point_classes of this EquipmentAggregation.
        :rtype: list[PointClass]
        """
        return self._point_classes

    @point_classes.setter
    def point_classes(self, point_classes):
        """
        Sets the point_classes of this EquipmentAggregation.

        :param point_classes: The point_classes of this EquipmentAggregation.
        :type: list[PointClass]
        """

        self._point_classes = point_classes

    @property
    def equipment_classes(self):
        """
        Gets the equipment_classes of this EquipmentAggregation.

        :return: The equipment_classes of this EquipmentAggregation.
        :rtype: list[EquipmentClass]
        """
        return self._equipment_classes

    @equipment_classes.setter
    def equipment_classes(self, equipment_classes):
        """
        Sets the equipment_classes of this EquipmentAggregation.

        :param equipment_classes: The equipment_classes of this EquipmentAggregation.
        :type: list[EquipmentClass]
        """

        self._equipment_classes = equipment_classes

    @property
    def location_classes(self):
        """
        Gets the location_classes of this EquipmentAggregation.

        :return: The location_classes of this EquipmentAggregation.
        :rtype: list[LocationClass]
        """
        return self._location_classes

    @location_classes.setter
    def location_classes(self, location_classes):
        """
        Sets the location_classes of this EquipmentAggregation.

        :param location_classes: The location_classes of this EquipmentAggregation.
        :type: list[LocationClass]
        """

        self._location_classes = location_classes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EquipmentAggregation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
