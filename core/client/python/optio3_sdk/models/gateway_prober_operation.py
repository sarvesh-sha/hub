# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class GatewayProberOperation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sys_id=None, created_on=None, updated_on=None, last_heartbeat=None, gateway=None, input_details=None, output_details=None, last_output=None, last_offset=None, current_activity=None):
        """
        GatewayProberOperation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_id': 'str',
            'created_on': 'datetime',
            'updated_on': 'datetime',
            'last_heartbeat': 'datetime',
            'gateway': 'RecordIdentity',
            'input_details': 'ProberOperation',
            'output_details': 'ProberOperationBaseResults',
            'last_output': 'datetime',
            'last_offset': 'int',
            'current_activity': 'RecordIdentity'
        }

        self.attribute_map = {
            'sys_id': 'sysId',
            'created_on': 'createdOn',
            'updated_on': 'updatedOn',
            'last_heartbeat': 'lastHeartbeat',
            'gateway': 'gateway',
            'input_details': 'inputDetails',
            'output_details': 'outputDetails',
            'last_output': 'lastOutput',
            'last_offset': 'lastOffset',
            'current_activity': 'currentActivity'
        }

        self._sys_id = sys_id
        self._created_on = created_on
        self._updated_on = updated_on
        self._last_heartbeat = last_heartbeat
        self._gateway = gateway
        self._input_details = input_details
        self._output_details = output_details
        self._last_output = last_output
        self._last_offset = last_offset
        self._current_activity = current_activity


    @property
    def sys_id(self):
        """
        Gets the sys_id of this GatewayProberOperation.

        :return: The sys_id of this GatewayProberOperation.
        :rtype: str
        """
        return self._sys_id

    @sys_id.setter
    def sys_id(self, sys_id):
        """
        Sets the sys_id of this GatewayProberOperation.

        :param sys_id: The sys_id of this GatewayProberOperation.
        :type: str
        """

        self._sys_id = sys_id

    @property
    def created_on(self):
        """
        Gets the created_on of this GatewayProberOperation.

        :return: The created_on of this GatewayProberOperation.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this GatewayProberOperation.

        :param created_on: The created_on of this GatewayProberOperation.
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_on(self):
        """
        Gets the updated_on of this GatewayProberOperation.

        :return: The updated_on of this GatewayProberOperation.
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this GatewayProberOperation.

        :param updated_on: The updated_on of this GatewayProberOperation.
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def last_heartbeat(self):
        """
        Gets the last_heartbeat of this GatewayProberOperation.

        :return: The last_heartbeat of this GatewayProberOperation.
        :rtype: datetime
        """
        return self._last_heartbeat

    @last_heartbeat.setter
    def last_heartbeat(self, last_heartbeat):
        """
        Sets the last_heartbeat of this GatewayProberOperation.

        :param last_heartbeat: The last_heartbeat of this GatewayProberOperation.
        :type: datetime
        """

        self._last_heartbeat = last_heartbeat

    @property
    def gateway(self):
        """
        Gets the gateway of this GatewayProberOperation.

        :return: The gateway of this GatewayProberOperation.
        :rtype: RecordIdentity
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """
        Sets the gateway of this GatewayProberOperation.

        :param gateway: The gateway of this GatewayProberOperation.
        :type: RecordIdentity
        """

        self._gateway = gateway

    @property
    def input_details(self):
        """
        Gets the input_details of this GatewayProberOperation.

        :return: The input_details of this GatewayProberOperation.
        :rtype: ProberOperation
        """
        return self._input_details

    @input_details.setter
    def input_details(self, input_details):
        """
        Sets the input_details of this GatewayProberOperation.

        :param input_details: The input_details of this GatewayProberOperation.
        :type: ProberOperation
        """

        self._input_details = input_details

    @property
    def output_details(self):
        """
        Gets the output_details of this GatewayProberOperation.

        :return: The output_details of this GatewayProberOperation.
        :rtype: ProberOperationBaseResults
        """
        return self._output_details

    @output_details.setter
    def output_details(self, output_details):
        """
        Sets the output_details of this GatewayProberOperation.

        :param output_details: The output_details of this GatewayProberOperation.
        :type: ProberOperationBaseResults
        """

        self._output_details = output_details

    @property
    def last_output(self):
        """
        Gets the last_output of this GatewayProberOperation.

        :return: The last_output of this GatewayProberOperation.
        :rtype: datetime
        """
        return self._last_output

    @last_output.setter
    def last_output(self, last_output):
        """
        Sets the last_output of this GatewayProberOperation.

        :param last_output: The last_output of this GatewayProberOperation.
        :type: datetime
        """

        self._last_output = last_output

    @property
    def last_offset(self):
        """
        Gets the last_offset of this GatewayProberOperation.

        :return: The last_offset of this GatewayProberOperation.
        :rtype: int
        """
        return self._last_offset

    @last_offset.setter
    def last_offset(self, last_offset):
        """
        Sets the last_offset of this GatewayProberOperation.

        :param last_offset: The last_offset of this GatewayProberOperation.
        :type: int
        """

        self._last_offset = last_offset

    @property
    def current_activity(self):
        """
        Gets the current_activity of this GatewayProberOperation.

        :return: The current_activity of this GatewayProberOperation.
        :rtype: RecordIdentity
        """
        return self._current_activity

    @current_activity.setter
    def current_activity(self, current_activity):
        """
        Sets the current_activity of this GatewayProberOperation.

        :param current_activity: The current_activity of this GatewayProberOperation.
        :type: RecordIdentity
        """

        self._current_activity = current_activity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GatewayProberOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
