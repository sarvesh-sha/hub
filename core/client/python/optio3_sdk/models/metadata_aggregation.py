# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class MetadataAggregation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, building_equipments=None, equipment_names=None, equipment_class_ids=None, controller_names=None):
        """
        MetadataAggregation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'building_equipments': 'dict(str, list[str])',
            'equipment_names': 'dict(str, str)',
            'equipment_class_ids': 'dict(str, str)',
            'controller_names': 'dict(str, str)'
        }

        self.attribute_map = {
            'building_equipments': 'buildingEquipments',
            'equipment_names': 'equipmentNames',
            'equipment_class_ids': 'equipmentClassIds',
            'controller_names': 'controllerNames'
        }

        self._building_equipments = building_equipments
        self._equipment_names = equipment_names
        self._equipment_class_ids = equipment_class_ids
        self._controller_names = controller_names


    @property
    def building_equipments(self):
        """
        Gets the building_equipments of this MetadataAggregation.

        :return: The building_equipments of this MetadataAggregation.
        :rtype: dict(str, list[str])
        """
        return self._building_equipments

    @building_equipments.setter
    def building_equipments(self, building_equipments):
        """
        Sets the building_equipments of this MetadataAggregation.

        :param building_equipments: The building_equipments of this MetadataAggregation.
        :type: dict(str, list[str])
        """

        self._building_equipments = building_equipments

    @property
    def equipment_names(self):
        """
        Gets the equipment_names of this MetadataAggregation.

        :return: The equipment_names of this MetadataAggregation.
        :rtype: dict(str, str)
        """
        return self._equipment_names

    @equipment_names.setter
    def equipment_names(self, equipment_names):
        """
        Sets the equipment_names of this MetadataAggregation.

        :param equipment_names: The equipment_names of this MetadataAggregation.
        :type: dict(str, str)
        """

        self._equipment_names = equipment_names

    @property
    def equipment_class_ids(self):
        """
        Gets the equipment_class_ids of this MetadataAggregation.

        :return: The equipment_class_ids of this MetadataAggregation.
        :rtype: dict(str, str)
        """
        return self._equipment_class_ids

    @equipment_class_ids.setter
    def equipment_class_ids(self, equipment_class_ids):
        """
        Sets the equipment_class_ids of this MetadataAggregation.

        :param equipment_class_ids: The equipment_class_ids of this MetadataAggregation.
        :type: dict(str, str)
        """

        self._equipment_class_ids = equipment_class_ids

    @property
    def controller_names(self):
        """
        Gets the controller_names of this MetadataAggregation.

        :return: The controller_names of this MetadataAggregation.
        :rtype: dict(str, str)
        """
        return self._controller_names

    @controller_names.setter
    def controller_names(self, controller_names):
        """
        Sets the controller_names of this MetadataAggregation.

        :param controller_names: The controller_names of this MetadataAggregation.
        :type: dict(str, str)
        """

        self._controller_names = controller_names

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MetadataAggregation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
