# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class EquipmentClass(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, equip_class_name=None, description=None, azure_digital_twin=None, well_known=None, tags=None):
        """
        EquipmentClass - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'equip_class_name': 'str',
            'description': 'str',
            'azure_digital_twin': 'str',
            'well_known': 'str',
            'tags': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'equip_class_name': 'equipClassName',
            'description': 'description',
            'azure_digital_twin': 'azureDigitalTwin',
            'well_known': 'wellKnown',
            'tags': 'tags'
        }

        self._id = id
        self._equip_class_name = equip_class_name
        self._description = description
        self._azure_digital_twin = azure_digital_twin
        self._well_known = well_known
        self._tags = tags


    @property
    def id(self):
        """
        Gets the id of this EquipmentClass.

        :return: The id of this EquipmentClass.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EquipmentClass.

        :param id: The id of this EquipmentClass.
        :type: int
        """

        self._id = id

    @property
    def equip_class_name(self):
        """
        Gets the equip_class_name of this EquipmentClass.

        :return: The equip_class_name of this EquipmentClass.
        :rtype: str
        """
        return self._equip_class_name

    @equip_class_name.setter
    def equip_class_name(self, equip_class_name):
        """
        Sets the equip_class_name of this EquipmentClass.

        :param equip_class_name: The equip_class_name of this EquipmentClass.
        :type: str
        """

        self._equip_class_name = equip_class_name

    @property
    def description(self):
        """
        Gets the description of this EquipmentClass.

        :return: The description of this EquipmentClass.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this EquipmentClass.

        :param description: The description of this EquipmentClass.
        :type: str
        """

        self._description = description

    @property
    def azure_digital_twin(self):
        """
        Gets the azure_digital_twin of this EquipmentClass.

        :return: The azure_digital_twin of this EquipmentClass.
        :rtype: str
        """
        return self._azure_digital_twin

    @azure_digital_twin.setter
    def azure_digital_twin(self, azure_digital_twin):
        """
        Sets the azure_digital_twin of this EquipmentClass.

        :param azure_digital_twin: The azure_digital_twin of this EquipmentClass.
        :type: str
        """

        self._azure_digital_twin = azure_digital_twin

    @property
    def well_known(self):
        """
        Gets the well_known of this EquipmentClass.

        :return: The well_known of this EquipmentClass.
        :rtype: str
        """
        return self._well_known

    @well_known.setter
    def well_known(self, well_known):
        """
        Sets the well_known of this EquipmentClass.

        :param well_known: The well_known of this EquipmentClass.
        :type: str
        """
        allowed_values = ["None", "Deployment", "Tractor", "Trailer", "Microgrid", "Substation", "Machine", "RTU", "GPS", "ChargeController", "Liftgate", "HVAC", "OnBoardDiagnostics", "NoIdle", "Sensor", "SensorDiagnostics", "SensorAlerts", "SensorEvents", "LevelSensor", "Accelerometer", "Vibration", "SensorSecondary", "SensorTertiary", "TireSensor", "TemperatureSensor", "HumiditySensor", "VoltageSensor", "CurrentSensor", "SensorCluster", "SmartLock", "AssetTag"]
        if well_known is not None and well_known not in allowed_values:
            raise ValueError(
                "Invalid value for `well_known` ({0}), must be one of {1}"
                .format(well_known, allowed_values)
            )

        self._well_known = well_known

    @property
    def tags(self):
        """
        Gets the tags of this EquipmentClass.

        :return: The tags of this EquipmentClass.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this EquipmentClass.

        :param tags: The tags of this EquipmentClass.
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EquipmentClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

