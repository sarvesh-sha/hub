# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class GatewayDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, last_refresh=None, available_processors=None, free_memory=None, total_memory=None, max_memory=None, hardware_version=None, firmware_version=None, network_interfaces=None, queue_status=None):
        """
        GatewayDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'last_refresh': 'datetime',
            'available_processors': 'int',
            'free_memory': 'int',
            'total_memory': 'int',
            'max_memory': 'int',
            'hardware_version': 'int',
            'firmware_version': 'int',
            'network_interfaces': 'dict(str, str)',
            'queue_status': 'GatewayQueueStatus'
        }

        self.attribute_map = {
            'last_refresh': 'lastRefresh',
            'available_processors': 'availableProcessors',
            'free_memory': 'freeMemory',
            'total_memory': 'totalMemory',
            'max_memory': 'maxMemory',
            'hardware_version': 'hardwareVersion',
            'firmware_version': 'firmwareVersion',
            'network_interfaces': 'networkInterfaces',
            'queue_status': 'queueStatus'
        }

        self._last_refresh = last_refresh
        self._available_processors = available_processors
        self._free_memory = free_memory
        self._total_memory = total_memory
        self._max_memory = max_memory
        self._hardware_version = hardware_version
        self._firmware_version = firmware_version
        self._network_interfaces = network_interfaces
        self._queue_status = queue_status


    @property
    def last_refresh(self):
        """
        Gets the last_refresh of this GatewayDetails.

        :return: The last_refresh of this GatewayDetails.
        :rtype: datetime
        """
        return self._last_refresh

    @last_refresh.setter
    def last_refresh(self, last_refresh):
        """
        Sets the last_refresh of this GatewayDetails.

        :param last_refresh: The last_refresh of this GatewayDetails.
        :type: datetime
        """

        self._last_refresh = last_refresh

    @property
    def available_processors(self):
        """
        Gets the available_processors of this GatewayDetails.

        :return: The available_processors of this GatewayDetails.
        :rtype: int
        """
        return self._available_processors

    @available_processors.setter
    def available_processors(self, available_processors):
        """
        Sets the available_processors of this GatewayDetails.

        :param available_processors: The available_processors of this GatewayDetails.
        :type: int
        """

        self._available_processors = available_processors

    @property
    def free_memory(self):
        """
        Gets the free_memory of this GatewayDetails.

        :return: The free_memory of this GatewayDetails.
        :rtype: int
        """
        return self._free_memory

    @free_memory.setter
    def free_memory(self, free_memory):
        """
        Sets the free_memory of this GatewayDetails.

        :param free_memory: The free_memory of this GatewayDetails.
        :type: int
        """

        self._free_memory = free_memory

    @property
    def total_memory(self):
        """
        Gets the total_memory of this GatewayDetails.

        :return: The total_memory of this GatewayDetails.
        :rtype: int
        """
        return self._total_memory

    @total_memory.setter
    def total_memory(self, total_memory):
        """
        Sets the total_memory of this GatewayDetails.

        :param total_memory: The total_memory of this GatewayDetails.
        :type: int
        """

        self._total_memory = total_memory

    @property
    def max_memory(self):
        """
        Gets the max_memory of this GatewayDetails.

        :return: The max_memory of this GatewayDetails.
        :rtype: int
        """
        return self._max_memory

    @max_memory.setter
    def max_memory(self, max_memory):
        """
        Sets the max_memory of this GatewayDetails.

        :param max_memory: The max_memory of this GatewayDetails.
        :type: int
        """

        self._max_memory = max_memory

    @property
    def hardware_version(self):
        """
        Gets the hardware_version of this GatewayDetails.

        :return: The hardware_version of this GatewayDetails.
        :rtype: int
        """
        return self._hardware_version

    @hardware_version.setter
    def hardware_version(self, hardware_version):
        """
        Sets the hardware_version of this GatewayDetails.

        :param hardware_version: The hardware_version of this GatewayDetails.
        :type: int
        """

        self._hardware_version = hardware_version

    @property
    def firmware_version(self):
        """
        Gets the firmware_version of this GatewayDetails.

        :return: The firmware_version of this GatewayDetails.
        :rtype: int
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """
        Sets the firmware_version of this GatewayDetails.

        :param firmware_version: The firmware_version of this GatewayDetails.
        :type: int
        """

        self._firmware_version = firmware_version

    @property
    def network_interfaces(self):
        """
        Gets the network_interfaces of this GatewayDetails.

        :return: The network_interfaces of this GatewayDetails.
        :rtype: dict(str, str)
        """
        return self._network_interfaces

    @network_interfaces.setter
    def network_interfaces(self, network_interfaces):
        """
        Sets the network_interfaces of this GatewayDetails.

        :param network_interfaces: The network_interfaces of this GatewayDetails.
        :type: dict(str, str)
        """

        self._network_interfaces = network_interfaces

    @property
    def queue_status(self):
        """
        Gets the queue_status of this GatewayDetails.

        :return: The queue_status of this GatewayDetails.
        :rtype: GatewayQueueStatus
        """
        return self._queue_status

    @queue_status.setter
    def queue_status(self, queue_status):
        """
        Sets the queue_status of this GatewayDetails.

        :param queue_status: The queue_status of this GatewayDetails.
        :type: GatewayQueueStatus
        """

        self._queue_status = queue_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GatewayDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
