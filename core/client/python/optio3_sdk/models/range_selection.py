# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class RangeSelection(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, range=None, start=None, end=None, zone_created=None, zone=None):
        """
        RangeSelection - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'range': 'str',
            'start': 'datetime',
            'end': 'datetime',
            'zone_created': 'str',
            'zone': 'str'
        }

        self.attribute_map = {
            'range': 'range',
            'start': 'start',
            'end': 'end',
            'zone_created': 'zoneCreated',
            'zone': 'zone'
        }

        self._range = range
        self._start = start
        self._end = end
        self._zone_created = zone_created
        self._zone = zone


    @property
    def range(self):
        """
        Gets the range of this RangeSelection.

        :return: The range of this RangeSelection.
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """
        Sets the range of this RangeSelection.

        :param range: The range of this RangeSelection.
        :type: str
        """
        allowed_values = ["Last15Minutes", "Last30Minutes", "Last60Minutes", "Hour", "PreviousHour", "Last3Hours", "Last6Hours", "Last12Hours", "Last24Hours", "Today", "Yesterday", "Last2Days", "Last3Days", "Last7Days", "Week", "PreviousWeek", "Month", "PreviousMonth", "Last30Days", "Quarter", "PreviousQuarter", "Last3Months", "Year", "PreviousYear", "Last365Days", "All"]
        if range is not None and range not in allowed_values:
            raise ValueError(
                "Invalid value for `range` ({0}), must be one of {1}"
                .format(range, allowed_values)
            )

        self._range = range

    @property
    def start(self):
        """
        Gets the start of this RangeSelection.

        :return: The start of this RangeSelection.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this RangeSelection.

        :param start: The start of this RangeSelection.
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """
        Gets the end of this RangeSelection.

        :return: The end of this RangeSelection.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this RangeSelection.

        :param end: The end of this RangeSelection.
        :type: datetime
        """

        self._end = end

    @property
    def zone_created(self):
        """
        Gets the zone_created of this RangeSelection.

        :return: The zone_created of this RangeSelection.
        :rtype: str
        """
        return self._zone_created

    @zone_created.setter
    def zone_created(self, zone_created):
        """
        Sets the zone_created of this RangeSelection.

        :param zone_created: The zone_created of this RangeSelection.
        :type: str
        """

        self._zone_created = zone_created

    @property
    def zone(self):
        """
        Gets the zone of this RangeSelection.

        :return: The zone of this RangeSelection.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """
        Sets the zone of this RangeSelection.

        :param zone: The zone of this RangeSelection.
        :type: str
        """

        self._zone = zone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RangeSelection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

