# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class WorkflowOverrides(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, workflow_ids=None, device_names=None, device_locations=None, point_names=None, point_classes=None, point_parents=None, point_sampling_periods=None, point_sampling=None, equipment_names=None, equipment_classes=None, equipment_parents=None, equipment_locations=None, equipment_merge=None, removed_equipment=None, created_equipment=None):
        """
        WorkflowOverrides - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'workflow_ids': 'list[str]',
            'device_names': 'dict(str, str)',
            'device_locations': 'dict(str, str)',
            'point_names': 'dict(str, str)',
            'point_classes': 'dict(str, str)',
            'point_parents': 'dict(str, str)',
            'point_sampling_periods': 'dict(str, int)',
            'point_sampling': 'dict(str, bool)',
            'equipment_names': 'dict(str, str)',
            'equipment_classes': 'dict(str, str)',
            'equipment_parents': 'dict(str, str)',
            'equipment_locations': 'dict(str, str)',
            'equipment_merge': 'dict(str, str)',
            'removed_equipment': 'list[str]',
            'created_equipment': 'list[str]'
        }

        self.attribute_map = {
            'workflow_ids': 'workflowIds',
            'device_names': 'deviceNames',
            'device_locations': 'deviceLocations',
            'point_names': 'pointNames',
            'point_classes': 'pointClasses',
            'point_parents': 'pointParents',
            'point_sampling_periods': 'pointSamplingPeriods',
            'point_sampling': 'pointSampling',
            'equipment_names': 'equipmentNames',
            'equipment_classes': 'equipmentClasses',
            'equipment_parents': 'equipmentParents',
            'equipment_locations': 'equipmentLocations',
            'equipment_merge': 'equipmentMerge',
            'removed_equipment': 'removedEquipment',
            'created_equipment': 'createdEquipment'
        }

        self._workflow_ids = workflow_ids
        self._device_names = device_names
        self._device_locations = device_locations
        self._point_names = point_names
        self._point_classes = point_classes
        self._point_parents = point_parents
        self._point_sampling_periods = point_sampling_periods
        self._point_sampling = point_sampling
        self._equipment_names = equipment_names
        self._equipment_classes = equipment_classes
        self._equipment_parents = equipment_parents
        self._equipment_locations = equipment_locations
        self._equipment_merge = equipment_merge
        self._removed_equipment = removed_equipment
        self._created_equipment = created_equipment


    @property
    def workflow_ids(self):
        """
        Gets the workflow_ids of this WorkflowOverrides.

        :return: The workflow_ids of this WorkflowOverrides.
        :rtype: list[str]
        """
        return self._workflow_ids

    @workflow_ids.setter
    def workflow_ids(self, workflow_ids):
        """
        Sets the workflow_ids of this WorkflowOverrides.

        :param workflow_ids: The workflow_ids of this WorkflowOverrides.
        :type: list[str]
        """

        self._workflow_ids = workflow_ids

    @property
    def device_names(self):
        """
        Gets the device_names of this WorkflowOverrides.

        :return: The device_names of this WorkflowOverrides.
        :rtype: dict(str, str)
        """
        return self._device_names

    @device_names.setter
    def device_names(self, device_names):
        """
        Sets the device_names of this WorkflowOverrides.

        :param device_names: The device_names of this WorkflowOverrides.
        :type: dict(str, str)
        """

        self._device_names = device_names

    @property
    def device_locations(self):
        """
        Gets the device_locations of this WorkflowOverrides.

        :return: The device_locations of this WorkflowOverrides.
        :rtype: dict(str, str)
        """
        return self._device_locations

    @device_locations.setter
    def device_locations(self, device_locations):
        """
        Sets the device_locations of this WorkflowOverrides.

        :param device_locations: The device_locations of this WorkflowOverrides.
        :type: dict(str, str)
        """

        self._device_locations = device_locations

    @property
    def point_names(self):
        """
        Gets the point_names of this WorkflowOverrides.

        :return: The point_names of this WorkflowOverrides.
        :rtype: dict(str, str)
        """
        return self._point_names

    @point_names.setter
    def point_names(self, point_names):
        """
        Sets the point_names of this WorkflowOverrides.

        :param point_names: The point_names of this WorkflowOverrides.
        :type: dict(str, str)
        """

        self._point_names = point_names

    @property
    def point_classes(self):
        """
        Gets the point_classes of this WorkflowOverrides.

        :return: The point_classes of this WorkflowOverrides.
        :rtype: dict(str, str)
        """
        return self._point_classes

    @point_classes.setter
    def point_classes(self, point_classes):
        """
        Sets the point_classes of this WorkflowOverrides.

        :param point_classes: The point_classes of this WorkflowOverrides.
        :type: dict(str, str)
        """

        self._point_classes = point_classes

    @property
    def point_parents(self):
        """
        Gets the point_parents of this WorkflowOverrides.

        :return: The point_parents of this WorkflowOverrides.
        :rtype: dict(str, str)
        """
        return self._point_parents

    @point_parents.setter
    def point_parents(self, point_parents):
        """
        Sets the point_parents of this WorkflowOverrides.

        :param point_parents: The point_parents of this WorkflowOverrides.
        :type: dict(str, str)
        """

        self._point_parents = point_parents

    @property
    def point_sampling_periods(self):
        """
        Gets the point_sampling_periods of this WorkflowOverrides.

        :return: The point_sampling_periods of this WorkflowOverrides.
        :rtype: dict(str, int)
        """
        return self._point_sampling_periods

    @point_sampling_periods.setter
    def point_sampling_periods(self, point_sampling_periods):
        """
        Sets the point_sampling_periods of this WorkflowOverrides.

        :param point_sampling_periods: The point_sampling_periods of this WorkflowOverrides.
        :type: dict(str, int)
        """

        self._point_sampling_periods = point_sampling_periods

    @property
    def point_sampling(self):
        """
        Gets the point_sampling of this WorkflowOverrides.

        :return: The point_sampling of this WorkflowOverrides.
        :rtype: dict(str, bool)
        """
        return self._point_sampling

    @point_sampling.setter
    def point_sampling(self, point_sampling):
        """
        Sets the point_sampling of this WorkflowOverrides.

        :param point_sampling: The point_sampling of this WorkflowOverrides.
        :type: dict(str, bool)
        """

        self._point_sampling = point_sampling

    @property
    def equipment_names(self):
        """
        Gets the equipment_names of this WorkflowOverrides.

        :return: The equipment_names of this WorkflowOverrides.
        :rtype: dict(str, str)
        """
        return self._equipment_names

    @equipment_names.setter
    def equipment_names(self, equipment_names):
        """
        Sets the equipment_names of this WorkflowOverrides.

        :param equipment_names: The equipment_names of this WorkflowOverrides.
        :type: dict(str, str)
        """

        self._equipment_names = equipment_names

    @property
    def equipment_classes(self):
        """
        Gets the equipment_classes of this WorkflowOverrides.

        :return: The equipment_classes of this WorkflowOverrides.
        :rtype: dict(str, str)
        """
        return self._equipment_classes

    @equipment_classes.setter
    def equipment_classes(self, equipment_classes):
        """
        Sets the equipment_classes of this WorkflowOverrides.

        :param equipment_classes: The equipment_classes of this WorkflowOverrides.
        :type: dict(str, str)
        """

        self._equipment_classes = equipment_classes

    @property
    def equipment_parents(self):
        """
        Gets the equipment_parents of this WorkflowOverrides.

        :return: The equipment_parents of this WorkflowOverrides.
        :rtype: dict(str, str)
        """
        return self._equipment_parents

    @equipment_parents.setter
    def equipment_parents(self, equipment_parents):
        """
        Sets the equipment_parents of this WorkflowOverrides.

        :param equipment_parents: The equipment_parents of this WorkflowOverrides.
        :type: dict(str, str)
        """

        self._equipment_parents = equipment_parents

    @property
    def equipment_locations(self):
        """
        Gets the equipment_locations of this WorkflowOverrides.

        :return: The equipment_locations of this WorkflowOverrides.
        :rtype: dict(str, str)
        """
        return self._equipment_locations

    @equipment_locations.setter
    def equipment_locations(self, equipment_locations):
        """
        Sets the equipment_locations of this WorkflowOverrides.

        :param equipment_locations: The equipment_locations of this WorkflowOverrides.
        :type: dict(str, str)
        """

        self._equipment_locations = equipment_locations

    @property
    def equipment_merge(self):
        """
        Gets the equipment_merge of this WorkflowOverrides.

        :return: The equipment_merge of this WorkflowOverrides.
        :rtype: dict(str, str)
        """
        return self._equipment_merge

    @equipment_merge.setter
    def equipment_merge(self, equipment_merge):
        """
        Sets the equipment_merge of this WorkflowOverrides.

        :param equipment_merge: The equipment_merge of this WorkflowOverrides.
        :type: dict(str, str)
        """

        self._equipment_merge = equipment_merge

    @property
    def removed_equipment(self):
        """
        Gets the removed_equipment of this WorkflowOverrides.

        :return: The removed_equipment of this WorkflowOverrides.
        :rtype: list[str]
        """
        return self._removed_equipment

    @removed_equipment.setter
    def removed_equipment(self, removed_equipment):
        """
        Sets the removed_equipment of this WorkflowOverrides.

        :param removed_equipment: The removed_equipment of this WorkflowOverrides.
        :type: list[str]
        """

        self._removed_equipment = removed_equipment

    @property
    def created_equipment(self):
        """
        Gets the created_equipment of this WorkflowOverrides.

        :return: The created_equipment of this WorkflowOverrides.
        :rtype: list[str]
        """
        return self._created_equipment

    @created_equipment.setter
    def created_equipment(self, created_equipment):
        """
        Sets the created_equipment of this WorkflowOverrides.

        :param created_equipment: The created_equipment of this WorkflowOverrides.
        :type: list[str]
        """

        self._created_equipment = created_equipment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowOverrides):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
