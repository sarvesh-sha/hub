# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class TimeSeriesPropertyRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sys_id=None, prop=None, convert_to=None, offset_in_seconds=None, treat_wide_gap_as_missing=None):
        """
        TimeSeriesPropertyRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_id': 'str',
            'prop': 'str',
            'convert_to': 'EngineeringUnitsFactors',
            'offset_in_seconds': 'int',
            'treat_wide_gap_as_missing': 'bool'
        }

        self.attribute_map = {
            'sys_id': 'sysId',
            'prop': 'prop',
            'convert_to': 'convertTo',
            'offset_in_seconds': 'offsetInSeconds',
            'treat_wide_gap_as_missing': 'treatWideGapAsMissing'
        }

        self._sys_id = sys_id
        self._prop = prop
        self._convert_to = convert_to
        self._offset_in_seconds = offset_in_seconds
        self._treat_wide_gap_as_missing = treat_wide_gap_as_missing


    @property
    def sys_id(self):
        """
        Gets the sys_id of this TimeSeriesPropertyRequest.

        :return: The sys_id of this TimeSeriesPropertyRequest.
        :rtype: str
        """
        return self._sys_id

    @sys_id.setter
    def sys_id(self, sys_id):
        """
        Sets the sys_id of this TimeSeriesPropertyRequest.

        :param sys_id: The sys_id of this TimeSeriesPropertyRequest.
        :type: str
        """

        self._sys_id = sys_id

    @property
    def prop(self):
        """
        Gets the prop of this TimeSeriesPropertyRequest.

        :return: The prop of this TimeSeriesPropertyRequest.
        :rtype: str
        """
        return self._prop

    @prop.setter
    def prop(self, prop):
        """
        Sets the prop of this TimeSeriesPropertyRequest.

        :param prop: The prop of this TimeSeriesPropertyRequest.
        :type: str
        """

        self._prop = prop

    @property
    def convert_to(self):
        """
        Gets the convert_to of this TimeSeriesPropertyRequest.

        :return: The convert_to of this TimeSeriesPropertyRequest.
        :rtype: EngineeringUnitsFactors
        """
        return self._convert_to

    @convert_to.setter
    def convert_to(self, convert_to):
        """
        Sets the convert_to of this TimeSeriesPropertyRequest.

        :param convert_to: The convert_to of this TimeSeriesPropertyRequest.
        :type: EngineeringUnitsFactors
        """

        self._convert_to = convert_to

    @property
    def offset_in_seconds(self):
        """
        Gets the offset_in_seconds of this TimeSeriesPropertyRequest.

        :return: The offset_in_seconds of this TimeSeriesPropertyRequest.
        :rtype: int
        """
        return self._offset_in_seconds

    @offset_in_seconds.setter
    def offset_in_seconds(self, offset_in_seconds):
        """
        Sets the offset_in_seconds of this TimeSeriesPropertyRequest.

        :param offset_in_seconds: The offset_in_seconds of this TimeSeriesPropertyRequest.
        :type: int
        """

        self._offset_in_seconds = offset_in_seconds

    @property
    def treat_wide_gap_as_missing(self):
        """
        Gets the treat_wide_gap_as_missing of this TimeSeriesPropertyRequest.

        :return: The treat_wide_gap_as_missing of this TimeSeriesPropertyRequest.
        :rtype: bool
        """
        return self._treat_wide_gap_as_missing

    @treat_wide_gap_as_missing.setter
    def treat_wide_gap_as_missing(self, treat_wide_gap_as_missing):
        """
        Sets the treat_wide_gap_as_missing of this TimeSeriesPropertyRequest.

        :param treat_wide_gap_as_missing: The treat_wide_gap_as_missing of this TimeSeriesPropertyRequest.
        :type: bool
        """

        self._treat_wide_gap_as_missing = treat_wide_gap_as_missing

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TimeSeriesPropertyRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
