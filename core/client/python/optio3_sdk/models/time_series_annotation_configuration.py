# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class TimeSeriesAnnotationConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, hide_tooltip=None, title=None, description=None, panel=None, source_id=None, type=None, min_x=None, max_x=None, min_y=None, max_y=None, tooltip_offset_x=None, tooltip_offset_y=None):
        """
        TimeSeriesAnnotationConfiguration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'hide_tooltip': 'bool',
            'title': 'str',
            'description': 'str',
            'panel': 'int',
            'source_id': 'str',
            'type': 'str',
            'min_x': 'float',
            'max_x': 'float',
            'min_y': 'float',
            'max_y': 'float',
            'tooltip_offset_x': 'float',
            'tooltip_offset_y': 'float'
        }

        self.attribute_map = {
            'hide_tooltip': 'hideTooltip',
            'title': 'title',
            'description': 'description',
            'panel': 'panel',
            'source_id': 'sourceId',
            'type': 'type',
            'min_x': 'minX',
            'max_x': 'maxX',
            'min_y': 'minY',
            'max_y': 'maxY',
            'tooltip_offset_x': 'tooltipOffsetX',
            'tooltip_offset_y': 'tooltipOffsetY'
        }

        self._hide_tooltip = hide_tooltip
        self._title = title
        self._description = description
        self._panel = panel
        self._source_id = source_id
        self._type = type
        self._min_x = min_x
        self._max_x = max_x
        self._min_y = min_y
        self._max_y = max_y
        self._tooltip_offset_x = tooltip_offset_x
        self._tooltip_offset_y = tooltip_offset_y


    @property
    def hide_tooltip(self):
        """
        Gets the hide_tooltip of this TimeSeriesAnnotationConfiguration.

        :return: The hide_tooltip of this TimeSeriesAnnotationConfiguration.
        :rtype: bool
        """
        return self._hide_tooltip

    @hide_tooltip.setter
    def hide_tooltip(self, hide_tooltip):
        """
        Sets the hide_tooltip of this TimeSeriesAnnotationConfiguration.

        :param hide_tooltip: The hide_tooltip of this TimeSeriesAnnotationConfiguration.
        :type: bool
        """

        self._hide_tooltip = hide_tooltip

    @property
    def title(self):
        """
        Gets the title of this TimeSeriesAnnotationConfiguration.

        :return: The title of this TimeSeriesAnnotationConfiguration.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this TimeSeriesAnnotationConfiguration.

        :param title: The title of this TimeSeriesAnnotationConfiguration.
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """
        Gets the description of this TimeSeriesAnnotationConfiguration.

        :return: The description of this TimeSeriesAnnotationConfiguration.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this TimeSeriesAnnotationConfiguration.

        :param description: The description of this TimeSeriesAnnotationConfiguration.
        :type: str
        """

        self._description = description

    @property
    def panel(self):
        """
        Gets the panel of this TimeSeriesAnnotationConfiguration.

        :return: The panel of this TimeSeriesAnnotationConfiguration.
        :rtype: int
        """
        return self._panel

    @panel.setter
    def panel(self, panel):
        """
        Sets the panel of this TimeSeriesAnnotationConfiguration.

        :param panel: The panel of this TimeSeriesAnnotationConfiguration.
        :type: int
        """

        self._panel = panel

    @property
    def source_id(self):
        """
        Gets the source_id of this TimeSeriesAnnotationConfiguration.

        :return: The source_id of this TimeSeriesAnnotationConfiguration.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this TimeSeriesAnnotationConfiguration.

        :param source_id: The source_id of this TimeSeriesAnnotationConfiguration.
        :type: str
        """

        self._source_id = source_id

    @property
    def type(self):
        """
        Gets the type of this TimeSeriesAnnotationConfiguration.

        :return: The type of this TimeSeriesAnnotationConfiguration.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this TimeSeriesAnnotationConfiguration.

        :param type: The type of this TimeSeriesAnnotationConfiguration.
        :type: str
        """
        allowed_values = ["Area", "AreaInverted", "Point", "XRange", "XRangeInverted", "YRange", "YRangeInverted"]
        if type is not None and type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def min_x(self):
        """
        Gets the min_x of this TimeSeriesAnnotationConfiguration.

        :return: The min_x of this TimeSeriesAnnotationConfiguration.
        :rtype: float
        """
        return self._min_x

    @min_x.setter
    def min_x(self, min_x):
        """
        Sets the min_x of this TimeSeriesAnnotationConfiguration.

        :param min_x: The min_x of this TimeSeriesAnnotationConfiguration.
        :type: float
        """

        self._min_x = min_x

    @property
    def max_x(self):
        """
        Gets the max_x of this TimeSeriesAnnotationConfiguration.

        :return: The max_x of this TimeSeriesAnnotationConfiguration.
        :rtype: float
        """
        return self._max_x

    @max_x.setter
    def max_x(self, max_x):
        """
        Sets the max_x of this TimeSeriesAnnotationConfiguration.

        :param max_x: The max_x of this TimeSeriesAnnotationConfiguration.
        :type: float
        """

        self._max_x = max_x

    @property
    def min_y(self):
        """
        Gets the min_y of this TimeSeriesAnnotationConfiguration.

        :return: The min_y of this TimeSeriesAnnotationConfiguration.
        :rtype: float
        """
        return self._min_y

    @min_y.setter
    def min_y(self, min_y):
        """
        Sets the min_y of this TimeSeriesAnnotationConfiguration.

        :param min_y: The min_y of this TimeSeriesAnnotationConfiguration.
        :type: float
        """

        self._min_y = min_y

    @property
    def max_y(self):
        """
        Gets the max_y of this TimeSeriesAnnotationConfiguration.

        :return: The max_y of this TimeSeriesAnnotationConfiguration.
        :rtype: float
        """
        return self._max_y

    @max_y.setter
    def max_y(self, max_y):
        """
        Sets the max_y of this TimeSeriesAnnotationConfiguration.

        :param max_y: The max_y of this TimeSeriesAnnotationConfiguration.
        :type: float
        """

        self._max_y = max_y

    @property
    def tooltip_offset_x(self):
        """
        Gets the tooltip_offset_x of this TimeSeriesAnnotationConfiguration.

        :return: The tooltip_offset_x of this TimeSeriesAnnotationConfiguration.
        :rtype: float
        """
        return self._tooltip_offset_x

    @tooltip_offset_x.setter
    def tooltip_offset_x(self, tooltip_offset_x):
        """
        Sets the tooltip_offset_x of this TimeSeriesAnnotationConfiguration.

        :param tooltip_offset_x: The tooltip_offset_x of this TimeSeriesAnnotationConfiguration.
        :type: float
        """

        self._tooltip_offset_x = tooltip_offset_x

    @property
    def tooltip_offset_y(self):
        """
        Gets the tooltip_offset_y of this TimeSeriesAnnotationConfiguration.

        :return: The tooltip_offset_y of this TimeSeriesAnnotationConfiguration.
        :rtype: float
        """
        return self._tooltip_offset_y

    @tooltip_offset_y.setter
    def tooltip_offset_y(self, tooltip_offset_y):
        """
        Sets the tooltip_offset_y of this TimeSeriesAnnotationConfiguration.

        :param tooltip_offset_y: The tooltip_offset_y of this TimeSeriesAnnotationConfiguration.
        :type: float
        """

        self._tooltip_offset_y = tooltip_offset_y

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TimeSeriesAnnotationConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

