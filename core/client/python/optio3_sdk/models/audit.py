# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class Audit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sys_id=None, created_on=None, updated_on=None, asset=None, location=None, sequence_number=None, description=None, extended_description=None, type=None):
        """
        Audit - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_id': 'str',
            'created_on': 'datetime',
            'updated_on': 'datetime',
            'asset': 'RecordIdentity',
            'location': 'RecordIdentity',
            'sequence_number': 'int',
            'description': 'str',
            'extended_description': 'str',
            'type': 'str',
            'discriminator___type': 'str'
        }

        self.attribute_map = {
            'sys_id': 'sysId',
            'created_on': 'createdOn',
            'updated_on': 'updatedOn',
            'asset': 'asset',
            'location': 'location',
            'sequence_number': 'sequenceNumber',
            'description': 'description',
            'extended_description': 'extendedDescription',
            'type': 'type',
            'discriminator___type': '__type'
        }

        self._sys_id = sys_id
        self._created_on = created_on
        self._updated_on = updated_on
        self._asset = asset
        self._location = location
        self._sequence_number = sequence_number
        self._description = description
        self._extended_description = extended_description
        self._type = type

    @property
    def discriminator___type(self):
        return "Audit"

    @discriminator___type.setter
    def discriminator___type(self, discriminator):
        # Don't need to do anything
        return

    @property
    def sys_id(self):
        """
        Gets the sys_id of this Audit.

        :return: The sys_id of this Audit.
        :rtype: str
        """
        return self._sys_id

    @sys_id.setter
    def sys_id(self, sys_id):
        """
        Sets the sys_id of this Audit.

        :param sys_id: The sys_id of this Audit.
        :type: str
        """

        self._sys_id = sys_id

    @property
    def created_on(self):
        """
        Gets the created_on of this Audit.

        :return: The created_on of this Audit.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Audit.

        :param created_on: The created_on of this Audit.
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_on(self):
        """
        Gets the updated_on of this Audit.

        :return: The updated_on of this Audit.
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this Audit.

        :param updated_on: The updated_on of this Audit.
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def asset(self):
        """
        Gets the asset of this Audit.

        :return: The asset of this Audit.
        :rtype: RecordIdentity
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """
        Sets the asset of this Audit.

        :param asset: The asset of this Audit.
        :type: RecordIdentity
        """

        self._asset = asset

    @property
    def location(self):
        """
        Gets the location of this Audit.

        :return: The location of this Audit.
        :rtype: RecordIdentity
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this Audit.

        :param location: The location of this Audit.
        :type: RecordIdentity
        """

        self._location = location

    @property
    def sequence_number(self):
        """
        Gets the sequence_number of this Audit.

        :return: The sequence_number of this Audit.
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """
        Sets the sequence_number of this Audit.

        :param sequence_number: The sequence_number of this Audit.
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def description(self):
        """
        Gets the description of this Audit.

        :return: The description of this Audit.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Audit.

        :param description: The description of this Audit.
        :type: str
        """

        self._description = description

    @property
    def extended_description(self):
        """
        Gets the extended_description of this Audit.

        :return: The extended_description of this Audit.
        :rtype: str
        """
        return self._extended_description

    @extended_description.setter
    def extended_description(self, extended_description):
        """
        Sets the extended_description of this Audit.

        :param extended_description: The extended_description of this Audit.
        :type: str
        """

        self._extended_description = extended_description

    @property
    def type(self):
        """
        Gets the type of this Audit.

        :return: The type of this Audit.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Audit.

        :param type: The type of this Audit.
        :type: str
        """
        allowed_values = ["DISCOVERY_ROUTERS", "DISCOVERY_DEVICES"]
        if type is not None and type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Audit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

