# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class AggregationNodeBinding(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, node_id=None, aggregation_type=None, units=None, units_display=None, bar_range=None, color=None):
        """
        AggregationNodeBinding - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'node_id': 'str',
            'aggregation_type': 'str',
            'units': 'EngineeringUnitsFactors',
            'units_display': 'str',
            'bar_range': 'ToggleableNumericRange',
            'color': 'ColorConfiguration'
        }

        self.attribute_map = {
            'name': 'name',
            'node_id': 'nodeId',
            'aggregation_type': 'aggregationType',
            'units': 'units',
            'units_display': 'unitsDisplay',
            'bar_range': 'barRange',
            'color': 'color'
        }

        self._name = name
        self._node_id = node_id
        self._aggregation_type = aggregation_type
        self._units = units
        self._units_display = units_display
        self._bar_range = bar_range
        self._color = color


    @property
    def name(self):
        """
        Gets the name of this AggregationNodeBinding.

        :return: The name of this AggregationNodeBinding.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AggregationNodeBinding.

        :param name: The name of this AggregationNodeBinding.
        :type: str
        """

        self._name = name

    @property
    def node_id(self):
        """
        Gets the node_id of this AggregationNodeBinding.

        :return: The node_id of this AggregationNodeBinding.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """
        Sets the node_id of this AggregationNodeBinding.

        :param node_id: The node_id of this AggregationNodeBinding.
        :type: str
        """

        self._node_id = node_id

    @property
    def aggregation_type(self):
        """
        Gets the aggregation_type of this AggregationNodeBinding.

        :return: The aggregation_type of this AggregationNodeBinding.
        :rtype: str
        """
        return self._aggregation_type

    @aggregation_type.setter
    def aggregation_type(self, aggregation_type):
        """
        Sets the aggregation_type of this AggregationNodeBinding.

        :param aggregation_type: The aggregation_type of this AggregationNodeBinding.
        :type: str
        """
        allowed_values = ["NONE", "SUM", "MEAN", "MIN", "MAX", "DELTA", "AVGDELTA", "INCREASE", "DECREASE", "FIRST", "LAST"]
        if aggregation_type is not None and aggregation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_type` ({0}), must be one of {1}"
                .format(aggregation_type, allowed_values)
            )

        self._aggregation_type = aggregation_type

    @property
    def units(self):
        """
        Gets the units of this AggregationNodeBinding.

        :return: The units of this AggregationNodeBinding.
        :rtype: EngineeringUnitsFactors
        """
        return self._units

    @units.setter
    def units(self, units):
        """
        Sets the units of this AggregationNodeBinding.

        :param units: The units of this AggregationNodeBinding.
        :type: EngineeringUnitsFactors
        """

        self._units = units

    @property
    def units_display(self):
        """
        Gets the units_display of this AggregationNodeBinding.

        :return: The units_display of this AggregationNodeBinding.
        :rtype: str
        """
        return self._units_display

    @units_display.setter
    def units_display(self, units_display):
        """
        Sets the units_display of this AggregationNodeBinding.

        :param units_display: The units_display of this AggregationNodeBinding.
        :type: str
        """

        self._units_display = units_display

    @property
    def bar_range(self):
        """
        Gets the bar_range of this AggregationNodeBinding.

        :return: The bar_range of this AggregationNodeBinding.
        :rtype: ToggleableNumericRange
        """
        return self._bar_range

    @bar_range.setter
    def bar_range(self, bar_range):
        """
        Sets the bar_range of this AggregationNodeBinding.

        :param bar_range: The bar_range of this AggregationNodeBinding.
        :type: ToggleableNumericRange
        """

        self._bar_range = bar_range

    @property
    def color(self):
        """
        Gets the color of this AggregationNodeBinding.

        :return: The color of this AggregationNodeBinding.
        :rtype: ColorConfiguration
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this AggregationNodeBinding.

        :param color: The color of this AggregationNodeBinding.
        :type: ColorConfiguration
        """

        self._color = color

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AggregationNodeBinding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

