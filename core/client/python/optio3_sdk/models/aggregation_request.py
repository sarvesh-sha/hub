# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class AggregationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, units_factors=None, aggregation_type=None, selections=None, query=None, filterable_ranges=None, local_time_zone_offset=None, prop=None, max_interpolation_gap=None):
        """
        AggregationRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'units_factors': 'EngineeringUnitsFactors',
            'aggregation_type': 'str',
            'selections': 'ControlPointsSelection',
            'query': 'TagsJoinQuery',
            'filterable_ranges': 'list[FilterableTimeRange]',
            'local_time_zone_offset': 'int',
            'prop': 'str',
            'max_interpolation_gap': 'float'
        }

        self.attribute_map = {
            'units_factors': 'unitsFactors',
            'aggregation_type': 'aggregationType',
            'selections': 'selections',
            'query': 'query',
            'filterable_ranges': 'filterableRanges',
            'local_time_zone_offset': 'localTimeZoneOffset',
            'prop': 'prop',
            'max_interpolation_gap': 'maxInterpolationGap'
        }

        self._units_factors = units_factors
        self._aggregation_type = aggregation_type
        self._selections = selections
        self._query = query
        self._filterable_ranges = filterable_ranges
        self._local_time_zone_offset = local_time_zone_offset
        self._prop = prop
        self._max_interpolation_gap = max_interpolation_gap


    @property
    def units_factors(self):
        """
        Gets the units_factors of this AggregationRequest.

        :return: The units_factors of this AggregationRequest.
        :rtype: EngineeringUnitsFactors
        """
        return self._units_factors

    @units_factors.setter
    def units_factors(self, units_factors):
        """
        Sets the units_factors of this AggregationRequest.

        :param units_factors: The units_factors of this AggregationRequest.
        :type: EngineeringUnitsFactors
        """

        self._units_factors = units_factors

    @property
    def aggregation_type(self):
        """
        Gets the aggregation_type of this AggregationRequest.

        :return: The aggregation_type of this AggregationRequest.
        :rtype: str
        """
        return self._aggregation_type

    @aggregation_type.setter
    def aggregation_type(self, aggregation_type):
        """
        Sets the aggregation_type of this AggregationRequest.

        :param aggregation_type: The aggregation_type of this AggregationRequest.
        :type: str
        """
        allowed_values = ["NONE", "SUM", "MEAN", "MIN", "MAX", "DELTA", "AVGDELTA", "INCREASE", "DECREASE", "FIRST", "LAST"]
        if aggregation_type is not None and aggregation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_type` ({0}), must be one of {1}"
                .format(aggregation_type, allowed_values)
            )

        self._aggregation_type = aggregation_type

    @property
    def selections(self):
        """
        Gets the selections of this AggregationRequest.

        :return: The selections of this AggregationRequest.
        :rtype: ControlPointsSelection
        """
        return self._selections

    @selections.setter
    def selections(self, selections):
        """
        Sets the selections of this AggregationRequest.

        :param selections: The selections of this AggregationRequest.
        :type: ControlPointsSelection
        """

        self._selections = selections

    @property
    def query(self):
        """
        Gets the query of this AggregationRequest.

        :return: The query of this AggregationRequest.
        :rtype: TagsJoinQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this AggregationRequest.

        :param query: The query of this AggregationRequest.
        :type: TagsJoinQuery
        """

        self._query = query

    @property
    def filterable_ranges(self):
        """
        Gets the filterable_ranges of this AggregationRequest.

        :return: The filterable_ranges of this AggregationRequest.
        :rtype: list[FilterableTimeRange]
        """
        return self._filterable_ranges

    @filterable_ranges.setter
    def filterable_ranges(self, filterable_ranges):
        """
        Sets the filterable_ranges of this AggregationRequest.

        :param filterable_ranges: The filterable_ranges of this AggregationRequest.
        :type: list[FilterableTimeRange]
        """

        self._filterable_ranges = filterable_ranges

    @property
    def local_time_zone_offset(self):
        """
        Gets the local_time_zone_offset of this AggregationRequest.

        :return: The local_time_zone_offset of this AggregationRequest.
        :rtype: int
        """
        return self._local_time_zone_offset

    @local_time_zone_offset.setter
    def local_time_zone_offset(self, local_time_zone_offset):
        """
        Sets the local_time_zone_offset of this AggregationRequest.

        :param local_time_zone_offset: The local_time_zone_offset of this AggregationRequest.
        :type: int
        """

        self._local_time_zone_offset = local_time_zone_offset

    @property
    def prop(self):
        """
        Gets the prop of this AggregationRequest.

        :return: The prop of this AggregationRequest.
        :rtype: str
        """
        return self._prop

    @prop.setter
    def prop(self, prop):
        """
        Sets the prop of this AggregationRequest.

        :param prop: The prop of this AggregationRequest.
        :type: str
        """

        self._prop = prop

    @property
    def max_interpolation_gap(self):
        """
        Gets the max_interpolation_gap of this AggregationRequest.

        :return: The max_interpolation_gap of this AggregationRequest.
        :rtype: float
        """
        return self._max_interpolation_gap

    @max_interpolation_gap.setter
    def max_interpolation_gap(self, max_interpolation_gap):
        """
        Sets the max_interpolation_gap of this AggregationRequest.

        :param max_interpolation_gap: The max_interpolation_gap of this AggregationRequest.
        :type: float
        """

        self._max_interpolation_gap = max_interpolation_gap

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AggregationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

