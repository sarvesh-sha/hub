# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class MetadataAggregationPoint(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, point_id=None, point_name=None, point_name_raw=None, point_name_backup=None, identifier=None, point_class_id=None, building_id=None, location_sys_id=None, equipment_id=None, tags=None):
        """
        MetadataAggregationPoint - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'point_id': 'str',
            'point_name': 'str',
            'point_name_raw': 'str',
            'point_name_backup': 'str',
            'identifier': 'str',
            'point_class_id': 'str',
            'building_id': 'str',
            'location_sys_id': 'str',
            'equipment_id': 'str',
            'tags': 'list[str]'
        }

        self.attribute_map = {
            'point_id': 'pointId',
            'point_name': 'pointName',
            'point_name_raw': 'pointNameRaw',
            'point_name_backup': 'pointNameBackup',
            'identifier': 'identifier',
            'point_class_id': 'pointClassId',
            'building_id': 'buildingId',
            'location_sys_id': 'locationSysId',
            'equipment_id': 'equipmentId',
            'tags': 'tags'
        }

        self._point_id = point_id
        self._point_name = point_name
        self._point_name_raw = point_name_raw
        self._point_name_backup = point_name_backup
        self._identifier = identifier
        self._point_class_id = point_class_id
        self._building_id = building_id
        self._location_sys_id = location_sys_id
        self._equipment_id = equipment_id
        self._tags = tags


    @property
    def point_id(self):
        """
        Gets the point_id of this MetadataAggregationPoint.

        :return: The point_id of this MetadataAggregationPoint.
        :rtype: str
        """
        return self._point_id

    @point_id.setter
    def point_id(self, point_id):
        """
        Sets the point_id of this MetadataAggregationPoint.

        :param point_id: The point_id of this MetadataAggregationPoint.
        :type: str
        """

        self._point_id = point_id

    @property
    def point_name(self):
        """
        Gets the point_name of this MetadataAggregationPoint.

        :return: The point_name of this MetadataAggregationPoint.
        :rtype: str
        """
        return self._point_name

    @point_name.setter
    def point_name(self, point_name):
        """
        Sets the point_name of this MetadataAggregationPoint.

        :param point_name: The point_name of this MetadataAggregationPoint.
        :type: str
        """

        self._point_name = point_name

    @property
    def point_name_raw(self):
        """
        Gets the point_name_raw of this MetadataAggregationPoint.

        :return: The point_name_raw of this MetadataAggregationPoint.
        :rtype: str
        """
        return self._point_name_raw

    @point_name_raw.setter
    def point_name_raw(self, point_name_raw):
        """
        Sets the point_name_raw of this MetadataAggregationPoint.

        :param point_name_raw: The point_name_raw of this MetadataAggregationPoint.
        :type: str
        """

        self._point_name_raw = point_name_raw

    @property
    def point_name_backup(self):
        """
        Gets the point_name_backup of this MetadataAggregationPoint.

        :return: The point_name_backup of this MetadataAggregationPoint.
        :rtype: str
        """
        return self._point_name_backup

    @point_name_backup.setter
    def point_name_backup(self, point_name_backup):
        """
        Sets the point_name_backup of this MetadataAggregationPoint.

        :param point_name_backup: The point_name_backup of this MetadataAggregationPoint.
        :type: str
        """

        self._point_name_backup = point_name_backup

    @property
    def identifier(self):
        """
        Gets the identifier of this MetadataAggregationPoint.

        :return: The identifier of this MetadataAggregationPoint.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this MetadataAggregationPoint.

        :param identifier: The identifier of this MetadataAggregationPoint.
        :type: str
        """

        self._identifier = identifier

    @property
    def point_class_id(self):
        """
        Gets the point_class_id of this MetadataAggregationPoint.

        :return: The point_class_id of this MetadataAggregationPoint.
        :rtype: str
        """
        return self._point_class_id

    @point_class_id.setter
    def point_class_id(self, point_class_id):
        """
        Sets the point_class_id of this MetadataAggregationPoint.

        :param point_class_id: The point_class_id of this MetadataAggregationPoint.
        :type: str
        """

        self._point_class_id = point_class_id

    @property
    def building_id(self):
        """
        Gets the building_id of this MetadataAggregationPoint.

        :return: The building_id of this MetadataAggregationPoint.
        :rtype: str
        """
        return self._building_id

    @building_id.setter
    def building_id(self, building_id):
        """
        Sets the building_id of this MetadataAggregationPoint.

        :param building_id: The building_id of this MetadataAggregationPoint.
        :type: str
        """

        self._building_id = building_id

    @property
    def location_sys_id(self):
        """
        Gets the location_sys_id of this MetadataAggregationPoint.

        :return: The location_sys_id of this MetadataAggregationPoint.
        :rtype: str
        """
        return self._location_sys_id

    @location_sys_id.setter
    def location_sys_id(self, location_sys_id):
        """
        Sets the location_sys_id of this MetadataAggregationPoint.

        :param location_sys_id: The location_sys_id of this MetadataAggregationPoint.
        :type: str
        """

        self._location_sys_id = location_sys_id

    @property
    def equipment_id(self):
        """
        Gets the equipment_id of this MetadataAggregationPoint.

        :return: The equipment_id of this MetadataAggregationPoint.
        :rtype: str
        """
        return self._equipment_id

    @equipment_id.setter
    def equipment_id(self, equipment_id):
        """
        Sets the equipment_id of this MetadataAggregationPoint.

        :param equipment_id: The equipment_id of this MetadataAggregationPoint.
        :type: str
        """

        self._equipment_id = equipment_id

    @property
    def tags(self):
        """
        Gets the tags of this MetadataAggregationPoint.

        :return: The tags of this MetadataAggregationPoint.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this MetadataAggregationPoint.

        :param tags: The tags of this MetadataAggregationPoint.
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MetadataAggregationPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
