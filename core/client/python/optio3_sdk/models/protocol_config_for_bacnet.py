# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class ProtocolConfigForBACnet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sampling_configuration_id=None, use_udp=None, use_ethernet=None, disable_broadcast=None, sweep_subnet=None, sweep_mstp=None, include_networks_from_routers=None, network_port=None, bbmds=None, scan_subnets=None, limit_scan=None, max_parallel_requests_per_host=None, max_parallel_requests_per_network=None, limit_packet_rate=None, non_discoverable_devices=None, non_discoverable_mstp_trunks=None, skipped_devices=None, filter_subnets=None):
        """
        ProtocolConfigForBACnet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sampling_configuration_id': 'str',
            'use_udp': 'bool',
            'use_ethernet': 'bool',
            'disable_broadcast': 'bool',
            'sweep_subnet': 'bool',
            'sweep_mstp': 'bool',
            'include_networks_from_routers': 'bool',
            'network_port': 'int',
            'bbmds': 'list[BACnetBBMD]',
            'scan_subnets': 'list[FilteredSubnet]',
            'limit_scan': 'WhoIsRange',
            'max_parallel_requests_per_host': 'int',
            'max_parallel_requests_per_network': 'int',
            'limit_packet_rate': 'int',
            'non_discoverable_devices': 'list[NonDiscoverableBACnetDevice]',
            'non_discoverable_mstp_trunks': 'list[NonDiscoverableMstpTrunk]',
            'skipped_devices': 'list[SkippedBACnetDevice]',
            'filter_subnets': 'list[FilteredSubnet]',
            'discriminator___type': 'str'
        }

        self.attribute_map = {
            'sampling_configuration_id': 'samplingConfigurationId',
            'use_udp': 'useUDP',
            'use_ethernet': 'useEthernet',
            'disable_broadcast': 'disableBroadcast',
            'sweep_subnet': 'sweepSubnet',
            'sweep_mstp': 'sweepMSTP',
            'include_networks_from_routers': 'includeNetworksFromRouters',
            'network_port': 'networkPort',
            'bbmds': 'bbmds',
            'scan_subnets': 'scanSubnets',
            'limit_scan': 'limitScan',
            'max_parallel_requests_per_host': 'maxParallelRequestsPerHost',
            'max_parallel_requests_per_network': 'maxParallelRequestsPerNetwork',
            'limit_packet_rate': 'limitPacketRate',
            'non_discoverable_devices': 'nonDiscoverableDevices',
            'non_discoverable_mstp_trunks': 'nonDiscoverableMstpTrunks',
            'skipped_devices': 'skippedDevices',
            'filter_subnets': 'filterSubnets',
            'discriminator___type': '__type'
        }

        self._sampling_configuration_id = sampling_configuration_id
        self._use_udp = use_udp
        self._use_ethernet = use_ethernet
        self._disable_broadcast = disable_broadcast
        self._sweep_subnet = sweep_subnet
        self._sweep_mstp = sweep_mstp
        self._include_networks_from_routers = include_networks_from_routers
        self._network_port = network_port
        self._bbmds = bbmds
        self._scan_subnets = scan_subnets
        self._limit_scan = limit_scan
        self._max_parallel_requests_per_host = max_parallel_requests_per_host
        self._max_parallel_requests_per_network = max_parallel_requests_per_network
        self._limit_packet_rate = limit_packet_rate
        self._non_discoverable_devices = non_discoverable_devices
        self._non_discoverable_mstp_trunks = non_discoverable_mstp_trunks
        self._skipped_devices = skipped_devices
        self._filter_subnets = filter_subnets

    @property
    def discriminator___type(self):
        return "ProtocolConfigForBACnet"

    @discriminator___type.setter
    def discriminator___type(self, discriminator):
        # Don't need to do anything
        return

    @property
    def sampling_configuration_id(self):
        """
        Gets the sampling_configuration_id of this ProtocolConfigForBACnet.

        :return: The sampling_configuration_id of this ProtocolConfigForBACnet.
        :rtype: str
        """
        return self._sampling_configuration_id

    @sampling_configuration_id.setter
    def sampling_configuration_id(self, sampling_configuration_id):
        """
        Sets the sampling_configuration_id of this ProtocolConfigForBACnet.

        :param sampling_configuration_id: The sampling_configuration_id of this ProtocolConfigForBACnet.
        :type: str
        """

        self._sampling_configuration_id = sampling_configuration_id

    @property
    def use_udp(self):
        """
        Gets the use_udp of this ProtocolConfigForBACnet.

        :return: The use_udp of this ProtocolConfigForBACnet.
        :rtype: bool
        """
        return self._use_udp

    @use_udp.setter
    def use_udp(self, use_udp):
        """
        Sets the use_udp of this ProtocolConfigForBACnet.

        :param use_udp: The use_udp of this ProtocolConfigForBACnet.
        :type: bool
        """

        self._use_udp = use_udp

    @property
    def use_ethernet(self):
        """
        Gets the use_ethernet of this ProtocolConfigForBACnet.

        :return: The use_ethernet of this ProtocolConfigForBACnet.
        :rtype: bool
        """
        return self._use_ethernet

    @use_ethernet.setter
    def use_ethernet(self, use_ethernet):
        """
        Sets the use_ethernet of this ProtocolConfigForBACnet.

        :param use_ethernet: The use_ethernet of this ProtocolConfigForBACnet.
        :type: bool
        """

        self._use_ethernet = use_ethernet

    @property
    def disable_broadcast(self):
        """
        Gets the disable_broadcast of this ProtocolConfigForBACnet.

        :return: The disable_broadcast of this ProtocolConfigForBACnet.
        :rtype: bool
        """
        return self._disable_broadcast

    @disable_broadcast.setter
    def disable_broadcast(self, disable_broadcast):
        """
        Sets the disable_broadcast of this ProtocolConfigForBACnet.

        :param disable_broadcast: The disable_broadcast of this ProtocolConfigForBACnet.
        :type: bool
        """

        self._disable_broadcast = disable_broadcast

    @property
    def sweep_subnet(self):
        """
        Gets the sweep_subnet of this ProtocolConfigForBACnet.

        :return: The sweep_subnet of this ProtocolConfigForBACnet.
        :rtype: bool
        """
        return self._sweep_subnet

    @sweep_subnet.setter
    def sweep_subnet(self, sweep_subnet):
        """
        Sets the sweep_subnet of this ProtocolConfigForBACnet.

        :param sweep_subnet: The sweep_subnet of this ProtocolConfigForBACnet.
        :type: bool
        """

        self._sweep_subnet = sweep_subnet

    @property
    def sweep_mstp(self):
        """
        Gets the sweep_mstp of this ProtocolConfigForBACnet.

        :return: The sweep_mstp of this ProtocolConfigForBACnet.
        :rtype: bool
        """
        return self._sweep_mstp

    @sweep_mstp.setter
    def sweep_mstp(self, sweep_mstp):
        """
        Sets the sweep_mstp of this ProtocolConfigForBACnet.

        :param sweep_mstp: The sweep_mstp of this ProtocolConfigForBACnet.
        :type: bool
        """

        self._sweep_mstp = sweep_mstp

    @property
    def include_networks_from_routers(self):
        """
        Gets the include_networks_from_routers of this ProtocolConfigForBACnet.

        :return: The include_networks_from_routers of this ProtocolConfigForBACnet.
        :rtype: bool
        """
        return self._include_networks_from_routers

    @include_networks_from_routers.setter
    def include_networks_from_routers(self, include_networks_from_routers):
        """
        Sets the include_networks_from_routers of this ProtocolConfigForBACnet.

        :param include_networks_from_routers: The include_networks_from_routers of this ProtocolConfigForBACnet.
        :type: bool
        """

        self._include_networks_from_routers = include_networks_from_routers

    @property
    def network_port(self):
        """
        Gets the network_port of this ProtocolConfigForBACnet.

        :return: The network_port of this ProtocolConfigForBACnet.
        :rtype: int
        """
        return self._network_port

    @network_port.setter
    def network_port(self, network_port):
        """
        Sets the network_port of this ProtocolConfigForBACnet.

        :param network_port: The network_port of this ProtocolConfigForBACnet.
        :type: int
        """

        self._network_port = network_port

    @property
    def bbmds(self):
        """
        Gets the bbmds of this ProtocolConfigForBACnet.

        :return: The bbmds of this ProtocolConfigForBACnet.
        :rtype: list[BACnetBBMD]
        """
        return self._bbmds

    @bbmds.setter
    def bbmds(self, bbmds):
        """
        Sets the bbmds of this ProtocolConfigForBACnet.

        :param bbmds: The bbmds of this ProtocolConfigForBACnet.
        :type: list[BACnetBBMD]
        """

        self._bbmds = bbmds

    @property
    def scan_subnets(self):
        """
        Gets the scan_subnets of this ProtocolConfigForBACnet.

        :return: The scan_subnets of this ProtocolConfigForBACnet.
        :rtype: list[FilteredSubnet]
        """
        return self._scan_subnets

    @scan_subnets.setter
    def scan_subnets(self, scan_subnets):
        """
        Sets the scan_subnets of this ProtocolConfigForBACnet.

        :param scan_subnets: The scan_subnets of this ProtocolConfigForBACnet.
        :type: list[FilteredSubnet]
        """

        self._scan_subnets = scan_subnets

    @property
    def limit_scan(self):
        """
        Gets the limit_scan of this ProtocolConfigForBACnet.

        :return: The limit_scan of this ProtocolConfigForBACnet.
        :rtype: WhoIsRange
        """
        return self._limit_scan

    @limit_scan.setter
    def limit_scan(self, limit_scan):
        """
        Sets the limit_scan of this ProtocolConfigForBACnet.

        :param limit_scan: The limit_scan of this ProtocolConfigForBACnet.
        :type: WhoIsRange
        """

        self._limit_scan = limit_scan

    @property
    def max_parallel_requests_per_host(self):
        """
        Gets the max_parallel_requests_per_host of this ProtocolConfigForBACnet.

        :return: The max_parallel_requests_per_host of this ProtocolConfigForBACnet.
        :rtype: int
        """
        return self._max_parallel_requests_per_host

    @max_parallel_requests_per_host.setter
    def max_parallel_requests_per_host(self, max_parallel_requests_per_host):
        """
        Sets the max_parallel_requests_per_host of this ProtocolConfigForBACnet.

        :param max_parallel_requests_per_host: The max_parallel_requests_per_host of this ProtocolConfigForBACnet.
        :type: int
        """

        self._max_parallel_requests_per_host = max_parallel_requests_per_host

    @property
    def max_parallel_requests_per_network(self):
        """
        Gets the max_parallel_requests_per_network of this ProtocolConfigForBACnet.

        :return: The max_parallel_requests_per_network of this ProtocolConfigForBACnet.
        :rtype: int
        """
        return self._max_parallel_requests_per_network

    @max_parallel_requests_per_network.setter
    def max_parallel_requests_per_network(self, max_parallel_requests_per_network):
        """
        Sets the max_parallel_requests_per_network of this ProtocolConfigForBACnet.

        :param max_parallel_requests_per_network: The max_parallel_requests_per_network of this ProtocolConfigForBACnet.
        :type: int
        """

        self._max_parallel_requests_per_network = max_parallel_requests_per_network

    @property
    def limit_packet_rate(self):
        """
        Gets the limit_packet_rate of this ProtocolConfigForBACnet.

        :return: The limit_packet_rate of this ProtocolConfigForBACnet.
        :rtype: int
        """
        return self._limit_packet_rate

    @limit_packet_rate.setter
    def limit_packet_rate(self, limit_packet_rate):
        """
        Sets the limit_packet_rate of this ProtocolConfigForBACnet.

        :param limit_packet_rate: The limit_packet_rate of this ProtocolConfigForBACnet.
        :type: int
        """

        self._limit_packet_rate = limit_packet_rate

    @property
    def non_discoverable_devices(self):
        """
        Gets the non_discoverable_devices of this ProtocolConfigForBACnet.

        :return: The non_discoverable_devices of this ProtocolConfigForBACnet.
        :rtype: list[NonDiscoverableBACnetDevice]
        """
        return self._non_discoverable_devices

    @non_discoverable_devices.setter
    def non_discoverable_devices(self, non_discoverable_devices):
        """
        Sets the non_discoverable_devices of this ProtocolConfigForBACnet.

        :param non_discoverable_devices: The non_discoverable_devices of this ProtocolConfigForBACnet.
        :type: list[NonDiscoverableBACnetDevice]
        """

        self._non_discoverable_devices = non_discoverable_devices

    @property
    def non_discoverable_mstp_trunks(self):
        """
        Gets the non_discoverable_mstp_trunks of this ProtocolConfigForBACnet.

        :return: The non_discoverable_mstp_trunks of this ProtocolConfigForBACnet.
        :rtype: list[NonDiscoverableMstpTrunk]
        """
        return self._non_discoverable_mstp_trunks

    @non_discoverable_mstp_trunks.setter
    def non_discoverable_mstp_trunks(self, non_discoverable_mstp_trunks):
        """
        Sets the non_discoverable_mstp_trunks of this ProtocolConfigForBACnet.

        :param non_discoverable_mstp_trunks: The non_discoverable_mstp_trunks of this ProtocolConfigForBACnet.
        :type: list[NonDiscoverableMstpTrunk]
        """

        self._non_discoverable_mstp_trunks = non_discoverable_mstp_trunks

    @property
    def skipped_devices(self):
        """
        Gets the skipped_devices of this ProtocolConfigForBACnet.

        :return: The skipped_devices of this ProtocolConfigForBACnet.
        :rtype: list[SkippedBACnetDevice]
        """
        return self._skipped_devices

    @skipped_devices.setter
    def skipped_devices(self, skipped_devices):
        """
        Sets the skipped_devices of this ProtocolConfigForBACnet.

        :param skipped_devices: The skipped_devices of this ProtocolConfigForBACnet.
        :type: list[SkippedBACnetDevice]
        """

        self._skipped_devices = skipped_devices

    @property
    def filter_subnets(self):
        """
        Gets the filter_subnets of this ProtocolConfigForBACnet.

        :return: The filter_subnets of this ProtocolConfigForBACnet.
        :rtype: list[FilteredSubnet]
        """
        return self._filter_subnets

    @filter_subnets.setter
    def filter_subnets(self, filter_subnets):
        """
        Sets the filter_subnets of this ProtocolConfigForBACnet.

        :param filter_subnets: The filter_subnets of this ProtocolConfigForBACnet.
        :type: list[FilteredSubnet]
        """

        self._filter_subnets = filter_subnets

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProtocolConfigForBACnet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
