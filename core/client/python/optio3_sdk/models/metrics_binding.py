# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class MetricsBinding(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, details_hash=None, named_output=None, schema=None, binding_for_series=None, binding_for_set_of_series=None):
        """
        MetricsBinding - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'details_hash': 'str',
            'named_output': 'str',
            'schema': 'TimeSeriesPropertyType',
            'binding_for_series': 'dict(str, MetricsBindingForSeries)',
            'binding_for_set_of_series': 'dict(str, MetricsBindingForSetOfSeries)'
        }

        self.attribute_map = {
            'details_hash': 'detailsHash',
            'named_output': 'namedOutput',
            'schema': 'schema',
            'binding_for_series': 'bindingForSeries',
            'binding_for_set_of_series': 'bindingForSetOfSeries'
        }

        self._details_hash = details_hash
        self._named_output = named_output
        self._schema = schema
        self._binding_for_series = binding_for_series
        self._binding_for_set_of_series = binding_for_set_of_series


    @property
    def details_hash(self):
        """
        Gets the details_hash of this MetricsBinding.

        :return: The details_hash of this MetricsBinding.
        :rtype: str
        """
        return self._details_hash

    @details_hash.setter
    def details_hash(self, details_hash):
        """
        Sets the details_hash of this MetricsBinding.

        :param details_hash: The details_hash of this MetricsBinding.
        :type: str
        """

        self._details_hash = details_hash

    @property
    def named_output(self):
        """
        Gets the named_output of this MetricsBinding.

        :return: The named_output of this MetricsBinding.
        :rtype: str
        """
        return self._named_output

    @named_output.setter
    def named_output(self, named_output):
        """
        Sets the named_output of this MetricsBinding.

        :param named_output: The named_output of this MetricsBinding.
        :type: str
        """

        self._named_output = named_output

    @property
    def schema(self):
        """
        Gets the schema of this MetricsBinding.

        :return: The schema of this MetricsBinding.
        :rtype: TimeSeriesPropertyType
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """
        Sets the schema of this MetricsBinding.

        :param schema: The schema of this MetricsBinding.
        :type: TimeSeriesPropertyType
        """

        self._schema = schema

    @property
    def binding_for_series(self):
        """
        Gets the binding_for_series of this MetricsBinding.

        :return: The binding_for_series of this MetricsBinding.
        :rtype: dict(str, MetricsBindingForSeries)
        """
        return self._binding_for_series

    @binding_for_series.setter
    def binding_for_series(self, binding_for_series):
        """
        Sets the binding_for_series of this MetricsBinding.

        :param binding_for_series: The binding_for_series of this MetricsBinding.
        :type: dict(str, MetricsBindingForSeries)
        """

        self._binding_for_series = binding_for_series

    @property
    def binding_for_set_of_series(self):
        """
        Gets the binding_for_set_of_series of this MetricsBinding.

        :return: The binding_for_set_of_series of this MetricsBinding.
        :rtype: dict(str, MetricsBindingForSetOfSeries)
        """
        return self._binding_for_set_of_series

    @binding_for_set_of_series.setter
    def binding_for_set_of_series(self, binding_for_set_of_series):
        """
        Sets the binding_for_set_of_series of this MetricsBinding.

        :param binding_for_set_of_series: The binding_for_set_of_series of this MetricsBinding.
        :type: dict(str, MetricsBindingForSetOfSeries)
        """

        self._binding_for_set_of_series = binding_for_set_of_series

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MetricsBinding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
