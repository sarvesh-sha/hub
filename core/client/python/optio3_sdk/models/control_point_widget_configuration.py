# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class ControlPointWidgetConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, size=None, name=None, description=None, locations=None, refresh_rate_in_seconds=None, manual_font_scaling=None, font_multiplier=None, toolbar_behavior=None, point_id=None, point_input=None, name_enabled=None, name_display=None, name_alignment=None, value_enabled=None, value_units=None, value_units_enabled=None, value_precision=None, value_alignment=None, timestamp_enabled=None, timestamp_format=None, timestamp_alignment=None, color=None):
        """
        ControlPointWidgetConfiguration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'size': 'int',
            'name': 'str',
            'description': 'str',
            'locations': 'list[str]',
            'refresh_rate_in_seconds': 'int',
            'manual_font_scaling': 'bool',
            'font_multiplier': 'float',
            'toolbar_behavior': 'str',
            'point_id': 'str',
            'point_input': 'AssetGraphBinding',
            'name_enabled': 'bool',
            'name_display': 'str',
            'name_alignment': 'str',
            'value_enabled': 'bool',
            'value_units': 'EngineeringUnitsFactors',
            'value_units_enabled': 'bool',
            'value_precision': 'int',
            'value_alignment': 'str',
            'timestamp_enabled': 'bool',
            'timestamp_format': 'str',
            'timestamp_alignment': 'str',
            'color': 'ColorConfiguration',
            'discriminator___type': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'size': 'size',
            'name': 'name',
            'description': 'description',
            'locations': 'locations',
            'refresh_rate_in_seconds': 'refreshRateInSeconds',
            'manual_font_scaling': 'manualFontScaling',
            'font_multiplier': 'fontMultiplier',
            'toolbar_behavior': 'toolbarBehavior',
            'point_id': 'pointId',
            'point_input': 'pointInput',
            'name_enabled': 'nameEnabled',
            'name_display': 'nameDisplay',
            'name_alignment': 'nameAlignment',
            'value_enabled': 'valueEnabled',
            'value_units': 'valueUnits',
            'value_units_enabled': 'valueUnitsEnabled',
            'value_precision': 'valuePrecision',
            'value_alignment': 'valueAlignment',
            'timestamp_enabled': 'timestampEnabled',
            'timestamp_format': 'timestampFormat',
            'timestamp_alignment': 'timestampAlignment',
            'color': 'color',
            'discriminator___type': '__type'
        }

        self._id = id
        self._size = size
        self._name = name
        self._description = description
        self._locations = locations
        self._refresh_rate_in_seconds = refresh_rate_in_seconds
        self._manual_font_scaling = manual_font_scaling
        self._font_multiplier = font_multiplier
        self._toolbar_behavior = toolbar_behavior
        self._point_id = point_id
        self._point_input = point_input
        self._name_enabled = name_enabled
        self._name_display = name_display
        self._name_alignment = name_alignment
        self._value_enabled = value_enabled
        self._value_units = value_units
        self._value_units_enabled = value_units_enabled
        self._value_precision = value_precision
        self._value_alignment = value_alignment
        self._timestamp_enabled = timestamp_enabled
        self._timestamp_format = timestamp_format
        self._timestamp_alignment = timestamp_alignment
        self._color = color

    @property
    def discriminator___type(self):
        return "ControlPointWidgetConfiguration"

    @discriminator___type.setter
    def discriminator___type(self, discriminator):
        # Don't need to do anything
        return

    @property
    def id(self):
        """
        Gets the id of this ControlPointWidgetConfiguration.

        :return: The id of this ControlPointWidgetConfiguration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ControlPointWidgetConfiguration.

        :param id: The id of this ControlPointWidgetConfiguration.
        :type: str
        """

        self._id = id

    @property
    def size(self):
        """
        Gets the size of this ControlPointWidgetConfiguration.

        :return: The size of this ControlPointWidgetConfiguration.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this ControlPointWidgetConfiguration.

        :param size: The size of this ControlPointWidgetConfiguration.
        :type: int
        """

        self._size = size

    @property
    def name(self):
        """
        Gets the name of this ControlPointWidgetConfiguration.

        :return: The name of this ControlPointWidgetConfiguration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ControlPointWidgetConfiguration.

        :param name: The name of this ControlPointWidgetConfiguration.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this ControlPointWidgetConfiguration.

        :return: The description of this ControlPointWidgetConfiguration.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ControlPointWidgetConfiguration.

        :param description: The description of this ControlPointWidgetConfiguration.
        :type: str
        """

        self._description = description

    @property
    def locations(self):
        """
        Gets the locations of this ControlPointWidgetConfiguration.

        :return: The locations of this ControlPointWidgetConfiguration.
        :rtype: list[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """
        Sets the locations of this ControlPointWidgetConfiguration.

        :param locations: The locations of this ControlPointWidgetConfiguration.
        :type: list[str]
        """

        self._locations = locations

    @property
    def refresh_rate_in_seconds(self):
        """
        Gets the refresh_rate_in_seconds of this ControlPointWidgetConfiguration.

        :return: The refresh_rate_in_seconds of this ControlPointWidgetConfiguration.
        :rtype: int
        """
        return self._refresh_rate_in_seconds

    @refresh_rate_in_seconds.setter
    def refresh_rate_in_seconds(self, refresh_rate_in_seconds):
        """
        Sets the refresh_rate_in_seconds of this ControlPointWidgetConfiguration.

        :param refresh_rate_in_seconds: The refresh_rate_in_seconds of this ControlPointWidgetConfiguration.
        :type: int
        """

        self._refresh_rate_in_seconds = refresh_rate_in_seconds

    @property
    def manual_font_scaling(self):
        """
        Gets the manual_font_scaling of this ControlPointWidgetConfiguration.

        :return: The manual_font_scaling of this ControlPointWidgetConfiguration.
        :rtype: bool
        """
        return self._manual_font_scaling

    @manual_font_scaling.setter
    def manual_font_scaling(self, manual_font_scaling):
        """
        Sets the manual_font_scaling of this ControlPointWidgetConfiguration.

        :param manual_font_scaling: The manual_font_scaling of this ControlPointWidgetConfiguration.
        :type: bool
        """

        self._manual_font_scaling = manual_font_scaling

    @property
    def font_multiplier(self):
        """
        Gets the font_multiplier of this ControlPointWidgetConfiguration.

        :return: The font_multiplier of this ControlPointWidgetConfiguration.
        :rtype: float
        """
        return self._font_multiplier

    @font_multiplier.setter
    def font_multiplier(self, font_multiplier):
        """
        Sets the font_multiplier of this ControlPointWidgetConfiguration.

        :param font_multiplier: The font_multiplier of this ControlPointWidgetConfiguration.
        :type: float
        """

        self._font_multiplier = font_multiplier

    @property
    def toolbar_behavior(self):
        """
        Gets the toolbar_behavior of this ControlPointWidgetConfiguration.

        :return: The toolbar_behavior of this ControlPointWidgetConfiguration.
        :rtype: str
        """
        return self._toolbar_behavior

    @toolbar_behavior.setter
    def toolbar_behavior(self, toolbar_behavior):
        """
        Sets the toolbar_behavior of this ControlPointWidgetConfiguration.

        :param toolbar_behavior: The toolbar_behavior of this ControlPointWidgetConfiguration.
        :type: str
        """
        allowed_values = ["AlwaysShow", "AutoHide", "Collapsible", "Hide"]
        if toolbar_behavior is not None and toolbar_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `toolbar_behavior` ({0}), must be one of {1}"
                .format(toolbar_behavior, allowed_values)
            )

        self._toolbar_behavior = toolbar_behavior

    @property
    def point_id(self):
        """
        Gets the point_id of this ControlPointWidgetConfiguration.

        :return: The point_id of this ControlPointWidgetConfiguration.
        :rtype: str
        """
        return self._point_id

    @point_id.setter
    def point_id(self, point_id):
        """
        Sets the point_id of this ControlPointWidgetConfiguration.

        :param point_id: The point_id of this ControlPointWidgetConfiguration.
        :type: str
        """

        self._point_id = point_id

    @property
    def point_input(self):
        """
        Gets the point_input of this ControlPointWidgetConfiguration.

        :return: The point_input of this ControlPointWidgetConfiguration.
        :rtype: AssetGraphBinding
        """
        return self._point_input

    @point_input.setter
    def point_input(self, point_input):
        """
        Sets the point_input of this ControlPointWidgetConfiguration.

        :param point_input: The point_input of this ControlPointWidgetConfiguration.
        :type: AssetGraphBinding
        """

        self._point_input = point_input

    @property
    def name_enabled(self):
        """
        Gets the name_enabled of this ControlPointWidgetConfiguration.

        :return: The name_enabled of this ControlPointWidgetConfiguration.
        :rtype: bool
        """
        return self._name_enabled

    @name_enabled.setter
    def name_enabled(self, name_enabled):
        """
        Sets the name_enabled of this ControlPointWidgetConfiguration.

        :param name_enabled: The name_enabled of this ControlPointWidgetConfiguration.
        :type: bool
        """

        self._name_enabled = name_enabled

    @property
    def name_display(self):
        """
        Gets the name_display of this ControlPointWidgetConfiguration.

        :return: The name_display of this ControlPointWidgetConfiguration.
        :rtype: str
        """
        return self._name_display

    @name_display.setter
    def name_display(self, name_display):
        """
        Sets the name_display of this ControlPointWidgetConfiguration.

        :param name_display: The name_display of this ControlPointWidgetConfiguration.
        :type: str
        """
        allowed_values = ["NameOnly", "LocationOnly", "FullLocationOnly", "EquipmentOnly", "NameLocation", "LocationName", "NameFullLocation", "FullLocationName", "NameEquipment", "EquipmentName"]
        if name_display is not None and name_display not in allowed_values:
            raise ValueError(
                "Invalid value for `name_display` ({0}), must be one of {1}"
                .format(name_display, allowed_values)
            )

        self._name_display = name_display

    @property
    def name_alignment(self):
        """
        Gets the name_alignment of this ControlPointWidgetConfiguration.

        :return: The name_alignment of this ControlPointWidgetConfiguration.
        :rtype: str
        """
        return self._name_alignment

    @name_alignment.setter
    def name_alignment(self, name_alignment):
        """
        Sets the name_alignment of this ControlPointWidgetConfiguration.

        :param name_alignment: The name_alignment of this ControlPointWidgetConfiguration.
        :type: str
        """
        allowed_values = ["Left", "Center", "Right"]
        if name_alignment is not None and name_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `name_alignment` ({0}), must be one of {1}"
                .format(name_alignment, allowed_values)
            )

        self._name_alignment = name_alignment

    @property
    def value_enabled(self):
        """
        Gets the value_enabled of this ControlPointWidgetConfiguration.

        :return: The value_enabled of this ControlPointWidgetConfiguration.
        :rtype: bool
        """
        return self._value_enabled

    @value_enabled.setter
    def value_enabled(self, value_enabled):
        """
        Sets the value_enabled of this ControlPointWidgetConfiguration.

        :param value_enabled: The value_enabled of this ControlPointWidgetConfiguration.
        :type: bool
        """

        self._value_enabled = value_enabled

    @property
    def value_units(self):
        """
        Gets the value_units of this ControlPointWidgetConfiguration.

        :return: The value_units of this ControlPointWidgetConfiguration.
        :rtype: EngineeringUnitsFactors
        """
        return self._value_units

    @value_units.setter
    def value_units(self, value_units):
        """
        Sets the value_units of this ControlPointWidgetConfiguration.

        :param value_units: The value_units of this ControlPointWidgetConfiguration.
        :type: EngineeringUnitsFactors
        """

        self._value_units = value_units

    @property
    def value_units_enabled(self):
        """
        Gets the value_units_enabled of this ControlPointWidgetConfiguration.

        :return: The value_units_enabled of this ControlPointWidgetConfiguration.
        :rtype: bool
        """
        return self._value_units_enabled

    @value_units_enabled.setter
    def value_units_enabled(self, value_units_enabled):
        """
        Sets the value_units_enabled of this ControlPointWidgetConfiguration.

        :param value_units_enabled: The value_units_enabled of this ControlPointWidgetConfiguration.
        :type: bool
        """

        self._value_units_enabled = value_units_enabled

    @property
    def value_precision(self):
        """
        Gets the value_precision of this ControlPointWidgetConfiguration.

        :return: The value_precision of this ControlPointWidgetConfiguration.
        :rtype: int
        """
        return self._value_precision

    @value_precision.setter
    def value_precision(self, value_precision):
        """
        Sets the value_precision of this ControlPointWidgetConfiguration.

        :param value_precision: The value_precision of this ControlPointWidgetConfiguration.
        :type: int
        """

        self._value_precision = value_precision

    @property
    def value_alignment(self):
        """
        Gets the value_alignment of this ControlPointWidgetConfiguration.

        :return: The value_alignment of this ControlPointWidgetConfiguration.
        :rtype: str
        """
        return self._value_alignment

    @value_alignment.setter
    def value_alignment(self, value_alignment):
        """
        Sets the value_alignment of this ControlPointWidgetConfiguration.

        :param value_alignment: The value_alignment of this ControlPointWidgetConfiguration.
        :type: str
        """
        allowed_values = ["Left", "Center", "Right"]
        if value_alignment is not None and value_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `value_alignment` ({0}), must be one of {1}"
                .format(value_alignment, allowed_values)
            )

        self._value_alignment = value_alignment

    @property
    def timestamp_enabled(self):
        """
        Gets the timestamp_enabled of this ControlPointWidgetConfiguration.

        :return: The timestamp_enabled of this ControlPointWidgetConfiguration.
        :rtype: bool
        """
        return self._timestamp_enabled

    @timestamp_enabled.setter
    def timestamp_enabled(self, timestamp_enabled):
        """
        Sets the timestamp_enabled of this ControlPointWidgetConfiguration.

        :param timestamp_enabled: The timestamp_enabled of this ControlPointWidgetConfiguration.
        :type: bool
        """

        self._timestamp_enabled = timestamp_enabled

    @property
    def timestamp_format(self):
        """
        Gets the timestamp_format of this ControlPointWidgetConfiguration.

        :return: The timestamp_format of this ControlPointWidgetConfiguration.
        :rtype: str
        """
        return self._timestamp_format

    @timestamp_format.setter
    def timestamp_format(self, timestamp_format):
        """
        Sets the timestamp_format of this ControlPointWidgetConfiguration.

        :param timestamp_format: The timestamp_format of this ControlPointWidgetConfiguration.
        :type: str
        """

        self._timestamp_format = timestamp_format

    @property
    def timestamp_alignment(self):
        """
        Gets the timestamp_alignment of this ControlPointWidgetConfiguration.

        :return: The timestamp_alignment of this ControlPointWidgetConfiguration.
        :rtype: str
        """
        return self._timestamp_alignment

    @timestamp_alignment.setter
    def timestamp_alignment(self, timestamp_alignment):
        """
        Sets the timestamp_alignment of this ControlPointWidgetConfiguration.

        :param timestamp_alignment: The timestamp_alignment of this ControlPointWidgetConfiguration.
        :type: str
        """
        allowed_values = ["Left", "Center", "Right"]
        if timestamp_alignment is not None and timestamp_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `timestamp_alignment` ({0}), must be one of {1}"
                .format(timestamp_alignment, allowed_values)
            )

        self._timestamp_alignment = timestamp_alignment

    @property
    def color(self):
        """
        Gets the color of this ControlPointWidgetConfiguration.

        :return: The color of this ControlPointWidgetConfiguration.
        :rtype: ColorConfiguration
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this ControlPointWidgetConfiguration.

        :param color: The color of this ControlPointWidgetConfiguration.
        :type: ColorConfiguration
        """

        self._color = color

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ControlPointWidgetConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

