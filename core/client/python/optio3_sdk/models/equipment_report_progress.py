# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class EquipmentReportProgress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, status=None, report=None, total_equipment=None, equipment_processed=None, generating_file=None):
        """
        EquipmentReportProgress - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'status': 'str',
            'report': 'list[str]',
            'total_equipment': 'int',
            'equipment_processed': 'int',
            'generating_file': 'bool'
        }

        self.attribute_map = {
            'status': 'status',
            'report': 'report',
            'total_equipment': 'totalEquipment',
            'equipment_processed': 'equipmentProcessed',
            'generating_file': 'generatingFile'
        }

        self._status = status
        self._report = report
        self._total_equipment = total_equipment
        self._equipment_processed = equipment_processed
        self._generating_file = generating_file


    @property
    def status(self):
        """
        Gets the status of this EquipmentReportProgress.

        :return: The status of this EquipmentReportProgress.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this EquipmentReportProgress.

        :param status: The status of this EquipmentReportProgress.
        :type: str
        """
        allowed_values = ["ACTIVE", "ACTIVE_BUT_CANCELLING", "PAUSED", "PAUSED_BUT_CANCELLING", "WAITING", "WAITING_BUT_CANCELLING", "SLEEPING", "SLEEPING_BUT_CANCELLIN", "EXECUTING", "EXECUTING_BUT_CANCELLING", "CANCELLED", "COMPLETED", "FAILED"]
        if status is not None and status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def report(self):
        """
        Gets the report of this EquipmentReportProgress.

        :return: The report of this EquipmentReportProgress.
        :rtype: list[str]
        """
        return self._report

    @report.setter
    def report(self, report):
        """
        Sets the report of this EquipmentReportProgress.

        :param report: The report of this EquipmentReportProgress.
        :type: list[str]
        """

        self._report = report

    @property
    def total_equipment(self):
        """
        Gets the total_equipment of this EquipmentReportProgress.

        :return: The total_equipment of this EquipmentReportProgress.
        :rtype: int
        """
        return self._total_equipment

    @total_equipment.setter
    def total_equipment(self, total_equipment):
        """
        Sets the total_equipment of this EquipmentReportProgress.

        :param total_equipment: The total_equipment of this EquipmentReportProgress.
        :type: int
        """

        self._total_equipment = total_equipment

    @property
    def equipment_processed(self):
        """
        Gets the equipment_processed of this EquipmentReportProgress.

        :return: The equipment_processed of this EquipmentReportProgress.
        :rtype: int
        """
        return self._equipment_processed

    @equipment_processed.setter
    def equipment_processed(self, equipment_processed):
        """
        Sets the equipment_processed of this EquipmentReportProgress.

        :param equipment_processed: The equipment_processed of this EquipmentReportProgress.
        :type: int
        """

        self._equipment_processed = equipment_processed

    @property
    def generating_file(self):
        """
        Gets the generating_file of this EquipmentReportProgress.

        :return: The generating_file of this EquipmentReportProgress.
        :rtype: bool
        """
        return self._generating_file

    @generating_file.setter
    def generating_file(self, generating_file):
        """
        Sets the generating_file of this EquipmentReportProgress.

        :param generating_file: The generating_file of this EquipmentReportProgress.
        :type: bool
        """

        self._generating_file = generating_file

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EquipmentReportProgress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

