# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class TimeSeriesMultiPropertyRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, max_samples=None, max_gap_between_samples=None, skip_missing=None, range_start=None, range_end=None, specs=None, max_interpolation_gap=None, delta_encode=None):
        """
        TimeSeriesMultiPropertyRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'max_samples': 'int',
            'max_gap_between_samples': 'int',
            'skip_missing': 'bool',
            'range_start': 'datetime',
            'range_end': 'datetime',
            'specs': 'list[TimeSeriesPropertyRequest]',
            'max_interpolation_gap': 'float',
            'delta_encode': 'bool'
        }

        self.attribute_map = {
            'max_samples': 'maxSamples',
            'max_gap_between_samples': 'maxGapBetweenSamples',
            'skip_missing': 'skipMissing',
            'range_start': 'rangeStart',
            'range_end': 'rangeEnd',
            'specs': 'specs',
            'max_interpolation_gap': 'maxInterpolationGap',
            'delta_encode': 'deltaEncode'
        }

        self._max_samples = max_samples
        self._max_gap_between_samples = max_gap_between_samples
        self._skip_missing = skip_missing
        self._range_start = range_start
        self._range_end = range_end
        self._specs = specs
        self._max_interpolation_gap = max_interpolation_gap
        self._delta_encode = delta_encode


    @property
    def max_samples(self):
        """
        Gets the max_samples of this TimeSeriesMultiPropertyRequest.

        :return: The max_samples of this TimeSeriesMultiPropertyRequest.
        :rtype: int
        """
        return self._max_samples

    @max_samples.setter
    def max_samples(self, max_samples):
        """
        Sets the max_samples of this TimeSeriesMultiPropertyRequest.

        :param max_samples: The max_samples of this TimeSeriesMultiPropertyRequest.
        :type: int
        """

        self._max_samples = max_samples

    @property
    def max_gap_between_samples(self):
        """
        Gets the max_gap_between_samples of this TimeSeriesMultiPropertyRequest.

        :return: The max_gap_between_samples of this TimeSeriesMultiPropertyRequest.
        :rtype: int
        """
        return self._max_gap_between_samples

    @max_gap_between_samples.setter
    def max_gap_between_samples(self, max_gap_between_samples):
        """
        Sets the max_gap_between_samples of this TimeSeriesMultiPropertyRequest.

        :param max_gap_between_samples: The max_gap_between_samples of this TimeSeriesMultiPropertyRequest.
        :type: int
        """

        self._max_gap_between_samples = max_gap_between_samples

    @property
    def skip_missing(self):
        """
        Gets the skip_missing of this TimeSeriesMultiPropertyRequest.

        :return: The skip_missing of this TimeSeriesMultiPropertyRequest.
        :rtype: bool
        """
        return self._skip_missing

    @skip_missing.setter
    def skip_missing(self, skip_missing):
        """
        Sets the skip_missing of this TimeSeriesMultiPropertyRequest.

        :param skip_missing: The skip_missing of this TimeSeriesMultiPropertyRequest.
        :type: bool
        """

        self._skip_missing = skip_missing

    @property
    def range_start(self):
        """
        Gets the range_start of this TimeSeriesMultiPropertyRequest.

        :return: The range_start of this TimeSeriesMultiPropertyRequest.
        :rtype: datetime
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start):
        """
        Sets the range_start of this TimeSeriesMultiPropertyRequest.

        :param range_start: The range_start of this TimeSeriesMultiPropertyRequest.
        :type: datetime
        """

        self._range_start = range_start

    @property
    def range_end(self):
        """
        Gets the range_end of this TimeSeriesMultiPropertyRequest.

        :return: The range_end of this TimeSeriesMultiPropertyRequest.
        :rtype: datetime
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end):
        """
        Sets the range_end of this TimeSeriesMultiPropertyRequest.

        :param range_end: The range_end of this TimeSeriesMultiPropertyRequest.
        :type: datetime
        """

        self._range_end = range_end

    @property
    def specs(self):
        """
        Gets the specs of this TimeSeriesMultiPropertyRequest.

        :return: The specs of this TimeSeriesMultiPropertyRequest.
        :rtype: list[TimeSeriesPropertyRequest]
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """
        Sets the specs of this TimeSeriesMultiPropertyRequest.

        :param specs: The specs of this TimeSeriesMultiPropertyRequest.
        :type: list[TimeSeriesPropertyRequest]
        """

        self._specs = specs

    @property
    def max_interpolation_gap(self):
        """
        Gets the max_interpolation_gap of this TimeSeriesMultiPropertyRequest.

        :return: The max_interpolation_gap of this TimeSeriesMultiPropertyRequest.
        :rtype: float
        """
        return self._max_interpolation_gap

    @max_interpolation_gap.setter
    def max_interpolation_gap(self, max_interpolation_gap):
        """
        Sets the max_interpolation_gap of this TimeSeriesMultiPropertyRequest.

        :param max_interpolation_gap: The max_interpolation_gap of this TimeSeriesMultiPropertyRequest.
        :type: float
        """

        self._max_interpolation_gap = max_interpolation_gap

    @property
    def delta_encode(self):
        """
        Gets the delta_encode of this TimeSeriesMultiPropertyRequest.

        :return: The delta_encode of this TimeSeriesMultiPropertyRequest.
        :rtype: bool
        """
        return self._delta_encode

    @delta_encode.setter
    def delta_encode(self, delta_encode):
        """
        Sets the delta_encode of this TimeSeriesMultiPropertyRequest.

        :param delta_encode: The delta_encode of this TimeSeriesMultiPropertyRequest.
        :type: bool
        """

        self._delta_encode = delta_encode

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TimeSeriesMultiPropertyRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
