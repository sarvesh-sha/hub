# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class AssetGraphNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, optional=None, allow_multiple=None, condition=None):
        """
        AssetGraphNode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'optional': 'bool',
            'allow_multiple': 'bool',
            'condition': 'TagsCondition'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'optional': 'optional',
            'allow_multiple': 'allowMultiple',
            'condition': 'condition'
        }

        self._id = id
        self._name = name
        self._optional = optional
        self._allow_multiple = allow_multiple
        self._condition = condition


    @property
    def id(self):
        """
        Gets the id of this AssetGraphNode.

        :return: The id of this AssetGraphNode.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AssetGraphNode.

        :param id: The id of this AssetGraphNode.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this AssetGraphNode.

        :return: The name of this AssetGraphNode.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AssetGraphNode.

        :param name: The name of this AssetGraphNode.
        :type: str
        """

        self._name = name

    @property
    def optional(self):
        """
        Gets the optional of this AssetGraphNode.

        :return: The optional of this AssetGraphNode.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """
        Sets the optional of this AssetGraphNode.

        :param optional: The optional of this AssetGraphNode.
        :type: bool
        """

        self._optional = optional

    @property
    def allow_multiple(self):
        """
        Gets the allow_multiple of this AssetGraphNode.

        :return: The allow_multiple of this AssetGraphNode.
        :rtype: bool
        """
        return self._allow_multiple

    @allow_multiple.setter
    def allow_multiple(self, allow_multiple):
        """
        Sets the allow_multiple of this AssetGraphNode.

        :param allow_multiple: The allow_multiple of this AssetGraphNode.
        :type: bool
        """

        self._allow_multiple = allow_multiple

    @property
    def condition(self):
        """
        Gets the condition of this AssetGraphNode.

        :return: The condition of this AssetGraphNode.
        :rtype: TagsCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """
        Sets the condition of this AssetGraphNode.

        :param condition: The condition of this AssetGraphNode.
        :type: TagsCondition
        """

        self._condition = condition

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AssetGraphNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
