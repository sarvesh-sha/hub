# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class TimeSeriesSourceConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, uuid=None, id=None, dimension=None, color=None, show_moving_average=None, only_show_moving_average=None, show_decimation=None, axis=None, panel=None, range=None, time_offset=None, point_binding=None, decimation_display=None):
        """
        TimeSeriesSourceConfiguration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'uuid': 'str',
            'id': 'str',
            'dimension': 'str',
            'color': 'str',
            'show_moving_average': 'float',
            'only_show_moving_average': 'bool',
            'show_decimation': 'bool',
            'axis': 'int',
            'panel': 'int',
            'range': 'ToggleableNumericRange',
            'time_offset': 'TimeDuration',
            'point_binding': 'AssetGraphBinding',
            'decimation_display': 'str'
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'id': 'id',
            'dimension': 'dimension',
            'color': 'color',
            'show_moving_average': 'showMovingAverage',
            'only_show_moving_average': 'onlyShowMovingAverage',
            'show_decimation': 'showDecimation',
            'axis': 'axis',
            'panel': 'panel',
            'range': 'range',
            'time_offset': 'timeOffset',
            'point_binding': 'pointBinding',
            'decimation_display': 'decimationDisplay'
        }

        self._uuid = uuid
        self._id = id
        self._dimension = dimension
        self._color = color
        self._show_moving_average = show_moving_average
        self._only_show_moving_average = only_show_moving_average
        self._show_decimation = show_decimation
        self._axis = axis
        self._panel = panel
        self._range = range
        self._time_offset = time_offset
        self._point_binding = point_binding
        self._decimation_display = decimation_display


    @property
    def uuid(self):
        """
        Gets the uuid of this TimeSeriesSourceConfiguration.

        :return: The uuid of this TimeSeriesSourceConfiguration.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this TimeSeriesSourceConfiguration.

        :param uuid: The uuid of this TimeSeriesSourceConfiguration.
        :type: str
        """

        self._uuid = uuid

    @property
    def id(self):
        """
        Gets the id of this TimeSeriesSourceConfiguration.

        :return: The id of this TimeSeriesSourceConfiguration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TimeSeriesSourceConfiguration.

        :param id: The id of this TimeSeriesSourceConfiguration.
        :type: str
        """

        self._id = id

    @property
    def dimension(self):
        """
        Gets the dimension of this TimeSeriesSourceConfiguration.

        :return: The dimension of this TimeSeriesSourceConfiguration.
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """
        Sets the dimension of this TimeSeriesSourceConfiguration.

        :param dimension: The dimension of this TimeSeriesSourceConfiguration.
        :type: str
        """

        self._dimension = dimension

    @property
    def color(self):
        """
        Gets the color of this TimeSeriesSourceConfiguration.

        :return: The color of this TimeSeriesSourceConfiguration.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this TimeSeriesSourceConfiguration.

        :param color: The color of this TimeSeriesSourceConfiguration.
        :type: str
        """

        self._color = color

    @property
    def show_moving_average(self):
        """
        Gets the show_moving_average of this TimeSeriesSourceConfiguration.

        :return: The show_moving_average of this TimeSeriesSourceConfiguration.
        :rtype: float
        """
        return self._show_moving_average

    @show_moving_average.setter
    def show_moving_average(self, show_moving_average):
        """
        Sets the show_moving_average of this TimeSeriesSourceConfiguration.

        :param show_moving_average: The show_moving_average of this TimeSeriesSourceConfiguration.
        :type: float
        """

        self._show_moving_average = show_moving_average

    @property
    def only_show_moving_average(self):
        """
        Gets the only_show_moving_average of this TimeSeriesSourceConfiguration.

        :return: The only_show_moving_average of this TimeSeriesSourceConfiguration.
        :rtype: bool
        """
        return self._only_show_moving_average

    @only_show_moving_average.setter
    def only_show_moving_average(self, only_show_moving_average):
        """
        Sets the only_show_moving_average of this TimeSeriesSourceConfiguration.

        :param only_show_moving_average: The only_show_moving_average of this TimeSeriesSourceConfiguration.
        :type: bool
        """

        self._only_show_moving_average = only_show_moving_average

    @property
    def show_decimation(self):
        """
        Gets the show_decimation of this TimeSeriesSourceConfiguration.

        :return: The show_decimation of this TimeSeriesSourceConfiguration.
        :rtype: bool
        """
        return self._show_decimation

    @show_decimation.setter
    def show_decimation(self, show_decimation):
        """
        Sets the show_decimation of this TimeSeriesSourceConfiguration.

        :param show_decimation: The show_decimation of this TimeSeriesSourceConfiguration.
        :type: bool
        """

        self._show_decimation = show_decimation

    @property
    def axis(self):
        """
        Gets the axis of this TimeSeriesSourceConfiguration.

        :return: The axis of this TimeSeriesSourceConfiguration.
        :rtype: int
        """
        return self._axis

    @axis.setter
    def axis(self, axis):
        """
        Sets the axis of this TimeSeriesSourceConfiguration.

        :param axis: The axis of this TimeSeriesSourceConfiguration.
        :type: int
        """

        self._axis = axis

    @property
    def panel(self):
        """
        Gets the panel of this TimeSeriesSourceConfiguration.

        :return: The panel of this TimeSeriesSourceConfiguration.
        :rtype: int
        """
        return self._panel

    @panel.setter
    def panel(self, panel):
        """
        Sets the panel of this TimeSeriesSourceConfiguration.

        :param panel: The panel of this TimeSeriesSourceConfiguration.
        :type: int
        """

        self._panel = panel

    @property
    def range(self):
        """
        Gets the range of this TimeSeriesSourceConfiguration.

        :return: The range of this TimeSeriesSourceConfiguration.
        :rtype: ToggleableNumericRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """
        Sets the range of this TimeSeriesSourceConfiguration.

        :param range: The range of this TimeSeriesSourceConfiguration.
        :type: ToggleableNumericRange
        """

        self._range = range

    @property
    def time_offset(self):
        """
        Gets the time_offset of this TimeSeriesSourceConfiguration.

        :return: The time_offset of this TimeSeriesSourceConfiguration.
        :rtype: TimeDuration
        """
        return self._time_offset

    @time_offset.setter
    def time_offset(self, time_offset):
        """
        Sets the time_offset of this TimeSeriesSourceConfiguration.

        :param time_offset: The time_offset of this TimeSeriesSourceConfiguration.
        :type: TimeDuration
        """

        self._time_offset = time_offset

    @property
    def point_binding(self):
        """
        Gets the point_binding of this TimeSeriesSourceConfiguration.

        :return: The point_binding of this TimeSeriesSourceConfiguration.
        :rtype: AssetGraphBinding
        """
        return self._point_binding

    @point_binding.setter
    def point_binding(self, point_binding):
        """
        Sets the point_binding of this TimeSeriesSourceConfiguration.

        :param point_binding: The point_binding of this TimeSeriesSourceConfiguration.
        :type: AssetGraphBinding
        """

        self._point_binding = point_binding

    @property
    def decimation_display(self):
        """
        Gets the decimation_display of this TimeSeriesSourceConfiguration.

        :return: The decimation_display of this TimeSeriesSourceConfiguration.
        :rtype: str
        """
        return self._decimation_display

    @decimation_display.setter
    def decimation_display(self, decimation_display):
        """
        Sets the decimation_display of this TimeSeriesSourceConfiguration.

        :param decimation_display: The decimation_display of this TimeSeriesSourceConfiguration.
        :type: str
        """
        allowed_values = ["Minimum", "Average", "Maximum"]
        if decimation_display is not None and decimation_display not in allowed_values:
            raise ValueError(
                "Invalid value for `decimation_display` ({0}), must be one of {1}"
                .format(decimation_display, allowed_values)
            )

        self._decimation_display = decimation_display

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TimeSeriesSourceConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

