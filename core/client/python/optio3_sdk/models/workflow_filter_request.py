# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class WorkflowFilterRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, version=None, start_offset=None, max_results=None, asset_ids=None, location_ids=None, location_inclusive=None, like_device_manufacturer_name=None, like_device_product_name=None, like_device_model_name=None, sort_by=None, evaluate_updated_on=None, range_start=None, range_end=None, like_filter=None, workflow_status_ids=None, workflow_type_ids=None, workflow_priority_ids=None, created_by_ids=None, assigned_to_ids=None):
        """
        WorkflowFilterRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'version': 'int',
            'start_offset': 'int',
            'max_results': 'int',
            'asset_ids': 'list[str]',
            'location_ids': 'list[str]',
            'location_inclusive': 'bool',
            'like_device_manufacturer_name': 'str',
            'like_device_product_name': 'str',
            'like_device_model_name': 'str',
            'sort_by': 'list[SortCriteria]',
            'evaluate_updated_on': 'bool',
            'range_start': 'datetime',
            'range_end': 'datetime',
            'like_filter': 'str',
            'workflow_status_ids': 'list[str]',
            'workflow_type_ids': 'list[str]',
            'workflow_priority_ids': 'list[str]',
            'created_by_ids': 'list[str]',
            'assigned_to_ids': 'list[str]',
            'discriminator___type': 'str'
        }

        self.attribute_map = {
            'version': 'version',
            'start_offset': 'startOffset',
            'max_results': 'maxResults',
            'asset_ids': 'assetIDs',
            'location_ids': 'locationIDs',
            'location_inclusive': 'locationInclusive',
            'like_device_manufacturer_name': 'likeDeviceManufacturerName',
            'like_device_product_name': 'likeDeviceProductName',
            'like_device_model_name': 'likeDeviceModelName',
            'sort_by': 'sortBy',
            'evaluate_updated_on': 'evaluateUpdatedOn',
            'range_start': 'rangeStart',
            'range_end': 'rangeEnd',
            'like_filter': 'likeFilter',
            'workflow_status_ids': 'workflowStatusIDs',
            'workflow_type_ids': 'workflowTypeIDs',
            'workflow_priority_ids': 'workflowPriorityIDs',
            'created_by_ids': 'createdByIDs',
            'assigned_to_ids': 'assignedToIDs',
            'discriminator___type': '__type'
        }

        self._version = version
        self._start_offset = start_offset
        self._max_results = max_results
        self._asset_ids = asset_ids
        self._location_ids = location_ids
        self._location_inclusive = location_inclusive
        self._like_device_manufacturer_name = like_device_manufacturer_name
        self._like_device_product_name = like_device_product_name
        self._like_device_model_name = like_device_model_name
        self._sort_by = sort_by
        self._evaluate_updated_on = evaluate_updated_on
        self._range_start = range_start
        self._range_end = range_end
        self._like_filter = like_filter
        self._workflow_status_ids = workflow_status_ids
        self._workflow_type_ids = workflow_type_ids
        self._workflow_priority_ids = workflow_priority_ids
        self._created_by_ids = created_by_ids
        self._assigned_to_ids = assigned_to_ids

    @property
    def discriminator___type(self):
        return "WorkflowFilterRequest"

    @discriminator___type.setter
    def discriminator___type(self, discriminator):
        # Don't need to do anything
        return

    @property
    def version(self):
        """
        Gets the version of this WorkflowFilterRequest.

        :return: The version of this WorkflowFilterRequest.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this WorkflowFilterRequest.

        :param version: The version of this WorkflowFilterRequest.
        :type: int
        """

        self._version = version

    @property
    def start_offset(self):
        """
        Gets the start_offset of this WorkflowFilterRequest.

        :return: The start_offset of this WorkflowFilterRequest.
        :rtype: int
        """
        return self._start_offset

    @start_offset.setter
    def start_offset(self, start_offset):
        """
        Sets the start_offset of this WorkflowFilterRequest.

        :param start_offset: The start_offset of this WorkflowFilterRequest.
        :type: int
        """

        self._start_offset = start_offset

    @property
    def max_results(self):
        """
        Gets the max_results of this WorkflowFilterRequest.

        :return: The max_results of this WorkflowFilterRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """
        Sets the max_results of this WorkflowFilterRequest.

        :param max_results: The max_results of this WorkflowFilterRequest.
        :type: int
        """

        self._max_results = max_results

    @property
    def asset_ids(self):
        """
        Gets the asset_ids of this WorkflowFilterRequest.

        :return: The asset_ids of this WorkflowFilterRequest.
        :rtype: list[str]
        """
        return self._asset_ids

    @asset_ids.setter
    def asset_ids(self, asset_ids):
        """
        Sets the asset_ids of this WorkflowFilterRequest.

        :param asset_ids: The asset_ids of this WorkflowFilterRequest.
        :type: list[str]
        """

        self._asset_ids = asset_ids

    @property
    def location_ids(self):
        """
        Gets the location_ids of this WorkflowFilterRequest.

        :return: The location_ids of this WorkflowFilterRequest.
        :rtype: list[str]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """
        Sets the location_ids of this WorkflowFilterRequest.

        :param location_ids: The location_ids of this WorkflowFilterRequest.
        :type: list[str]
        """

        self._location_ids = location_ids

    @property
    def location_inclusive(self):
        """
        Gets the location_inclusive of this WorkflowFilterRequest.

        :return: The location_inclusive of this WorkflowFilterRequest.
        :rtype: bool
        """
        return self._location_inclusive

    @location_inclusive.setter
    def location_inclusive(self, location_inclusive):
        """
        Sets the location_inclusive of this WorkflowFilterRequest.

        :param location_inclusive: The location_inclusive of this WorkflowFilterRequest.
        :type: bool
        """

        self._location_inclusive = location_inclusive

    @property
    def like_device_manufacturer_name(self):
        """
        Gets the like_device_manufacturer_name of this WorkflowFilterRequest.

        :return: The like_device_manufacturer_name of this WorkflowFilterRequest.
        :rtype: str
        """
        return self._like_device_manufacturer_name

    @like_device_manufacturer_name.setter
    def like_device_manufacturer_name(self, like_device_manufacturer_name):
        """
        Sets the like_device_manufacturer_name of this WorkflowFilterRequest.

        :param like_device_manufacturer_name: The like_device_manufacturer_name of this WorkflowFilterRequest.
        :type: str
        """

        self._like_device_manufacturer_name = like_device_manufacturer_name

    @property
    def like_device_product_name(self):
        """
        Gets the like_device_product_name of this WorkflowFilterRequest.

        :return: The like_device_product_name of this WorkflowFilterRequest.
        :rtype: str
        """
        return self._like_device_product_name

    @like_device_product_name.setter
    def like_device_product_name(self, like_device_product_name):
        """
        Sets the like_device_product_name of this WorkflowFilterRequest.

        :param like_device_product_name: The like_device_product_name of this WorkflowFilterRequest.
        :type: str
        """

        self._like_device_product_name = like_device_product_name

    @property
    def like_device_model_name(self):
        """
        Gets the like_device_model_name of this WorkflowFilterRequest.

        :return: The like_device_model_name of this WorkflowFilterRequest.
        :rtype: str
        """
        return self._like_device_model_name

    @like_device_model_name.setter
    def like_device_model_name(self, like_device_model_name):
        """
        Sets the like_device_model_name of this WorkflowFilterRequest.

        :param like_device_model_name: The like_device_model_name of this WorkflowFilterRequest.
        :type: str
        """

        self._like_device_model_name = like_device_model_name

    @property
    def sort_by(self):
        """
        Gets the sort_by of this WorkflowFilterRequest.

        :return: The sort_by of this WorkflowFilterRequest.
        :rtype: list[SortCriteria]
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """
        Sets the sort_by of this WorkflowFilterRequest.

        :param sort_by: The sort_by of this WorkflowFilterRequest.
        :type: list[SortCriteria]
        """

        self._sort_by = sort_by

    @property
    def evaluate_updated_on(self):
        """
        Gets the evaluate_updated_on of this WorkflowFilterRequest.

        :return: The evaluate_updated_on of this WorkflowFilterRequest.
        :rtype: bool
        """
        return self._evaluate_updated_on

    @evaluate_updated_on.setter
    def evaluate_updated_on(self, evaluate_updated_on):
        """
        Sets the evaluate_updated_on of this WorkflowFilterRequest.

        :param evaluate_updated_on: The evaluate_updated_on of this WorkflowFilterRequest.
        :type: bool
        """

        self._evaluate_updated_on = evaluate_updated_on

    @property
    def range_start(self):
        """
        Gets the range_start of this WorkflowFilterRequest.

        :return: The range_start of this WorkflowFilterRequest.
        :rtype: datetime
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start):
        """
        Sets the range_start of this WorkflowFilterRequest.

        :param range_start: The range_start of this WorkflowFilterRequest.
        :type: datetime
        """

        self._range_start = range_start

    @property
    def range_end(self):
        """
        Gets the range_end of this WorkflowFilterRequest.

        :return: The range_end of this WorkflowFilterRequest.
        :rtype: datetime
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end):
        """
        Sets the range_end of this WorkflowFilterRequest.

        :param range_end: The range_end of this WorkflowFilterRequest.
        :type: datetime
        """

        self._range_end = range_end

    @property
    def like_filter(self):
        """
        Gets the like_filter of this WorkflowFilterRequest.

        :return: The like_filter of this WorkflowFilterRequest.
        :rtype: str
        """
        return self._like_filter

    @like_filter.setter
    def like_filter(self, like_filter):
        """
        Sets the like_filter of this WorkflowFilterRequest.

        :param like_filter: The like_filter of this WorkflowFilterRequest.
        :type: str
        """

        self._like_filter = like_filter

    @property
    def workflow_status_ids(self):
        """
        Gets the workflow_status_ids of this WorkflowFilterRequest.

        :return: The workflow_status_ids of this WorkflowFilterRequest.
        :rtype: list[str]
        """
        return self._workflow_status_ids

    @workflow_status_ids.setter
    def workflow_status_ids(self, workflow_status_ids):
        """
        Sets the workflow_status_ids of this WorkflowFilterRequest.

        :param workflow_status_ids: The workflow_status_ids of this WorkflowFilterRequest.
        :type: list[str]
        """
        allowed_values = ["Active", "Resolved", "Closed", "Disabling", "Disabled"]
        if not set(workflow_status_ids).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `workflow_status_ids` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(workflow_status_ids)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._workflow_status_ids = workflow_status_ids

    @property
    def workflow_type_ids(self):
        """
        Gets the workflow_type_ids of this WorkflowFilterRequest.

        :return: The workflow_type_ids of this WorkflowFilterRequest.
        :rtype: list[str]
        """
        return self._workflow_type_ids

    @workflow_type_ids.setter
    def workflow_type_ids(self, workflow_type_ids):
        """
        Sets the workflow_type_ids of this WorkflowFilterRequest.

        :param workflow_type_ids: The workflow_type_ids of this WorkflowFilterRequest.
        :type: list[str]
        """
        allowed_values = ["RenameControlPoint", "SamplingControlPoint", "SamplingPeriod", "HidingControlPoint", "AssignControlPointsToEquipment", "SetControlPointsClass", "IgnoreDevice", "RenameDevice", "SetDeviceLocation", "RenameEquipment", "RemoveEquipment", "MergeEquipments", "NewEquipment", "SetEquipmentClass", "SetEquipmentParent", "SetEquipmentLocation", "SetLocationParent"]
        if not set(workflow_type_ids).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `workflow_type_ids` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(workflow_type_ids)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._workflow_type_ids = workflow_type_ids

    @property
    def workflow_priority_ids(self):
        """
        Gets the workflow_priority_ids of this WorkflowFilterRequest.

        :return: The workflow_priority_ids of this WorkflowFilterRequest.
        :rtype: list[str]
        """
        return self._workflow_priority_ids

    @workflow_priority_ids.setter
    def workflow_priority_ids(self, workflow_priority_ids):
        """
        Sets the workflow_priority_ids of this WorkflowFilterRequest.

        :param workflow_priority_ids: The workflow_priority_ids of this WorkflowFilterRequest.
        :type: list[str]
        """
        allowed_values = ["Urgent", "High", "Normal", "Low"]
        if not set(workflow_priority_ids).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `workflow_priority_ids` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(workflow_priority_ids)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._workflow_priority_ids = workflow_priority_ids

    @property
    def created_by_ids(self):
        """
        Gets the created_by_ids of this WorkflowFilterRequest.

        :return: The created_by_ids of this WorkflowFilterRequest.
        :rtype: list[str]
        """
        return self._created_by_ids

    @created_by_ids.setter
    def created_by_ids(self, created_by_ids):
        """
        Sets the created_by_ids of this WorkflowFilterRequest.

        :param created_by_ids: The created_by_ids of this WorkflowFilterRequest.
        :type: list[str]
        """

        self._created_by_ids = created_by_ids

    @property
    def assigned_to_ids(self):
        """
        Gets the assigned_to_ids of this WorkflowFilterRequest.

        :return: The assigned_to_ids of this WorkflowFilterRequest.
        :rtype: list[str]
        """
        return self._assigned_to_ids

    @assigned_to_ids.setter
    def assigned_to_ids(self, assigned_to_ids):
        """
        Sets the assigned_to_ids of this WorkflowFilterRequest.

        :param assigned_to_ids: The assigned_to_ids of this WorkflowFilterRequest.
        :type: list[str]
        """

        self._assigned_to_ids = assigned_to_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowFilterRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

