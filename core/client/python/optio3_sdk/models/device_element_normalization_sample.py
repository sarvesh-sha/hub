# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class DeviceElementNormalizationSample(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, rules_id=None, rules=None, devices=None, details=None):
        """
        DeviceElementNormalizationSample - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'rules_id': 'str',
            'rules': 'NormalizationRules',
            'devices': 'list[RecordIdentity]',
            'details': 'ClassificationPointInputDetails'
        }

        self.attribute_map = {
            'rules_id': 'rulesId',
            'rules': 'rules',
            'devices': 'devices',
            'details': 'details'
        }

        self._rules_id = rules_id
        self._rules = rules
        self._devices = devices
        self._details = details


    @property
    def rules_id(self):
        """
        Gets the rules_id of this DeviceElementNormalizationSample.

        :return: The rules_id of this DeviceElementNormalizationSample.
        :rtype: str
        """
        return self._rules_id

    @rules_id.setter
    def rules_id(self, rules_id):
        """
        Sets the rules_id of this DeviceElementNormalizationSample.

        :param rules_id: The rules_id of this DeviceElementNormalizationSample.
        :type: str
        """

        self._rules_id = rules_id

    @property
    def rules(self):
        """
        Gets the rules of this DeviceElementNormalizationSample.

        :return: The rules of this DeviceElementNormalizationSample.
        :rtype: NormalizationRules
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """
        Sets the rules of this DeviceElementNormalizationSample.

        :param rules: The rules of this DeviceElementNormalizationSample.
        :type: NormalizationRules
        """

        self._rules = rules

    @property
    def devices(self):
        """
        Gets the devices of this DeviceElementNormalizationSample.

        :return: The devices of this DeviceElementNormalizationSample.
        :rtype: list[RecordIdentity]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """
        Sets the devices of this DeviceElementNormalizationSample.

        :param devices: The devices of this DeviceElementNormalizationSample.
        :type: list[RecordIdentity]
        """

        self._devices = devices

    @property
    def details(self):
        """
        Gets the details of this DeviceElementNormalizationSample.

        :return: The details of this DeviceElementNormalizationSample.
        :rtype: ClassificationPointInputDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this DeviceElementNormalizationSample.

        :param details: The details of this DeviceElementNormalizationSample.
        :type: ClassificationPointInputDetails
        """

        self._details = details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceElementNormalizationSample):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
