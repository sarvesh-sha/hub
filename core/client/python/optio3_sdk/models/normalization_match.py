# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class NormalizationMatch(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, reason=None, match=None, input=None, output=None):
        """
        NormalizationMatch - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'reason': 'str',
            'match': 'str',
            'input': 'str',
            'output': 'str'
        }

        self.attribute_map = {
            'reason': 'reason',
            'match': 'match',
            'input': 'input',
            'output': 'output'
        }

        self._reason = reason
        self._match = match
        self._input = input
        self._output = output


    @property
    def reason(self):
        """
        Gets the reason of this NormalizationMatch.

        :return: The reason of this NormalizationMatch.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this NormalizationMatch.

        :param reason: The reason of this NormalizationMatch.
        :type: str
        """
        allowed_values = ["Disambiguation", "Synonym", "Abbreviation", "Acronym", "StartsWith", "EndsWith", "Contains"]
        if reason is not None and reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def match(self):
        """
        Gets the match of this NormalizationMatch.

        :return: The match of this NormalizationMatch.
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """
        Sets the match of this NormalizationMatch.

        :param match: The match of this NormalizationMatch.
        :type: str
        """

        self._match = match

    @property
    def input(self):
        """
        Gets the input of this NormalizationMatch.

        :return: The input of this NormalizationMatch.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """
        Sets the input of this NormalizationMatch.

        :param input: The input of this NormalizationMatch.
        :type: str
        """

        self._input = input

    @property
    def output(self):
        """
        Gets the output of this NormalizationMatch.

        :return: The output of this NormalizationMatch.
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """
        Sets the output of this NormalizationMatch.

        :param output: The output of this NormalizationMatch.
        :type: str
        """

        self._output = output

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NormalizationMatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

