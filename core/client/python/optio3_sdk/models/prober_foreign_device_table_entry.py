# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class ProberForeignDeviceTableEntry(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, address=None, time_to_live=None, remaining_time_to_live=None):
        """
        ProberForeignDeviceTableEntry - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address': 'str',
            'time_to_live': 'int',
            'remaining_time_to_live': 'int'
        }

        self.attribute_map = {
            'address': 'address',
            'time_to_live': 'timeToLive',
            'remaining_time_to_live': 'remainingTimeToLive'
        }

        self._address = address
        self._time_to_live = time_to_live
        self._remaining_time_to_live = remaining_time_to_live


    @property
    def address(self):
        """
        Gets the address of this ProberForeignDeviceTableEntry.

        :return: The address of this ProberForeignDeviceTableEntry.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this ProberForeignDeviceTableEntry.

        :param address: The address of this ProberForeignDeviceTableEntry.
        :type: str
        """

        self._address = address

    @property
    def time_to_live(self):
        """
        Gets the time_to_live of this ProberForeignDeviceTableEntry.

        :return: The time_to_live of this ProberForeignDeviceTableEntry.
        :rtype: int
        """
        return self._time_to_live

    @time_to_live.setter
    def time_to_live(self, time_to_live):
        """
        Sets the time_to_live of this ProberForeignDeviceTableEntry.

        :param time_to_live: The time_to_live of this ProberForeignDeviceTableEntry.
        :type: int
        """

        self._time_to_live = time_to_live

    @property
    def remaining_time_to_live(self):
        """
        Gets the remaining_time_to_live of this ProberForeignDeviceTableEntry.

        :return: The remaining_time_to_live of this ProberForeignDeviceTableEntry.
        :rtype: int
        """
        return self._remaining_time_to_live

    @remaining_time_to_live.setter
    def remaining_time_to_live(self, remaining_time_to_live):
        """
        Sets the remaining_time_to_live of this ProberForeignDeviceTableEntry.

        :param remaining_time_to_live: The remaining_time_to_live of this ProberForeignDeviceTableEntry.
        :type: int
        """

        self._remaining_time_to_live = remaining_time_to_live

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProberForeignDeviceTableEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
