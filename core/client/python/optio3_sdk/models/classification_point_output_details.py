# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class ClassificationPointOutputDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, positive_score=None, negative_score=None, threshold=None, ignored=None, assigned_units=None, azure_digital_twin_model=None, sampling_period=None, no_sampling=None, reason=None, matching_dimensions=None):
        """
        ClassificationPointOutputDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'positive_score': 'float',
            'negative_score': 'float',
            'threshold': 'float',
            'ignored': 'bool',
            'assigned_units': 'str',
            'azure_digital_twin_model': 'str',
            'sampling_period': 'int',
            'no_sampling': 'bool',
            'reason': 'str',
            'matching_dimensions': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'positive_score': 'positiveScore',
            'negative_score': 'negativeScore',
            'threshold': 'threshold',
            'ignored': 'ignored',
            'assigned_units': 'assignedUnits',
            'azure_digital_twin_model': 'azureDigitalTwinModel',
            'sampling_period': 'samplingPeriod',
            'no_sampling': 'noSampling',
            'reason': 'reason',
            'matching_dimensions': 'matchingDimensions'
        }

        self._id = id
        self._positive_score = positive_score
        self._negative_score = negative_score
        self._threshold = threshold
        self._ignored = ignored
        self._assigned_units = assigned_units
        self._azure_digital_twin_model = azure_digital_twin_model
        self._sampling_period = sampling_period
        self._no_sampling = no_sampling
        self._reason = reason
        self._matching_dimensions = matching_dimensions


    @property
    def id(self):
        """
        Gets the id of this ClassificationPointOutputDetails.

        :return: The id of this ClassificationPointOutputDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ClassificationPointOutputDetails.

        :param id: The id of this ClassificationPointOutputDetails.
        :type: str
        """

        self._id = id

    @property
    def positive_score(self):
        """
        Gets the positive_score of this ClassificationPointOutputDetails.

        :return: The positive_score of this ClassificationPointOutputDetails.
        :rtype: float
        """
        return self._positive_score

    @positive_score.setter
    def positive_score(self, positive_score):
        """
        Sets the positive_score of this ClassificationPointOutputDetails.

        :param positive_score: The positive_score of this ClassificationPointOutputDetails.
        :type: float
        """

        self._positive_score = positive_score

    @property
    def negative_score(self):
        """
        Gets the negative_score of this ClassificationPointOutputDetails.

        :return: The negative_score of this ClassificationPointOutputDetails.
        :rtype: float
        """
        return self._negative_score

    @negative_score.setter
    def negative_score(self, negative_score):
        """
        Sets the negative_score of this ClassificationPointOutputDetails.

        :param negative_score: The negative_score of this ClassificationPointOutputDetails.
        :type: float
        """

        self._negative_score = negative_score

    @property
    def threshold(self):
        """
        Gets the threshold of this ClassificationPointOutputDetails.

        :return: The threshold of this ClassificationPointOutputDetails.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """
        Sets the threshold of this ClassificationPointOutputDetails.

        :param threshold: The threshold of this ClassificationPointOutputDetails.
        :type: float
        """

        self._threshold = threshold

    @property
    def ignored(self):
        """
        Gets the ignored of this ClassificationPointOutputDetails.

        :return: The ignored of this ClassificationPointOutputDetails.
        :rtype: bool
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """
        Sets the ignored of this ClassificationPointOutputDetails.

        :param ignored: The ignored of this ClassificationPointOutputDetails.
        :type: bool
        """

        self._ignored = ignored

    @property
    def assigned_units(self):
        """
        Gets the assigned_units of this ClassificationPointOutputDetails.

        :return: The assigned_units of this ClassificationPointOutputDetails.
        :rtype: str
        """
        return self._assigned_units

    @assigned_units.setter
    def assigned_units(self, assigned_units):
        """
        Sets the assigned_units of this ClassificationPointOutputDetails.

        :param assigned_units: The assigned_units of this ClassificationPointOutputDetails.
        :type: str
        """
        allowed_values = ["enumerated", "onOff", "activeInactive", "constant", "log", "meters", "nanometers", "micrometers", "millimeters", "centimeters", "kilometers", "inches", "feet", "miles", "seconds", "hundredths_seconds", "milliseconds", "minutes", "hours", "days", "weeks", "months", "years", "grams", "nanograms", "micrograms", "milligrams", "kilograms", "pounds_mass", "tons", "meters_per_second", "meters_per_minute", "meters_per_hour", "millimeters_per_second", "millimeters_per_minute", "millimeters_per_hour", "kilometers_per_hour", "feet_per_second", "feet_per_minute", "miles_per_hour", "knots", "longitude", "latitude", "meters_per_second_per_second", "millig", "cubic_meters", "cubic_feet", "liters", "milliliters", "imperial_gallons", "us_gallons", "cubic_feet_per_minute", "cubic_feet_per_second", "cubic_feet_per_hour", "cubic_feet_per_day", "thousand_cubic_feet_per_day", "standard_cubic_feet_per_day", "million_standard_cubic_feet_per_minute", "million_standard_cubic_feet_per_day", "thousand_standard_cubic_feet_per_day", "cubic_meters_per_minute", "cubic_meters_per_second", "cubic_meters_per_hour", "cubic_meters_per_day", "liters_per_second", "liters_per_minute", "liters_per_hour", "milliliters_per_second", "pounds_mass_per_day", "imperial_gallons_per_minute", "us_gallons_per_minute", "us_gallons_per_hour", "square_meters", "square_centimeters", "square_feet", "square_inches", "currency_dollar_US", "currency_dollar_Canadian", "currency_euro", "currency_generic", "amperes", "milliamperes", "kiloamperes", "megaamperes", "volts", "millivolts", "kilovolts", "megavolts", "watts", "milliwatts", "kilowatts", "megawatts", "amperes_per_meter", "amperes_per_square_meter", "ampere_square_meters", "ohms", "milliohms", "kilohms", "megohms", "ohm_meters", "ohm_meter_squared_per_meter", "siemens", "millisiemens", "microsiemens", "siemens_per_meter", "microsiemens_per_millimeter", "decibels", "decibels_milliwatts", "decibels_millivolt", "decibels_volt", "farads", "henrys", "teslas", "webers", "power_factor", "volt_amperes", "kilovolt_amperes", "megavolt_amperes", "volt_amperes_reactive", "kilovolt_amperes_reactive", "megavolt_amperes_reactive", "volts_per_meter", "volts_per_degree_kelvin", "degrees_phase", "ampere_seconds", "ampere_hours", "volt_ampere_hours", "kilovolt_ampere_hours", "megavolt_ampere_hours", "volt_ampere_hours_reactive", "kilovolt_ampere_hours_reactive", "megavolt_ampere_hours_reactive", "volt_square_hours", "ampere_square_hours", "joules", "kilojoules", "megajoules", "kilojoules_per_kilogram", "watt_hours", "kilowatt_hours", "megawatt_hours", "watt_hours_reactive", "kilowatt_hours_reactive", "megawatt_hours_reactive", "btus", "kilo_btus", "mega_btus", "therms", "ton_hours", "joules_per_kilogram_dry_air", "kilojoules_per_kilogram_dry_air", "megajoules_per_kilogram_dry_air", "btus_per_pound_dry_air", "btus_per_pound", "joules_per_degree_kelvin", "kilojoules_per_degree_kelvin", "megajoules_per_degree_kelvin", "joules_per_kilogram_degree_kelvin", "newton", "newton_meters", "hertz", "kilohertz", "megahertz", "cycles_per_minute", "cycles_per_hour", "per_hour", "per_minute", "per_second", "grams_of_water_per_kilogram_dry_air", "percent_relative_humidity", "watts_per_square_foot", "watts_per_square_meter", "milliwatts_per_square_centimeter", "candelas", "candelas_per_square_meter", "lumens", "luxes", "foot_candles", "grams_per_second", "grams_per_minute", "kilograms_per_second", "kilograms_per_minute", "kilograms_per_hour", "pounds_mass_per_second", "pounds_mass_per_minute", "pounds_mass_per_hour", "tons_per_hour", "btus_per_hour", "kilo_btus_per_hour", "joule_per_hours", "horsepower", "tons_refrigeration", "pascals", "hectopascals", "kilopascals", "megapascals", "millibars", "bars", "pounds_force_per_square_inch", "millimeters_of_water", "centimeters_of_water", "inches_of_water", "millimeters_of_mercury", "centimeters_of_mercury", "inches_of_mercury", "degrees_celsius", "degrees_kelvin", "degrees_fahrenheit", "degrees_kelvin_per_hour", "degrees_kelvin_per_minute", "degrees_celsius_per_hour", "degrees_celsius_per_minute", "degrees_fahrenheit_per_hour", "degrees_fahrenheit_per_minute", "degree_days_celsius", "degree_days_fahrenheit", "delta_degrees_kelvin", "delta_degrees_fahrenheit", "no_units", "ticks", "counts", "bytes", "kilo_bytes", "mega_bytes", "giga_bytes", "tera_bytes", "degrees_angular", "radians", "degrees_angular_per_second", "radians_per_second", "mole_percent", "percent", "per_mille", "percent_per_second", "percent_obscuration_per_meter", "percent_obscuration_per_foot", "parts_per_million", "parts_per_billion", "revolutions_per_minute", "joule_seconds", "newton_seconds", "newtons_per_meter", "pascal_seconds", "psi_per_degree_fahrenheit", "kilograms_per_cubic_meter", "kilometers_per_liter", "miles_per_us_gallon", "kilowatts_per_ton", "kilowatt_hours_per_square_meter", "kilowatt_hours_per_square_foot", "watt_hours_per_cubic_meter", "joules_per_cubic_meter", "megajoules_per_square_meter", "megajoules_per_square_foot", "square_meters_per_newton", "watts_per_meter_per_degree_kelvin", "watts_per_square_meter_degree_kelvin", "grams_per_gram", "kilograms_per_kilogram", "grams_per_kilogram", "milligrams_per_gram", "milligrams_per_kilogram", "grams_per_milliliter", "grams_per_liter", "grams_per_square_meter", "milligrams_per_liter", "micrograms_per_liter", "grams_per_cubic_meter", "milligrams_per_cubic_meter", "micrograms_per_cubic_meter", "nanograms_per_cubic_meter", "grams_per_cubic_centimeter", "becquerels", "kilobecquerels", "megabecquerels", "gray", "milligray", "microgray", "sieverts", "millisieverts", "microsieverts", "microsieverts_per_hour", "millirems", "millirems_per_hour", "decibels_a", "nephelometric_turbidity_unit", "pH", "minutes_per_degree_kelvin"]
        if assigned_units is not None and assigned_units not in allowed_values:
            raise ValueError(
                "Invalid value for `assigned_units` ({0}), must be one of {1}"
                .format(assigned_units, allowed_values)
            )

        self._assigned_units = assigned_units

    @property
    def azure_digital_twin_model(self):
        """
        Gets the azure_digital_twin_model of this ClassificationPointOutputDetails.

        :return: The azure_digital_twin_model of this ClassificationPointOutputDetails.
        :rtype: str
        """
        return self._azure_digital_twin_model

    @azure_digital_twin_model.setter
    def azure_digital_twin_model(self, azure_digital_twin_model):
        """
        Sets the azure_digital_twin_model of this ClassificationPointOutputDetails.

        :param azure_digital_twin_model: The azure_digital_twin_model of this ClassificationPointOutputDetails.
        :type: str
        """

        self._azure_digital_twin_model = azure_digital_twin_model

    @property
    def sampling_period(self):
        """
        Gets the sampling_period of this ClassificationPointOutputDetails.

        :return: The sampling_period of this ClassificationPointOutputDetails.
        :rtype: int
        """
        return self._sampling_period

    @sampling_period.setter
    def sampling_period(self, sampling_period):
        """
        Sets the sampling_period of this ClassificationPointOutputDetails.

        :param sampling_period: The sampling_period of this ClassificationPointOutputDetails.
        :type: int
        """

        self._sampling_period = sampling_period

    @property
    def no_sampling(self):
        """
        Gets the no_sampling of this ClassificationPointOutputDetails.

        :return: The no_sampling of this ClassificationPointOutputDetails.
        :rtype: bool
        """
        return self._no_sampling

    @no_sampling.setter
    def no_sampling(self, no_sampling):
        """
        Sets the no_sampling of this ClassificationPointOutputDetails.

        :param no_sampling: The no_sampling of this ClassificationPointOutputDetails.
        :type: bool
        """

        self._no_sampling = no_sampling

    @property
    def reason(self):
        """
        Gets the reason of this ClassificationPointOutputDetails.

        :return: The reason of this ClassificationPointOutputDetails.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this ClassificationPointOutputDetails.

        :param reason: The reason of this ClassificationPointOutputDetails.
        :type: str
        """
        allowed_values = ["Logic", "TermScoring", "RegEx", "TFIDFVectorModel", "Override"]
        if reason is not None and reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def matching_dimensions(self):
        """
        Gets the matching_dimensions of this ClassificationPointOutputDetails.

        :return: The matching_dimensions of this ClassificationPointOutputDetails.
        :rtype: list[str]
        """
        return self._matching_dimensions

    @matching_dimensions.setter
    def matching_dimensions(self, matching_dimensions):
        """
        Sets the matching_dimensions of this ClassificationPointOutputDetails.

        :param matching_dimensions: The matching_dimensions of this ClassificationPointOutputDetails.
        :type: list[str]
        """

        self._matching_dimensions = matching_dimensions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClassificationPointOutputDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

