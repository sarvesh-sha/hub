# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class AlertEngineValueAlert(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, control_point=None, record=None, timestamp=None, level=None, type=None, severity=None, status=None, status_text=None, title=None, description=None, should_notify=None):
        """
        AlertEngineValueAlert - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'control_point': 'RecordIdentity',
            'record': 'RecordIdentity',
            'timestamp': 'datetime',
            'level': 'str',
            'type': 'str',
            'severity': 'str',
            'status': 'str',
            'status_text': 'str',
            'title': 'str',
            'description': 'str',
            'should_notify': 'bool',
            'discriminator___type': 'str'
        }

        self.attribute_map = {
            'control_point': 'controlPoint',
            'record': 'record',
            'timestamp': 'timestamp',
            'level': 'level',
            'type': 'type',
            'severity': 'severity',
            'status': 'status',
            'status_text': 'statusText',
            'title': 'title',
            'description': 'description',
            'should_notify': 'shouldNotify',
            'discriminator___type': '__type'
        }

        self._control_point = control_point
        self._record = record
        self._timestamp = timestamp
        self._level = level
        self._type = type
        self._severity = severity
        self._status = status
        self._status_text = status_text
        self._title = title
        self._description = description
        self._should_notify = should_notify

    @property
    def discriminator___type(self):
        return "AlertEngineValueAlert"

    @discriminator___type.setter
    def discriminator___type(self, discriminator):
        # Don't need to do anything
        return

    @property
    def control_point(self):
        """
        Gets the control_point of this AlertEngineValueAlert.

        :return: The control_point of this AlertEngineValueAlert.
        :rtype: RecordIdentity
        """
        return self._control_point

    @control_point.setter
    def control_point(self, control_point):
        """
        Sets the control_point of this AlertEngineValueAlert.

        :param control_point: The control_point of this AlertEngineValueAlert.
        :type: RecordIdentity
        """

        self._control_point = control_point

    @property
    def record(self):
        """
        Gets the record of this AlertEngineValueAlert.

        :return: The record of this AlertEngineValueAlert.
        :rtype: RecordIdentity
        """
        return self._record

    @record.setter
    def record(self, record):
        """
        Sets the record of this AlertEngineValueAlert.

        :param record: The record of this AlertEngineValueAlert.
        :type: RecordIdentity
        """

        self._record = record

    @property
    def timestamp(self):
        """
        Gets the timestamp of this AlertEngineValueAlert.

        :return: The timestamp of this AlertEngineValueAlert.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this AlertEngineValueAlert.

        :param timestamp: The timestamp of this AlertEngineValueAlert.
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def level(self):
        """
        Gets the level of this AlertEngineValueAlert.

        :return: The level of this AlertEngineValueAlert.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this AlertEngineValueAlert.

        :param level: The level of this AlertEngineValueAlert.
        :type: str
        """
        allowed_values = ["failure", "info", "recall", "success", "certification"]
        if level is not None and level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def type(self):
        """
        Gets the type of this AlertEngineValueAlert.

        :return: The type of this AlertEngineValueAlert.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this AlertEngineValueAlert.

        :param type: The type of this AlertEngineValueAlert.
        :type: str
        """
        allowed_values = ["ALARM", "COMMUNICATION_PROBLEM", "DEVICE_FAILURE", "END_OF_LIFE", "INFORMATIONAL", "OPERATOR_SUMMARY", "RECALL", "THRESHOLD_EXCEEDED", "WARNING", "WARRANTY"]
        if type is not None and type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def severity(self):
        """
        Gets the severity of this AlertEngineValueAlert.

        :return: The severity of this AlertEngineValueAlert.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """
        Sets the severity of this AlertEngineValueAlert.

        :param severity: The severity of this AlertEngineValueAlert.
        :type: str
        """
        allowed_values = ["CRITICAL", "SIGNIFICANT", "NORMAL", "LOW"]
        if severity is not None and severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def status(self):
        """
        Gets the status of this AlertEngineValueAlert.

        :return: The status of this AlertEngineValueAlert.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this AlertEngineValueAlert.

        :param status: The status of this AlertEngineValueAlert.
        :type: str
        """
        allowed_values = ["active", "muted", "resolved", "closed"]
        if status is not None and status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_text(self):
        """
        Gets the status_text of this AlertEngineValueAlert.

        :return: The status_text of this AlertEngineValueAlert.
        :rtype: str
        """
        return self._status_text

    @status_text.setter
    def status_text(self, status_text):
        """
        Sets the status_text of this AlertEngineValueAlert.

        :param status_text: The status_text of this AlertEngineValueAlert.
        :type: str
        """

        self._status_text = status_text

    @property
    def title(self):
        """
        Gets the title of this AlertEngineValueAlert.

        :return: The title of this AlertEngineValueAlert.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this AlertEngineValueAlert.

        :param title: The title of this AlertEngineValueAlert.
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """
        Gets the description of this AlertEngineValueAlert.

        :return: The description of this AlertEngineValueAlert.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AlertEngineValueAlert.

        :param description: The description of this AlertEngineValueAlert.
        :type: str
        """

        self._description = description

    @property
    def should_notify(self):
        """
        Gets the should_notify of this AlertEngineValueAlert.

        :return: The should_notify of this AlertEngineValueAlert.
        :rtype: bool
        """
        return self._should_notify

    @should_notify.setter
    def should_notify(self, should_notify):
        """
        Sets the should_notify of this AlertEngineValueAlert.

        :param should_notify: The should_notify of this AlertEngineValueAlert.
        :type: bool
        """

        self._should_notify = should_notify

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AlertEngineValueAlert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

