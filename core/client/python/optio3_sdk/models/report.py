# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class Report(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sys_id=None, created_on=None, updated_on=None, report_definition=None, report_definition_version=None, range_start=None, range_end=None, status=None, reason=None, size=None):
        """
        Report - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sys_id': 'str',
            'created_on': 'datetime',
            'updated_on': 'datetime',
            'report_definition': 'RecordIdentity',
            'report_definition_version': 'RecordIdentity',
            'range_start': 'datetime',
            'range_end': 'datetime',
            'status': 'str',
            'reason': 'str',
            'size': 'int'
        }

        self.attribute_map = {
            'sys_id': 'sysId',
            'created_on': 'createdOn',
            'updated_on': 'updatedOn',
            'report_definition': 'reportDefinition',
            'report_definition_version': 'reportDefinitionVersion',
            'range_start': 'rangeStart',
            'range_end': 'rangeEnd',
            'status': 'status',
            'reason': 'reason',
            'size': 'size'
        }

        self._sys_id = sys_id
        self._created_on = created_on
        self._updated_on = updated_on
        self._report_definition = report_definition
        self._report_definition_version = report_definition_version
        self._range_start = range_start
        self._range_end = range_end
        self._status = status
        self._reason = reason
        self._size = size


    @property
    def sys_id(self):
        """
        Gets the sys_id of this Report.

        :return: The sys_id of this Report.
        :rtype: str
        """
        return self._sys_id

    @sys_id.setter
    def sys_id(self, sys_id):
        """
        Sets the sys_id of this Report.

        :param sys_id: The sys_id of this Report.
        :type: str
        """

        self._sys_id = sys_id

    @property
    def created_on(self):
        """
        Gets the created_on of this Report.

        :return: The created_on of this Report.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Report.

        :param created_on: The created_on of this Report.
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_on(self):
        """
        Gets the updated_on of this Report.

        :return: The updated_on of this Report.
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this Report.

        :param updated_on: The updated_on of this Report.
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def report_definition(self):
        """
        Gets the report_definition of this Report.

        :return: The report_definition of this Report.
        :rtype: RecordIdentity
        """
        return self._report_definition

    @report_definition.setter
    def report_definition(self, report_definition):
        """
        Sets the report_definition of this Report.

        :param report_definition: The report_definition of this Report.
        :type: RecordIdentity
        """

        self._report_definition = report_definition

    @property
    def report_definition_version(self):
        """
        Gets the report_definition_version of this Report.

        :return: The report_definition_version of this Report.
        :rtype: RecordIdentity
        """
        return self._report_definition_version

    @report_definition_version.setter
    def report_definition_version(self, report_definition_version):
        """
        Sets the report_definition_version of this Report.

        :param report_definition_version: The report_definition_version of this Report.
        :type: RecordIdentity
        """

        self._report_definition_version = report_definition_version

    @property
    def range_start(self):
        """
        Gets the range_start of this Report.

        :return: The range_start of this Report.
        :rtype: datetime
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start):
        """
        Sets the range_start of this Report.

        :param range_start: The range_start of this Report.
        :type: datetime
        """

        self._range_start = range_start

    @property
    def range_end(self):
        """
        Gets the range_end of this Report.

        :return: The range_end of this Report.
        :rtype: datetime
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end):
        """
        Sets the range_end of this Report.

        :param range_end: The range_end of this Report.
        :type: datetime
        """

        self._range_end = range_end

    @property
    def status(self):
        """
        Gets the status of this Report.

        :return: The status of this Report.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Report.

        :param status: The status of this Report.
        :type: str
        """
        allowed_values = ["Queued", "Finished", "Failed"]
        if status is not None and status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def reason(self):
        """
        Gets the reason of this Report.

        :return: The reason of this Report.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this Report.

        :param reason: The reason of this Report.
        :type: str
        """
        allowed_values = ["OnDemand", "Scheduled"]
        if reason is not None and reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def size(self):
        """
        Gets the size of this Report.

        :return: The size of this Report.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this Report.

        :param size: The size of this Report.
        :type: int
        """

        self._size = size

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

