# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class WorkflowDetailsForSetEquipmentParent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, parent_equipment=None, child_equipments=None):
        """
        WorkflowDetailsForSetEquipmentParent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'parent_equipment': 'WorkflowAsset',
            'child_equipments': 'list[WorkflowAsset]',
            'discriminator___type': 'str'
        }

        self.attribute_map = {
            'parent_equipment': 'parentEquipment',
            'child_equipments': 'childEquipments',
            'discriminator___type': '__type'
        }

        self._parent_equipment = parent_equipment
        self._child_equipments = child_equipments

    @property
    def discriminator___type(self):
        return "WorkflowDetailsForSetEquipmentParent"

    @discriminator___type.setter
    def discriminator___type(self, discriminator):
        # Don't need to do anything
        return

    @property
    def parent_equipment(self):
        """
        Gets the parent_equipment of this WorkflowDetailsForSetEquipmentParent.

        :return: The parent_equipment of this WorkflowDetailsForSetEquipmentParent.
        :rtype: WorkflowAsset
        """
        return self._parent_equipment

    @parent_equipment.setter
    def parent_equipment(self, parent_equipment):
        """
        Sets the parent_equipment of this WorkflowDetailsForSetEquipmentParent.

        :param parent_equipment: The parent_equipment of this WorkflowDetailsForSetEquipmentParent.
        :type: WorkflowAsset
        """

        self._parent_equipment = parent_equipment

    @property
    def child_equipments(self):
        """
        Gets the child_equipments of this WorkflowDetailsForSetEquipmentParent.

        :return: The child_equipments of this WorkflowDetailsForSetEquipmentParent.
        :rtype: list[WorkflowAsset]
        """
        return self._child_equipments

    @child_equipments.setter
    def child_equipments(self, child_equipments):
        """
        Sets the child_equipments of this WorkflowDetailsForSetEquipmentParent.

        :param child_equipments: The child_equipments of this WorkflowDetailsForSetEquipmentParent.
        :type: list[WorkflowAsset]
        """

        self._child_equipments = child_equipments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WorkflowDetailsForSetEquipmentParent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
