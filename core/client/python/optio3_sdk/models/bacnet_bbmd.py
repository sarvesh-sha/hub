# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class BACnetBBMD(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, network_address=None, network_port=None, notes=None):
        """
        BACnetBBMD - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'network_address': 'str',
            'network_port': 'int',
            'notes': 'str'
        }

        self.attribute_map = {
            'network_address': 'networkAddress',
            'network_port': 'networkPort',
            'notes': 'notes'
        }

        self._network_address = network_address
        self._network_port = network_port
        self._notes = notes


    @property
    def network_address(self):
        """
        Gets the network_address of this BACnetBBMD.

        :return: The network_address of this BACnetBBMD.
        :rtype: str
        """
        return self._network_address

    @network_address.setter
    def network_address(self, network_address):
        """
        Sets the network_address of this BACnetBBMD.

        :param network_address: The network_address of this BACnetBBMD.
        :type: str
        """

        self._network_address = network_address

    @property
    def network_port(self):
        """
        Gets the network_port of this BACnetBBMD.

        :return: The network_port of this BACnetBBMD.
        :rtype: int
        """
        return self._network_port

    @network_port.setter
    def network_port(self, network_port):
        """
        Sets the network_port of this BACnetBBMD.

        :param network_port: The network_port of this BACnetBBMD.
        :type: int
        """

        self._network_port = network_port

    @property
    def notes(self):
        """
        Gets the notes of this BACnetBBMD.

        :return: The notes of this BACnetBBMD.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this BACnetBBMD.

        :param notes: The notes of this BACnetBBMD.
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BACnetBBMD):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
