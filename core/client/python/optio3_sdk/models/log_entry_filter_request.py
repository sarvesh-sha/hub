# coding: utf-8

"""
Copyright (C) 2017-2018, Optio3, Inc. All Rights Reserved.

Proprietary & Confidential Information.

Optio3 Hub APIs
APIs and Definitions for the Optio3 Hub product.

OpenAPI spec version: 1.0.0


NOTE: This class is auto generated by the swagger code generator program.
https://github.com/swagger-api/swagger-codegen.git
Do not edit the class manually.
"""


from pprint import pformat
from six import iteritems
import re

class LogEntryFilterRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, from_offset=None, to_offset=None, limit=None, levels=None, threads=None, hosts=None, selectors=None, filter=None):
        """
        LogEntryFilterRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'from_offset': 'int',
            'to_offset': 'int',
            'limit': 'int',
            'levels': 'list[str]',
            'threads': 'list[str]',
            'hosts': 'list[str]',
            'selectors': 'list[str]',
            'filter': 'str'
        }

        self.attribute_map = {
            'from_offset': 'fromOffset',
            'to_offset': 'toOffset',
            'limit': 'limit',
            'levels': 'levels',
            'threads': 'threads',
            'hosts': 'hosts',
            'selectors': 'selectors',
            'filter': 'filter'
        }

        self._from_offset = from_offset
        self._to_offset = to_offset
        self._limit = limit
        self._levels = levels
        self._threads = threads
        self._hosts = hosts
        self._selectors = selectors
        self._filter = filter


    @property
    def from_offset(self):
        """
        Gets the from_offset of this LogEntryFilterRequest.

        :return: The from_offset of this LogEntryFilterRequest.
        :rtype: int
        """
        return self._from_offset

    @from_offset.setter
    def from_offset(self, from_offset):
        """
        Sets the from_offset of this LogEntryFilterRequest.

        :param from_offset: The from_offset of this LogEntryFilterRequest.
        :type: int
        """

        self._from_offset = from_offset

    @property
    def to_offset(self):
        """
        Gets the to_offset of this LogEntryFilterRequest.

        :return: The to_offset of this LogEntryFilterRequest.
        :rtype: int
        """
        return self._to_offset

    @to_offset.setter
    def to_offset(self, to_offset):
        """
        Sets the to_offset of this LogEntryFilterRequest.

        :param to_offset: The to_offset of this LogEntryFilterRequest.
        :type: int
        """

        self._to_offset = to_offset

    @property
    def limit(self):
        """
        Gets the limit of this LogEntryFilterRequest.

        :return: The limit of this LogEntryFilterRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this LogEntryFilterRequest.

        :param limit: The limit of this LogEntryFilterRequest.
        :type: int
        """

        self._limit = limit

    @property
    def levels(self):
        """
        Gets the levels of this LogEntryFilterRequest.

        :return: The levels of this LogEntryFilterRequest.
        :rtype: list[str]
        """
        return self._levels

    @levels.setter
    def levels(self, levels):
        """
        Sets the levels of this LogEntryFilterRequest.

        :param levels: The levels of this LogEntryFilterRequest.
        :type: list[str]
        """

        self._levels = levels

    @property
    def threads(self):
        """
        Gets the threads of this LogEntryFilterRequest.

        :return: The threads of this LogEntryFilterRequest.
        :rtype: list[str]
        """
        return self._threads

    @threads.setter
    def threads(self, threads):
        """
        Sets the threads of this LogEntryFilterRequest.

        :param threads: The threads of this LogEntryFilterRequest.
        :type: list[str]
        """

        self._threads = threads

    @property
    def hosts(self):
        """
        Gets the hosts of this LogEntryFilterRequest.

        :return: The hosts of this LogEntryFilterRequest.
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """
        Sets the hosts of this LogEntryFilterRequest.

        :param hosts: The hosts of this LogEntryFilterRequest.
        :type: list[str]
        """

        self._hosts = hosts

    @property
    def selectors(self):
        """
        Gets the selectors of this LogEntryFilterRequest.

        :return: The selectors of this LogEntryFilterRequest.
        :rtype: list[str]
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """
        Sets the selectors of this LogEntryFilterRequest.

        :param selectors: The selectors of this LogEntryFilterRequest.
        :type: list[str]
        """

        self._selectors = selectors

    @property
    def filter(self):
        """
        Gets the filter of this LogEntryFilterRequest.

        :return: The filter of this LogEntryFilterRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this LogEntryFilterRequest.

        :param filter: The filter of this LogEntryFilterRequest.
        :type: str
        """

        self._filter = filter

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LogEntryFilterRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
