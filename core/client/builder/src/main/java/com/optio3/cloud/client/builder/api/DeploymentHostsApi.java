/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Builder APIs
 * APIs and Definitions for the Optio3 Builder product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.cloud.client.builder.api;

import com.optio3.cloud.client.builder.model.BootConfigOptionAndValue;
import com.optio3.cloud.client.builder.model.BootOptions;
import com.optio3.cloud.client.builder.model.DelayedOperation;
import com.optio3.cloud.client.builder.model.DelayedOperations;
import com.optio3.cloud.client.builder.model.DeployerShutdownConfiguration;
import com.optio3.cloud.client.builder.model.DeploymentAgentUpgrade;
import com.optio3.cloud.client.builder.model.DeploymentAgentUpgradeDescriptor;
import com.optio3.cloud.client.builder.model.DeploymentCellularChargesSummary;
import com.optio3.cloud.client.builder.model.DeploymentCellularCommunications;
import com.optio3.cloud.client.builder.model.DeploymentCellularSession;
import com.optio3.cloud.client.builder.model.DeploymentCellularStatus;
import com.optio3.cloud.client.builder.model.DeploymentHost;
import com.optio3.cloud.client.builder.model.DeploymentHostFilterRequest;
import com.optio3.cloud.client.builder.model.DeploymentHostImage;
import com.optio3.cloud.client.builder.model.DeploymentHostOffline;
import com.optio3.cloud.client.builder.model.DeploymentHostProvisioningInfo;
import com.optio3.cloud.client.builder.model.DeploymentHostProvisioningNotes;
import com.optio3.cloud.client.builder.model.DeploymentHostServiceDetails;
import com.optio3.cloud.client.builder.model.DeploymentHostStatusDescriptor;
import com.optio3.cloud.client.builder.model.DeploymentTaskConfiguration;
import java.io.InputStream;
import com.optio3.cloud.client.builder.model.LogEntryFilterRequest;
import com.optio3.cloud.client.builder.model.LogLine;
import com.optio3.cloud.client.builder.model.LogRange;
import com.optio3.cloud.client.builder.model.RecordIdentity;
import com.optio3.cloud.client.builder.model.ValidationResults;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.*;
import org.apache.cxf.jaxrs.ext.multipart.*;
import org.apache.cxf.jaxrs.ext.PATCH;

@Path("/")
public interface DeploymentHostsApi
{
    @POST
    @Path("/deployment-hosts/item/{id}/add-notes")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/json"
    })
    public Boolean addNotes(@PathParam("id") String id, DeploymentHostProvisioningNotes body);

    @GET
    @Path("/deployment-hosts/item/{id}/bind/{serviceId}/{role}")
    @Produces(
    {
        "application/json"
    })
    public Boolean bindToService(@PathParam("id") String id, @PathParam("serviceId") String serviceId, @PathParam("role") String role);

    @DELETE
    @Path("/deployment-hosts/item/{id}/log")
    @Produces(
    {
        "application/json"
    })
    public Integer deleteLog(@PathParam("id") String id, @QueryParam("olderThanXMinutes") Integer olderThanXMinutes);

    @POST
    @Path("/deployment-hosts/describe-filtered")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/json"
    })
    public List<DeploymentHostStatusDescriptor> describeFiltered(DeploymentHostFilterRequest body);

    @GET
    @Path("/deployment-hosts/item/{id}/boot-options/fetch")
    @Produces(
    {
        "application/json"
    })
    public BootOptions fetchBootOptions(@PathParam("id") String id);

    @POST
    @Path("/deployment-hosts/item/{id}/log/filter")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/json"
    })
    public List<LogRange> filterLog(@PathParam("id") String id, LogEntryFilterRequest body);

    @GET
    @Path("/deployment-hosts/item/{id}")
    @Produces(
    {
        "application/json"
    })
    public DeploymentHost get(@PathParam("id") String id);

    @GET
    @Path("/deployment-hosts/item/{id}/agents")
    @Produces(
    {
        "application/json"
    })
    public List<RecordIdentity> getAgents(@PathParam("id") String id);

    @POST
    @Path("/deployment-hosts/batch")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/json"
    })
    public List<DeploymentHost> getBatch(List<String> body);

    @GET
    @Path("/deployment-hosts/item/{id}/boot-options")
    @Produces(
    {
        "application/json"
    })
    public BootOptions getBootOptions(@PathParam("id") String id);

    @GET
    @Path("/deployment-hosts/item/{id}/charges")
    @Produces(
    {
        "application/json"
    })
    public DeploymentCellularChargesSummary getCharges(@PathParam("id") String id, @QueryParam("refresh") Boolean refresh);

    @GET
    @Path("/deployment-hosts/item/{id}/data-connection-status")
    @Produces(
    {
        "application/json"
    })
    public DeploymentCellularStatus getDataConnectionStatus(@PathParam("id") String id);

    @GET
    @Path("/deployment-hosts/item/{id}/data-exchanges")
    @Produces(
    {
        "application/json"
    })
    public DeploymentCellularCommunications getDataExchanges(@PathParam("id") String id, @QueryParam("days") Integer days);

    @GET
    @Path("/deployment-hosts/item/{id}/data-sessions")
    @Produces(
    {
        "application/json"
    })
    public List<DeploymentCellularSession> getDataSessions(@PathParam("id") String id);

    @GET
    @Path("/deployment-hosts/item/{id}/delayed-ops")
    @Produces(
    {
        "application/json"
    })
    public DelayedOperations getDelayedOps(@PathParam("id") String id);

    @GET
    @Path("/deployment-hosts/item/{id}/files")
    @Produces(
    {
        "application/json"
    })
    public List<RecordIdentity> getFiles(@PathParam("id") String id);

    @GET
    @Path("/deployment-hosts/item/{id}/log")
    @Produces(
    {
        "application/json"
    })
    public List<LogLine> getLog(@PathParam("id") String id, @QueryParam("fromOffset") Integer fromOffset, @QueryParam("toOffset") Integer toOffset, @QueryParam("limit") Integer limit);

    @GET
    @Path("/deployment-hosts/item/{id}/provisioning")
    @Produces(
    {
        "application/json"
    })
    public DeploymentHostProvisioningInfo getProvisioningInfo(@PathParam("id") String id);

    @GET
    @Path("/deployment-hosts/item/{id}/label")
    @Produces(
    {
        "image/jpeg"
    })
    public List<byte[]> getProvisioningLabel(@PathParam("id") String id);

    @GET
    @Path("/deployment-hosts/item/{id}/remote")
    @Produces(
    {
        "application/json"
    })
    public DeploymentHostServiceDetails getRemote(@PathParam("id") String id, @QueryParam("force") Boolean force);

    @GET
    @Path("/deployment-hosts/item/{id}/tasks")
    @Produces(
    {
        "application/json"
    })
    public List<RecordIdentity> getTasks(@PathParam("id") String id);

    @GET
    @Path("/deployment-hosts/item/{id}/images")
    @Produces(
    {
        "application/json"
    })
    public List<DeploymentHostImage> listImages(@PathParam("id") String id);

    @GET
    @Path("/deployment-hosts/item/{id}/log-rpc")
    @Produces(
    {
        "application/json"
    })
    public Boolean logRpc(@PathParam("id") String id, @QueryParam("state") Boolean state);

    @GET
    @Path("/deployment-hosts/item/{id}/notify-me")
    @Produces(
    {
        "application/json"
    })
    public Boolean notifyMe(@PathParam("id") String id);

    @GET
    @Path("/deployment-hosts/item/{id}/prepare-for-customer/{customerId}")
    @Produces(
    {
        "application/json"
    })
    public Boolean prepareForCustomer(@PathParam("id") String id, @PathParam("customerId") String customerId);

    @GET
    @Path("/deployment-hosts/item/{id}/prepare-for-offline-deployment")
    @Produces(
    {
        "application/json"
    })
    public List<DeploymentHostOffline> prepareForOfflineDeployment(@PathParam("id") String id);

    @GET
    @Path("/deployment-hosts/item/{id}/prepare-for-service/{serviceId}")
    @Produces(
    {
        "application/json"
    })
    public Boolean prepareForService(@PathParam("id") String id, @PathParam("serviceId") String serviceId);

    @GET
    @Path("/deployment-hosts/item/{id}/image-prune/{days}")
    @Produces(
    {
        "application/json"
    })
    public Boolean pruneImages(@PathParam("id") String id, @PathParam("days") Integer days);

    @GET
    @Path("/deployment-hosts/item/{id}/refresh-images")
    @Produces(
    {
        "application/json"
    })
    public Boolean refreshImages(@PathParam("id") String id);

    @DELETE
    @Path("/deployment-hosts/item/{id}")
    @Produces(
    {
        "application/json"
    })
    public ValidationResults remove(@PathParam("id") String id, @QueryParam("dryRun") Boolean dryRun);

    @POST
    @Path("/deployment-hosts/item/{id}/delayed-ops")
    @Produces(
    {
        "application/json"
    })
    public DelayedOperations removeDelayedOp(@PathParam("id") String id, DelayedOperation body);

    @DELETE
    @Path("/deployment-hosts/item/{id}/provisioning/{sysId}")
    @Produces(
    {
        "application/json"
    })
    public DeploymentHostProvisioningInfo removeProvisioningInfo(@PathParam("id") String id, @PathParam("sysId") String sysId);

    @POST
    @Path("/deployment-hosts/inventory/{fileName}")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/octet-stream"
    })
    public InputStream reportInventory(@PathParam("fileName") String fileName, DeploymentHostFilterRequest body);

    @GET
    @Path("/deployment-hosts/item/{id}/alert-thresholds")
    @Produces(
    {
        "application/json"
    })
    public String setAlertThresholds(@PathParam("id") String id, @QueryParam("role") String role, @QueryParam("warningThreshold") Integer warningThreshold, @QueryParam("alertThreshold") Integer alertThreshold);

    @POST
    @Path("/deployment-hosts/item/{id}/battery-thresholds")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/json"
    })
    public String setBatteryThresholds(@PathParam("id") String id, DeployerShutdownConfiguration body);

    @POST
    @Path("/deployment-hosts/item/{id}/boot-options")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/json"
    })
    public BootOptions setBootOption(@PathParam("id") String id, BootConfigOptionAndValue body);

    @GET
    @Path("/deployment-hosts/item/{id}/start-agent/{imageId}")
    @Produces(
    {
        "application/json"
    })
    public Boolean startAgent(@PathParam("id") String id, @PathParam("imageId") String imageId);

    @POST
    @Path("/deployment-hosts/item/{id}/new-task/{imageId}")
    @Produces(
    {
        "application/json"
    })
    public DeploymentHost startTask(@PathParam("id") String id, @PathParam("imageId") String imageId, DeploymentTaskConfiguration body);

    @GET
    @Path("/deployment-hosts/item/{id}/terminate")
    @Produces(
    {
        "application/json"
    })
    public ValidationResults terminate(@PathParam("id") String id, @QueryParam("dryRun") Boolean dryRun);

    @GET
    @Path("/deployment-hosts/item/{id}/unbind/{role}")
    @Produces(
    {
        "application/json"
    })
    public Boolean unbindFromService(@PathParam("id") String id, @PathParam("role") String role);

    @POST
    @Path("/deployment-hosts/item/{id}")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/json"
    })
    public ValidationResults update(@PathParam("id") String id, @QueryParam("dryRun") Boolean dryRun, DeploymentHost body);

    @GET
    @Path("/deployment-hosts/item/{id}/update-waypoint/{imageId}")
    @Produces(
    {
        "application/json"
    })
    public Boolean updateWaypoint(@PathParam("id") String id, @PathParam("imageId") String imageId);

    @POST
    @Path("/deployment-hosts/upgrade-agents")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/json"
    })
    public List<DeploymentAgentUpgradeDescriptor> upgradeAgents(DeploymentAgentUpgrade body);

}
