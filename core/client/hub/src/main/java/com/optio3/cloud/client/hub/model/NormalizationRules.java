/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.cloud.client.hub.model;

import com.optio3.cloud.client.hub.model.DeviceElementClassificationOverrides;
import com.optio3.cloud.client.hub.model.EquipmentClass;
import com.optio3.cloud.client.hub.model.LocationClass;
import com.optio3.cloud.client.hub.model.NormalizationDefinitionDetails;
import com.optio3.cloud.client.hub.model.NormalizationEquipment;
import com.optio3.cloud.client.hub.model.NormalizationRulesKnownTerm;
import com.optio3.cloud.client.hub.model.PointClass;
import com.optio3.cloud.client.hub.model.ValidationRules;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.*;

public class NormalizationRules
{

  public List<PointClass> pointClasses = new ArrayList<PointClass>();
  public List<EquipmentClass> equipmentClasses = new ArrayList<EquipmentClass>();
  public List<LocationClass> locationClasses = new ArrayList<LocationClass>();
  public Map<String, NormalizationRulesKnownTerm> knownTerms = new HashMap<String, NormalizationRulesKnownTerm>();
  public Map<String, List<String>> abbreviations = new HashMap<String, List<String>>();
  public Map<String, String> startsWith = new HashMap<String, String>();
  public Map<String, String> endsWith = new HashMap<String, String>();
  public Map<String, String> contains = new HashMap<String, String>();
  public Map<String, String> disambiguations = new HashMap<String, String>();
  public Double scoreThreshold = null;
  public ValidationRules validation = null;
  public Map<String, List<String>> equipmentRelationships = new HashMap<String, List<String>>();
  public Map<String, NormalizationEquipment> equipments = new HashMap<String, NormalizationEquipment>();
  public Map<String, DeviceElementClassificationOverrides> pointOverrides = new HashMap<String, DeviceElementClassificationOverrides>();
  public NormalizationDefinitionDetails logic = null;

  @Override
  public String toString()
  {
    StringBuilder sb = new StringBuilder();
    sb.append("class NormalizationRules {\n");

    sb.append("    pointClasses: ").append(toIndentedString(pointClasses)).append("\n");
    sb.append("    equipmentClasses: ").append(toIndentedString(equipmentClasses)).append("\n");
    sb.append("    locationClasses: ").append(toIndentedString(locationClasses)).append("\n");
    sb.append("    knownTerms: ").append(toIndentedString(knownTerms)).append("\n");
    sb.append("    abbreviations: ").append(toIndentedString(abbreviations)).append("\n");
    sb.append("    startsWith: ").append(toIndentedString(startsWith)).append("\n");
    sb.append("    endsWith: ").append(toIndentedString(endsWith)).append("\n");
    sb.append("    contains: ").append(toIndentedString(contains)).append("\n");
    sb.append("    disambiguations: ").append(toIndentedString(disambiguations)).append("\n");
    sb.append("    scoreThreshold: ").append(toIndentedString(scoreThreshold)).append("\n");
    sb.append("    validation: ").append(toIndentedString(validation)).append("\n");
    sb.append("    equipmentRelationships: ").append(toIndentedString(equipmentRelationships)).append("\n");
    sb.append("    equipments: ").append(toIndentedString(equipments)).append("\n");
    sb.append("    pointOverrides: ").append(toIndentedString(pointOverrides)).append("\n");
    sb.append("    logic: ").append(toIndentedString(logic)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(java.lang.Object o)
  {
    if (o == null)
      return "null";
    return o.toString().replace("\n", "\n    ");
  }
}
