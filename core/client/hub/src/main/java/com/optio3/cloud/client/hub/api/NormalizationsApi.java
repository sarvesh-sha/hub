/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.cloud.client.hub.api;

import com.optio3.cloud.client.hub.model.ClassificationPointOutput;
import com.optio3.cloud.client.hub.model.DeviceElementClassificationOverridesRequest;
import com.optio3.cloud.client.hub.model.DeviceElementNormalizationProgress;
import com.optio3.cloud.client.hub.model.DeviceElementNormalizationRun;
import com.optio3.cloud.client.hub.model.DeviceElementNormalizationSample;
import com.optio3.cloud.client.hub.model.DeviceNormalizationExport;
import com.optio3.cloud.client.hub.model.Normalization;
import com.optio3.cloud.client.hub.model.NormalizationEvaluation;
import com.optio3.cloud.client.hub.model.NormalizationRules;
import com.optio3.cloud.client.hub.model.RawImport;
import com.optio3.cloud.client.hub.model.RecordIdentity;
import com.optio3.cloud.client.hub.model.ValidationResults;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.*;
import org.apache.cxf.jaxrs.ext.multipart.*;
import org.apache.cxf.jaxrs.ext.PATCH;

@Path("/")
public interface NormalizationsApi
{
    @GET
    @Path("/normalizations/normalization/check/{id}")
    @Produces(
    {
        "application/json"
    })
    public DeviceElementNormalizationProgress checkNormalization(@PathParam("id") String id, @QueryParam("detailed") Boolean detailed);

    @POST
    @Path("/normalizations/create")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/json"
    })
    public Normalization create(Normalization body);

    @POST
    @Path("/normalizations/normalization/eval")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/json"
    })
    public NormalizationEvaluation evaluate(DeviceElementNormalizationSample body, @QueryParam("maxSteps") Integer maxSteps, @QueryParam("trace") Boolean trace);

    @GET
    @Path("/normalizations/export/device/{id}")
    @Produces(
    {
        "application/json"
    })
    public DeviceNormalizationExport exportNormalization(@PathParam("id") String id);

    @GET
    @Path("/normalizations/item/{id}")
    @Produces(
    {
        "application/json"
    })
    public Normalization get(@PathParam("id") String id);

    @GET
    @Path("/normalizations/item/active")
    @Produces(
    {
        "application/json"
    })
    public RecordIdentity getActive();

    @GET
    @Path("/normalizations/all")
    @Produces(
    {
        "application/json"
    })
    public List<RecordIdentity> getAll();

    @POST
    @Path("/normalizations/batch")
    @Produces(
    {
        "application/json"
    })
    public List<Normalization> getBatch(List<String> body);

    @GET
    @Path("/normalizations/classification/sample/{sysId}")
    @Produces(
    {
        "application/json"
    })
    public DeviceElementNormalizationSample loadSample(@PathParam("sysId") String sysId);

    @GET
    @Path("/normalizations/item/{id}/activate")
    @Produces(
    {
        "application/json"
    })
    public Normalization makeActive(@PathParam("id") String id);

    @POST
    @Path("/normalizations/parse-import")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/json"
    })
    public NormalizationRules parseImport(RawImport body);

    @POST
    @Path("/normalizations/normalization/override/import")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/json"
    })
    public List<DeviceElementClassificationOverridesRequest> parseOverridesImport(RawImport body);

    @DELETE
    @Path("/normalizations/item/{id}")
    @Produces(
    {
        "application/json"
    })
    public ValidationResults remove(@PathParam("id") String id, @QueryParam("dryRun") Boolean dryRun);

    @POST
    @Path("/normalizations/normalization/start")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "text/plain"
    })
    public String startNormalization(DeviceElementNormalizationRun body, @QueryParam("dryRun") Boolean dryRun);

    @POST
    @Path("/normalizations/classification/test")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/json"
    })
    public ClassificationPointOutput testClassification(DeviceElementNormalizationSample body);

    @POST
    @Path("/normalizations/normalization/test")
    @Consumes(
    {
        "application/json"
    })
    @Produces(
    {
        "application/json"
    })
    public ClassificationPointOutput testNormalization(DeviceElementNormalizationSample body);

}
