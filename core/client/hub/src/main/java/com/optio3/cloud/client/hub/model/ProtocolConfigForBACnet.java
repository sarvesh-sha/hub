/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.cloud.client.hub.model;

import com.optio3.cloud.client.hub.model.BACnetBBMD;
import com.optio3.cloud.client.hub.model.FilteredSubnet;
import com.optio3.cloud.client.hub.model.NonDiscoverableBACnetDevice;
import com.optio3.cloud.client.hub.model.NonDiscoverableMstpTrunk;
import com.optio3.cloud.client.hub.model.ProtocolConfig;
import com.optio3.cloud.client.hub.model.SkippedBACnetDevice;
import com.optio3.cloud.client.hub.model.WhoIsRange;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.*;

@JsonTypeName("ProtocolConfigForBACnet")
public class ProtocolConfigForBACnet extends ProtocolConfig
{

  public Boolean useUDP = null;
  public Boolean useEthernet = null;
  public Boolean disableBroadcast = null;
  public Boolean sweepSubnet = null;
  public Boolean sweepMSTP = null;
  public Boolean includeNetworksFromRouters = null;
  public Integer networkPort = null;
  public List<BACnetBBMD> bbmds = new ArrayList<BACnetBBMD>();
  public List<FilteredSubnet> scanSubnets = new ArrayList<FilteredSubnet>();
  public WhoIsRange limitScan = null;
  public Integer maxParallelRequestsPerHost = null;
  public Integer maxParallelRequestsPerNetwork = null;
  public Integer limitPacketRate = null;
  public List<NonDiscoverableBACnetDevice> nonDiscoverableDevices = new ArrayList<NonDiscoverableBACnetDevice>();
  public List<NonDiscoverableMstpTrunk> nonDiscoverableMstpTrunks = new ArrayList<NonDiscoverableMstpTrunk>();
  public List<SkippedBACnetDevice> skippedDevices = new ArrayList<SkippedBACnetDevice>();
  public List<FilteredSubnet> filterSubnets = new ArrayList<FilteredSubnet>();

  @Override
  public String toString()
  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtocolConfigForBACnet {\n");
    sb.append("    ").append(super.toString().replace("\n", "\n    ")).append("\n");
    sb.append("    useUDP: ").append(toIndentedString(useUDP)).append("\n");
    sb.append("    useEthernet: ").append(toIndentedString(useEthernet)).append("\n");
    sb.append("    disableBroadcast: ").append(toIndentedString(disableBroadcast)).append("\n");
    sb.append("    sweepSubnet: ").append(toIndentedString(sweepSubnet)).append("\n");
    sb.append("    sweepMSTP: ").append(toIndentedString(sweepMSTP)).append("\n");
    sb.append("    includeNetworksFromRouters: ").append(toIndentedString(includeNetworksFromRouters)).append("\n");
    sb.append("    networkPort: ").append(toIndentedString(networkPort)).append("\n");
    sb.append("    bbmds: ").append(toIndentedString(bbmds)).append("\n");
    sb.append("    scanSubnets: ").append(toIndentedString(scanSubnets)).append("\n");
    sb.append("    limitScan: ").append(toIndentedString(limitScan)).append("\n");
    sb.append("    maxParallelRequestsPerHost: ").append(toIndentedString(maxParallelRequestsPerHost)).append("\n");
    sb.append("    maxParallelRequestsPerNetwork: ").append(toIndentedString(maxParallelRequestsPerNetwork)).append("\n");
    sb.append("    limitPacketRate: ").append(toIndentedString(limitPacketRate)).append("\n");
    sb.append("    nonDiscoverableDevices: ").append(toIndentedString(nonDiscoverableDevices)).append("\n");
    sb.append("    nonDiscoverableMstpTrunks: ").append(toIndentedString(nonDiscoverableMstpTrunks)).append("\n");
    sb.append("    skippedDevices: ").append(toIndentedString(skippedDevices)).append("\n");
    sb.append("    filterSubnets: ").append(toIndentedString(filterSubnets)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(java.lang.Object o)
  {
    if (o == null)
      return "null";
    return o.toString().replace("\n", "\n    ");
  }
}
