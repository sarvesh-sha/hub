/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 */
package com.optio3.protocol.model.bacnet.enums;

import java.util.BitSet;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.optio3.lang.Unsigned16;
import com.optio3.lang.Unsigned32;
import com.optio3.lang.Unsigned8;
import com.optio3.protocol.model.bacnet.AnyValue;
import com.optio3.protocol.model.bacnet.BACnetDate;
import com.optio3.protocol.model.bacnet.BACnetObjectIdentifier;
import com.optio3.protocol.model.bacnet.BACnetObjectModel;
import com.optio3.protocol.model.bacnet.BACnetTime;
import com.optio3.protocol.model.bacnet.PropertyType;
import com.optio3.protocol.model.bacnet.constructed.BACnetAccessRule;
import com.optio3.protocol.model.bacnet.constructed.BACnetAccumulatorRecord;
import com.optio3.protocol.model.bacnet.constructed.BACnetActionList;
import com.optio3.protocol.model.bacnet.constructed.BACnetAddressBinding;
import com.optio3.protocol.model.bacnet.constructed.BACnetAssignedAccessRights;
import com.optio3.protocol.model.bacnet.constructed.BACnetAssignedLandingCalls;
import com.optio3.protocol.model.bacnet.constructed.BACnetAuthenticationFactor;
import com.optio3.protocol.model.bacnet.constructed.BACnetAuthenticationFactorFormat;
import com.optio3.protocol.model.bacnet.constructed.BACnetAuthenticationPolicy;
import com.optio3.protocol.model.bacnet.constructed.BACnetBDTEntry;
import com.optio3.protocol.model.bacnet.constructed.BACnetCOVMultipleSubscription;
import com.optio3.protocol.model.bacnet.constructed.BACnetCOVSubscription;
import com.optio3.protocol.model.bacnet.constructed.BACnetChannelValue;
import com.optio3.protocol.model.bacnet.constructed.BACnetCredentialAuthenticationFactor;
import com.optio3.protocol.model.bacnet.constructed.BACnetDailySchedule;
import com.optio3.protocol.model.bacnet.constructed.BACnetDateRange;
import com.optio3.protocol.model.bacnet.constructed.BACnetDateTime;
import com.optio3.protocol.model.bacnet.constructed.BACnetDestination;
import com.optio3.protocol.model.bacnet.constructed.BACnetDeviceObjectPropertyReference;
import com.optio3.protocol.model.bacnet.constructed.BACnetDeviceObjectReference;
import com.optio3.protocol.model.bacnet.constructed.BACnetEventLogRecord;
import com.optio3.protocol.model.bacnet.constructed.BACnetEventNotificationSubscription;
import com.optio3.protocol.model.bacnet.constructed.BACnetFDTEntry;
import com.optio3.protocol.model.bacnet.constructed.BACnetHostNPort;
import com.optio3.protocol.model.bacnet.constructed.BACnetLandingCallStatus;
import com.optio3.protocol.model.bacnet.constructed.BACnetLandingDoorStatus;
import com.optio3.protocol.model.bacnet.constructed.BACnetLiftCarCallList;
import com.optio3.protocol.model.bacnet.constructed.BACnetLightingCommand;
import com.optio3.protocol.model.bacnet.constructed.BACnetLogMultipleRecord;
import com.optio3.protocol.model.bacnet.constructed.BACnetLogRecord;
import com.optio3.protocol.model.bacnet.constructed.BACnetNameValue;
import com.optio3.protocol.model.bacnet.constructed.BACnetNameValueCollection;
import com.optio3.protocol.model.bacnet.constructed.BACnetNetworkSecurityPolicy;
import com.optio3.protocol.model.bacnet.constructed.BACnetObjectPropertyReference;
import com.optio3.protocol.model.bacnet.constructed.BACnetPortPermission;
import com.optio3.protocol.model.bacnet.constructed.BACnetPrescale;
import com.optio3.protocol.model.bacnet.constructed.BACnetPriorityArray;
import com.optio3.protocol.model.bacnet.constructed.BACnetPropertyAccessResult;
import com.optio3.protocol.model.bacnet.constructed.BACnetRouterEntry;
import com.optio3.protocol.model.bacnet.constructed.BACnetSecurityKeySet;
import com.optio3.protocol.model.bacnet.constructed.BACnetSetpointReference;
import com.optio3.protocol.model.bacnet.constructed.BACnetSpecialEvent;
import com.optio3.protocol.model.bacnet.constructed.BACnetVMACEntry;
import com.optio3.protocol.model.bacnet.constructed.BACnetVTSession;
import com.optio3.protocol.model.bacnet.constructed.ReadAccessResult;
import com.optio3.protocol.model.bacnet.constructed.ReadAccessSpecification;
import com.optio3.protocol.model.bacnet.constructed.choice.BACnetCalendarEntry;
import com.optio3.protocol.model.bacnet.constructed.choice.BACnetClientCOV;
import com.optio3.protocol.model.bacnet.constructed.choice.BACnetEventParameter;
import com.optio3.protocol.model.bacnet.constructed.choice.BACnetFaultParameter;
import com.optio3.protocol.model.bacnet.constructed.choice.BACnetProcessIdSelection;
import com.optio3.protocol.model.bacnet.constructed.choice.BACnetRecipient;
import com.optio3.protocol.model.bacnet.constructed.choice.BACnetScale;
import com.optio3.protocol.model.bacnet.constructed.choice.BACnetShedLevel;
import com.optio3.protocol.model.bacnet.constructed.choice.BACnetTimeStamp;
import com.optio3.protocol.model.bacnet.constructed.choice.BACnetTimerStateChangeValue;
import com.optio3.protocol.model.bacnet.constructed.choice.BACnetValueSource;
import com.optio3.protocol.model.bacnet.enums.bitstring.BACnetEventTransitionBits;
import com.optio3.protocol.model.bacnet.enums.bitstring.BACnetFaultType;
import com.optio3.protocol.model.bacnet.enums.bitstring.BACnetLimitEnable;
import com.optio3.protocol.model.bacnet.enums.bitstring.BACnetObjectTypesSupported;
import com.optio3.protocol.model.bacnet.enums.bitstring.BACnetServicesSupported;
import com.optio3.protocol.model.bacnet.enums.bitstring.BACnetStatusFlags;
import com.optio3.serialization.HandlerForDecoding;
import com.optio3.serialization.HandlerForEncoding;
import com.optio3.serialization.Reflection;
import com.optio3.serialization.TypedBitSet;

// NOTE: Generated automatically by regeneratePropertyDefinitions unit test!!
public enum BACnetObjectType implements TypedBitSet.ValueGetter
{
    // @formatter:off
    @PropertyType(property = BACnetPropertyIdentifier.activation_time               , type = BACnetDateTime                      .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.assigned_access_rights        , type = BACnetAssignedAccessRights          .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.authentication_factors        , type = BACnetCredentialAuthenticationFactor.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.credential_disable            , type = BACnetAccessCredentialDisable       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.credential_status             , type = BACnetBinaryPV                      .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.expiration_time               , type = BACnetDateTime                      .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown   .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.reason_for_disable            , type = BACnetAccessCredentialDisableReason .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.global_identifier             , type = Unsigned32                          .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.absentee_limit                , type = Unsigned32                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.authorization_exemptions      , type = BACnetAuthorizationExemption        .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.belongs_to                    , type = BACnetDeviceObjectReference         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.days_remaining                , type = int                                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.extended_time_enable          , type = boolean                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_access_event             , type = BACnetAccessEvent                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_access_point             , type = BACnetDeviceObjectReference         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_use_time                 , type = BACnetDateTime                      .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                     .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.threat_authority              , type = byte                                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.trace_flag                    , type = boolean                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.uses_remaining                , type = int                                 .class, conformance = BACnetConformance.Optional)
    access_credential     (32, com.optio3.protocol.model.bacnet.objects.access_credential.class),
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Required, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.door_extended_pulse_time      , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.door_open_too_long_time       , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.door_pulse_time               , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = BACnetDoorValue                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetDoorValue                  .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.alarm_values                  , type = BACnetDoorAlarmState             .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.door_alarm_state              , type = BACnetDoorAlarmState             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.door_members                  , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.door_status                   , type = BACnetDoorStatus                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.door_unlock_delay_time        , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fault_values                  , type = BACnetDoorAlarmState             .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.lock_status                   , type = BACnetLockStatus                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.maintenance_required          , type = BACnetMaintenance                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.masked_alarm_values           , type = BACnetDoorAlarmState             .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.secured_status                , type = BACnetDoorSecuredStatus          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    access_door           (30, com.optio3.protocol.model.bacnet.objects.access_door.class),
    @PropertyType(property = BACnetPropertyIdentifier.access_doors                      , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.access_event                      , type = BACnetAccessEvent                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.access_event_credential           , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.access_event_tag                  , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.access_event_time                 , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.active_authentication_policy      , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.authentication_status             , type = BACnetAuthenticationStatus       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.authorization_mode                , type = BACnetAuthorizationMode          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                       , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.number_of_authentication_policies , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier                 , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                       , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                       , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                    , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.priority_for_writing              , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                     , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                       , type = BACnetReliability                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                      , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.access_alarm_events               , type = BACnetAccessEvent                .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.access_event_authentication_factor, type = BACnetAuthenticationFactor       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.access_transaction_events         , type = BACnetAccessEvent                .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.accompaniment_time                , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions                 , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.authentication_policy_list        , type = BACnetAuthenticationPolicy       .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.authentication_policy_names       , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                       , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit           , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref       , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable            , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                      , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts               , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config        , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps                 , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.failed_attempt_events             , type = BACnetAccessEvent                .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.failed_attempts                   , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.failed_attempts_time              , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.lockout                           , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.lockout_relinquish_time           , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.max_failed_attempts               , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.muster_point                      , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class                , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                       , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.occupancy_count_adjust            , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.occupancy_lower_limit_enforced    , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.occupancy_upper_limit_enforced    , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                      , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit    , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                              , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.threat_level                      , type = byte                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.transaction_notification_class    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.verification_time                 , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.zone_from                         , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.zone_to                           , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Optional)
    access_point          (33, com.optio3.protocol.model.bacnet.objects.access_point.class),
    @PropertyType(property = BACnetPropertyIdentifier.enable                        , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.negative_access_rules         , type = BACnetAccessRule                 .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.positive_access_rules         , type = BACnetAccessRule                 .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.global_identifier             , type = Unsigned32                       .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.accompaniment                 , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    access_rights         (34, com.optio3.protocol.model.bacnet.objects.access_rights.class),
    @PropertyType(property = BACnetPropertyIdentifier.credentials                   , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.user_type                     , type = BACnetAccessUserType             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.global_identifier             , type = Unsigned32                       .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.member_of                     , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.members                       , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.user_external_identifier      , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.user_information_reference    , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.user_name                     , type = String                           .class, conformance = BACnetConformance.Optional)
    access_user           (35, com.optio3.protocol.model.bacnet.objects.access_user.class),
    @PropertyType(property = BACnetPropertyIdentifier.entry_points                  , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.exit_points                   , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.occupancy_state               , type = BACnetAccessZoneOccupancyState   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.global_identifier             , type = Unsigned32                       .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.adjust_value                  , type = int                              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.alarm_values                  , type = BACnetAccessZoneOccupancyState   .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.credentials_in_zone           , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.last_credential_added         , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_credential_added_time    , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_credential_removed       , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_credential_removed_time  , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.occupancy_count               , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.occupancy_count_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.occupancy_lower_limit         , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.occupancy_upper_limit         , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.passback_mode                 , type = BACnetAccessPassbackMode         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.passback_timeout              , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    access_zone           (36, com.optio3.protocol.model.bacnet.objects.access_zone.class),
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.max_pres_value                , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.scale                         , type = BACnetScale                      .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.units                         , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.device_type                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fault_high_limit              , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.fault_low_limit               , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.high_limit                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.limit_enable                  , type = BACnetLimitEnable                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.limit_monitoring_interval     , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.logging_object                , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.logging_record                , type = BACnetAccumulatorRecord          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.low_limit                     , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.prescale                      , type = BACnetPrescale                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.pulse_rate                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_before_change           , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_change_time             , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_set                     , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    accumulator           (23, com.optio3.protocol.model.bacnet.objects.accumulator.class),
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions          , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable     , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable               , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps          , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Required, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class         , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier          , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value              , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list              , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit    , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref, type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts        , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location           , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name               , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                       , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    alert_enrollment      (52, com.optio3.protocol.model.bacnet.objects.alert_enrollment.class),
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = float                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.units                         , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.cov_increment                 , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.deadband                      , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.device_type                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fault_high_limit              , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.fault_low_limit               , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.high_limit                    , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.interface_value               , type = float                            .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.limit_enable                  , type = BACnetLimitEnable                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.low_limit                     , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.max_pres_value                , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.min_pres_value                , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.resolution                    , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.update_interval               , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    analog_input          (0, com.optio3.protocol.model.bacnet.objects.analog_input.class),
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Required, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = float                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.units                         , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = float                            .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.cov_increment                 , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.deadband                      , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.device_type                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.high_limit                    , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.interface_value               , type = float                            .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.limit_enable                  , type = BACnetLimitEnable                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.low_limit                     , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.max_pres_value                , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.min_pres_value                , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.resolution                    , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    analog_output         (1, com.optio3.protocol.model.bacnet.objects.analog_output.class),
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = float                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.units                         , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.cov_increment                 , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.deadband                      , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fault_high_limit              , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.fault_low_limit               , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.high_limit                    , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.limit_enable                  , type = BACnetLimitEnable                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.low_limit                     , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.max_pres_value                , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.min_pres_value                , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.resolution                    , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    analog_value          (2, com.optio3.protocol.model.bacnet.objects.analog_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.average_value            , type = float                              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.maximum_value            , type = float                              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.minimum_value            , type = float                              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier        , type = BACnetObjectIdentifier             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name              , type = String                             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_property_reference, type = BACnetDeviceObjectPropertyReference.class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type              , type = BACnetObjectTypeOrUnknown          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list            , type = BACnetPropertyIdentifierOrUnknown  .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.valid_samples            , type = Unsigned32                         .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.attempted_samples        , type = Unsigned32                         .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.window_interval          , type = Unsigned32                         .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.window_samples           , type = Unsigned32                         .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.description              , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.maximum_value_timestamp  , type = BACnetDateTime                     .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.minimum_value_timestamp  , type = BACnetDateTime                     .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location         , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name             , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                     , type = BACnetNameValue                    .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.variance_value           , type = float                              .class, conformance = BACnetConformance.Optional)
    averaging             (18, com.optio3.protocol.model.bacnet.objects.averaging.class),
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.polarity                      , type = BACnetPolarity                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetBinaryPV                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.active_text                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.alarm_value                   , type = BACnetBinaryPV                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.change_of_state_count         , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.change_of_state_time          , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.device_type                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.elapsed_active_time           , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.inactive_text                 , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.interface_value               , type = BACnetBinaryPV                   .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_of_active_time_reset     , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_of_state_count_reset     , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    binary_input          (3, com.optio3.protocol.model.bacnet.objects.binary_input.class),
    @PropertyType(property = BACnetPropertyIdentifier.blink_warn_enable             , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Required, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.egress_active                 , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.egress_time                   , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = BACnetBinaryLightingPV           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetBinaryLightingPV           .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.elapsed_active_time           , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.feedback_value                , type = BACnetBinaryLightingPV           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.polarity                      , type = BACnetPolarity                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.power                         , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.strike_count                  , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_of_active_time_reset     , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_of_strike_count_reset    , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    binary_lighting_output(55, com.optio3.protocol.model.bacnet.objects.binary_lighting_output.class),
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Required, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.polarity                      , type = BACnetPolarity                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = BACnetBinaryPV                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetBinaryPV                   .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.active_text                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.change_of_state_count         , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.change_of_state_time          , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.device_type                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.elapsed_active_time           , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.feedback_value                , type = BACnetBinaryPV                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.inactive_text                 , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.interface_value               , type = BACnetBinaryPV                   .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.minimum_off_time              , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.minimum_on_time               , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_of_active_time_reset     , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_of_state_count_reset     , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    binary_output         (4, com.optio3.protocol.model.bacnet.objects.binary_output.class),
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetBinaryPV                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.active_text                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.alarm_value                   , type = BACnetBinaryPV                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.change_of_state_count         , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.change_of_state_time          , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.elapsed_active_time           , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.inactive_text                 , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.minimum_off_time              , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.minimum_on_time               , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = BACnetBinaryPV                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_of_active_time_reset     , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_of_state_count_reset     , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    binary_value          (5, com.optio3.protocol.model.bacnet.objects.binary_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BitSet                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.alarm_values                  , type = BitSet                           .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.bit_mask                      , type = BitSet                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.bit_text                      , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = BitSet                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    bitstring_value       (39, com.optio3.protocol.model.bacnet.objects.bitstring_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.date_list        , type = BACnetCalendarEntry              .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier, type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name      , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type      , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value    , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list    , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.description      , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name     , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags             , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    calendar              (6, com.optio3.protocol.model.bacnet.objects.calendar.class),
    @PropertyType(property = BACnetPropertyIdentifier.last_priority                     , type = Unsigned32                         .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier                 , type = BACnetObjectIdentifier             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                       , type = String                             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                       , type = BACnetObjectTypeOrUnknown          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                    , type = boolean                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                     , type = BACnetPropertyIdentifierOrUnknown  .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                      , type = BACnetStatusFlags                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.write_status                      , type = BACnetWriteStatus                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.channel_number                    , type = Unsigned16                         .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.control_groups                    , type = Unsigned32                         .class, conformance = BACnetConformance.RequiredAndWritable, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.list_of_object_property_references, type = BACnetDeviceObjectPropertyReference.class, conformance = BACnetConformance.RequiredAndWritable, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                     , type = BACnetChannelValue                 .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions                 , type = BACnetEventTransitionBits          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.allow_group_delay_inhibit         , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                       , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable            , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                      , type = BACnetEventTransitionBits          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts               , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config        , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                       , type = BACnetEventState                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps                 , type = BACnetTimeStamp                    .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.execution_delay                   , type = Unsigned32                         .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class                , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                       , type = BACnetNotifyType                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location                  , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                      , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                       , type = BACnetReliability                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit    , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                              , type = BACnetNameValue                    .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                      , type = BACnetValueSource                  .class, conformance = BACnetConformance.Optional)
    channel               (53, com.optio3.protocol.model.bacnet.objects.channel.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.alarm_values                  , type = String                           .class, conformance = BACnetConformance.Optional, isOptional = true, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fault_values                  , type = String                           .class, conformance = BACnetConformance.Optional, isOptional = true, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    characterstring_value (40, com.optio3.protocol.model.bacnet.objects.characterstring_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.action                        , type = BACnetActionList                 .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.all_writes_successful         , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.in_process                    , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = Unsigned32                       .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.action_text                   , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    command               (7, com.optio3.protocol.model.bacnet.objects.command.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetAuthenticationFactor       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.supported_formats             , type = BACnetAuthenticationFactorFormat .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.update_time                   , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.supported_format_classes      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    credential_data_input (37, com.optio3.protocol.model.bacnet.objects.credential_data_input.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetDate                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = BACnetDate                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    date_value            (42, com.optio3.protocol.model.bacnet.objects.date_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetDate                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = BACnetDate                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    datepattern_value     (41, com.optio3.protocol.model.bacnet.objects.datepattern_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetDateTime                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.is_utc                        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    datetime_value        (44, com.optio3.protocol.model.bacnet.objects.datetime_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetDateTime                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.is_utc                        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    datetimepattern_value (43, com.optio3.protocol.model.bacnet.objects.datetimepattern_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.apdu_timeout                       , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.application_software_version       , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.database_revision                  , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.device_address_binding             , type = BACnetAddressBinding             .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.firmware_revision                  , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.max_apdu_length_accepted           , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.model_name                         , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.number_of_apdu_retries             , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier                  , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_list                        , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                        , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                        , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                      , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.protocol_object_types_supported    , type = BACnetObjectTypesSupported       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.protocol_revision                  , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.protocol_services_supported        , type = BACnetServicesSupported          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.protocol_version                   , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.segmentation_supported             , type = BACnetSegmentation               .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.system_status                      , type = BACnetDeviceStatus               .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.vendor_identifier                  , type = Unsigned16                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.vendor_name                        , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.active_cov_multiple_subscriptions  , type = BACnetCOVMultipleSubscription    .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.active_cov_subscriptions           , type = BACnetCOVSubscription            .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.active_vt_sessions                 , type = BACnetVTSession                  .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.align_intervals                    , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.apdu_segment_timeout               , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.backup_and_restore_state           , type = BACnetBackupState                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.backup_failure_timeout             , type = Unsigned16                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.backup_preparation_time            , type = Unsigned16                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.configuration_files                , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.daylight_savings_status            , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.deployed_profile_location          , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                        , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable             , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                       , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts                , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config         , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                        , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps                  , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.interval_offset                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_restart_reason                , type = BACnetRestartReason              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_restore_time                  , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.local_date                         , type = BACnetDate                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.local_time                         , type = BACnetTime                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.location                           , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.max_info_frames                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.max_master                         , type = Unsigned8                        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.max_segments_accepted              , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class                 , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                        , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                       , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                        , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit     , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.restart_notification_recipients    , type = BACnetRecipient                  .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.restore_completion_time            , type = Unsigned16                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.restore_preparation_time           , type = Unsigned16                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.serial_number                      , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                       , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.structured_object_list             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.tags                               , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_of_device_restart             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_synchronization_interval      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_synchronization_recipients    , type = BACnetRecipient                  .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.utc_offset                         , type = int                              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.utc_time_synchronization_recipients, type = BACnetRecipient                  .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.vt_classes_supported               , type = BACnetVTClass                    .class, conformance = BACnetConformance.Optional, isList = true)
    device                (8, com.optio3.protocol.model.bacnet.objects.device.class),
    @PropertyType(property = BACnetPropertyIdentifier.group_id            , type = Unsigned8                        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.group_members       , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.machine_room_id     , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier   , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name         , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type         , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list       , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.description         , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.group_mode          , type = BACnetLiftGroupMode              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.landing_call_control, type = BACnetLandingCallStatus          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.landing_calls       , type = BACnetLandingCallStatus          .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location    , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name        , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    elevator_group        (57, com.optio3.protocol.model.bacnet.objects.elevator_group.class),
    @PropertyType(property = BACnetPropertyIdentifier.elevator_group                , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.group_id                      , type = Unsigned8                        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.installation_id               , type = Unsigned8                        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.operation_direction           , type = BACnetEscalatorOperationDirection.class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.passenger_alarm               , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.energy_meter                  , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.energy_meter_ref              , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.escalator_mode                , type = BACnetEscalatorMode              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fault_signals                 , type = BACnetEscalatorFault             .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.power_mode                    , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    escalator             (58, com.optio3.protocol.model.bacnet.objects.escalator.class),
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_parameters              , type = BACnetEventParameter               .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                    .class, conformance = BACnetConformance.Required, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_type                    , type = BACnetEventType                    .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                         .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_property_reference     , type = BACnetDeviceObjectPropertyReference.class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown  .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference      .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fault_parameters              , type = BACnetFaultParameter               .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.fault_type                    , type = BACnetFaultType                    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                    .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    event_enrollment      (9, com.optio3.protocol.model.bacnet.objects.event_enrollment.class),
    @PropertyType(property = BACnetPropertyIdentifier.buffer_size                   , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.log_buffer                    , type = BACnetEventLogRecord             .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.stop_when_full                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.total_record_count            , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.enable                        , type = boolean                          .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.record_count                  , type = Unsigned32                       .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.last_notify_record            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_threshold        , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.records_since_notification    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.start_time                    , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.stop_time                     , type = BACnetDateTime                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    event_log             (25, com.optio3.protocol.model.bacnet.objects.event_log.class),
    @PropertyType(property = BACnetPropertyIdentifier.file_access_method, type = BACnetFileAccessMethod           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.file_size         , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.file_type         , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.modification_date , type = BACnetDateTime                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name       , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type       , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list     , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.read_only         , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.archive           , type = boolean                          .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.description       , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name      , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.record_count      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags              , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    file                  (10, com.optio3.protocol.model.bacnet.objects.file.class),
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.group_members                 , type = BACnetDeviceObjectPropertyReference.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.member_status_flags           , type = BACnetStatusFlags                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetPropertyAccessResult         .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown  .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.client_cov_increment          , type = BACnetClientCOV                    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.cov_resubscription_interval   , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.covu_period                   , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.covu_recipients               , type = BACnetRecipient                    .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference      .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                    .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.group_member_names            , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.requested_update_interval     , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                    .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.update_interval               , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    global_group          (26, com.optio3.protocol.model.bacnet.objects.global_group.class),
    @PropertyType(property = BACnetPropertyIdentifier.list_of_group_members, type = ReadAccessSpecification          .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier    , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name          , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type          , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value        , type = ReadAccessResult                 .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.property_list        , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.description          , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location     , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name         , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                 , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    group                 (11, com.optio3.protocol.model.bacnet.objects.group.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = int                              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.units                         , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.cov_increment                 , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.deadband                      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fault_high_limit              , type = int                              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.fault_low_limit               , type = int                              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.high_limit                    , type = int                              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.limit_enable                  , type = BACnetLimitEnable                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.low_limit                     , type = int                              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.max_pres_value                , type = int                              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.min_pres_value                , type = int                              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = int                              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.resolution                    , type = int                              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    integer_value         (45, com.optio3.protocol.model.bacnet.objects.integer_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = double                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.units                         , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.cov_increment                 , type = double                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.deadband                      , type = double                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fault_high_limit              , type = double                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.fault_low_limit               , type = double                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.high_limit                    , type = double                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.limit_enable                  , type = BACnetLimitEnable                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.low_limit                     , type = double                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.max_pres_value                , type = double                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.min_pres_value                , type = double                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = double                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.resolution                    , type = double                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    large_analog_value    (46, com.optio3.protocol.model.bacnet.objects.large_analog_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.accepted_modes                , type = BACnetLifeSafetyMode             .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.operation_expected            , type = BACnetLifeSafetyOperation        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetLifeSafetyState            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.silenced                      , type = BACnetSilencedState              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.tracking_value                , type = BACnetLifeSafetyState            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.mode                          , type = BACnetLifeSafetyMode             .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.alarm_values                  , type = BACnetLifeSafetyState            .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.device_type                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.direct_reading                , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fault_values                  , type = BACnetLifeSafetyState            .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.life_safety_alarm_values      , type = BACnetLifeSafetyState            .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.maintenance_required          , type = BACnetMaintenance                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.member_of                     , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.setting                       , type = Unsigned8                        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.units                         , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    life_safety_point     (21, com.optio3.protocol.model.bacnet.objects.life_safety_point.class),
    @PropertyType(property = BACnetPropertyIdentifier.accepted_modes                , type = BACnetLifeSafetyMode             .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.operation_expected            , type = BACnetLifeSafetyOperation        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetLifeSafetyState            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.silenced                      , type = BACnetSilencedState              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.tracking_value                , type = BACnetLifeSafetyState            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.zone_members                  , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.mode                          , type = BACnetLifeSafetyMode             .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.alarm_values                  , type = BACnetLifeSafetyState            .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.device_type                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fault_values                  , type = BACnetLifeSafetyState            .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.life_safety_alarm_values      , type = BACnetLifeSafetyState            .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.maintenance_required          , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.member_of                     , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    life_safety_zone      (22, com.optio3.protocol.model.bacnet.objects.life_safety_zone.class),
    @PropertyType(property = BACnetPropertyIdentifier.car_door_status               , type = BACnetDoorStatus                 .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.car_moving_direction          , type = BACnetLiftCarDirection           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.car_position                  , type = Unsigned8                        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.elevator_group                , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.fault_signals                 , type = BACnetLiftFault                  .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.group_id                      , type = Unsigned8                        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.installation_id               , type = Unsigned8                        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.passenger_alarm               , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.assigned_landing_calls        , type = BACnetAssignedLandingCalls       .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.car_assigned_direction        , type = BACnetLiftCarDirection           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.car_door_command              , type = BACnetLiftCarDoorCommand         .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.car_door_text                 , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.car_door_zone                 , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.car_drive_status              , type = BACnetLiftCarDriveStatus         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.car_load                      , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.car_load_units                , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.car_mode                      , type = BACnetLiftCarMode                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.energy_meter                  , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.energy_meter_ref              , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.floor_text                    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.higher_deck                   , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.landing_door_status           , type = BACnetLandingDoorStatus          .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.lower_deck                    , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.making_car_call               , type = Unsigned8                        .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.next_stopping_floor           , type = Unsigned8                        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.registered_car_call           , type = BACnetLiftCarCallList            .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    lift                  (59, com.optio3.protocol.model.bacnet.objects.lift.class),
    @PropertyType(property = BACnetPropertyIdentifier.blink_warn_enable                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority         , type = Unsigned32                       .class, conformance = BACnetConformance.Required, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.default_fade_time                , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.default_ramp_rate                , type = float                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.default_step_increment           , type = float                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.egress_active                    , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.egress_time                      , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.in_progress                      , type = BACnetLightingInProgress         .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.lighting_command_default_priority, type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier                , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                      , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                      , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                   , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                   , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                    , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default               , type = float                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                     , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.tracking_value                   , type = float                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.lighting_command                 , type = BACnetLightingCommand            .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                    , type = float                            .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array               , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.cov_increment                    , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                      , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.feedback_value                   , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.instantaneous_power              , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time                , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.max_actual_value                 , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.min_actual_value                 , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.power                            , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location                 , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                     , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                      , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit   , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                             , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.transition                       , type = BACnetLightingTransition         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                     , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array               , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    lighting_output       (54, com.optio3.protocol.model.bacnet.objects.lighting_output.class),
    @PropertyType(property = BACnetPropertyIdentifier.actual_shed_level             , type = BACnetShedLevel                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.expected_shed_level           , type = BACnetShedLevel                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetShedState                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.shed_level_descriptions       , type = String                           .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.duty_window                   , type = Unsigned32                       .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.enable                        , type = boolean                          .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.requested_shed_level          , type = BACnetShedLevel                  .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.shed_duration                 , type = Unsigned32                       .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.shed_levels                   , type = Unsigned32                       .class, conformance = BACnetConformance.RequiredAndWritable, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.start_time                    , type = BACnetDateTime                   .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.full_duty_baseline            , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.state_description             , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    load_control          (28, com.optio3.protocol.model.bacnet.objects.load_control.class),
    @PropertyType(property = BACnetPropertyIdentifier.action                        , type = BACnetAction                     .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.controlled_variable_reference , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.controlled_variable_units     , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.controlled_variable_value     , type = float                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.manipulated_variable_reference, type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.output_units                  , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = float                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.priority_for_writing          , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.setpoint                      , type = float                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.setpoint_reference            , type = BACnetSetpointReference          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.bias                          , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.cov_increment                 , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.deadband                      , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.derivative_constant           , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.derivative_constant_units     , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.error_limit                   , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.integral_constant             , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.integral_constant_units       , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.low_diff_limit                , type = float                            .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.maximum_output                , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.minimum_output                , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.proportional_constant         , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.proportional_constant_units   , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.update_interval               , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    loop                  (12, com.optio3.protocol.model.bacnet.objects.loop.class),
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.number_of_states              , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.alarm_values                  , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.device_type                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fault_values                  , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.interface_value               , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.state_text                    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    multi_state_input     (13, com.optio3.protocol.model.bacnet.objects.multi_state_input.class),
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Required, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.number_of_states              , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = Unsigned32                       .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.device_type                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.feedback_value                , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.interface_value               , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.state_text                    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    multi_state_output    (14, com.optio3.protocol.model.bacnet.objects.multi_state_output.class),
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.number_of_states              , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.alarm_values                  , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fault_values                  , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.state_text                    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    multi_state_value     (19, com.optio3.protocol.model.bacnet.objects.multi_state_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.apdu_length                      , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.changes_pending                  , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.link_speed                       , type = float                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.network_number                   , type = Unsigned16                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.network_number_quality           , type = BACnetNetworkNumberQuality       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.network_type                     , type = BACnetNetworkType                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier                , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                      , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                      , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                   , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                    , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.protocol_level                   , type = BACnetProtocolLevel              .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                      , type = BACnetReliability                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                     , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions                , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.auto_slave_discovery             , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.bacnet_ip_global_address         , type = BACnetHostNPort                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.bacnet_ip_mode                   , type = BACnetIPMode                     .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.bacnet_ip_multicast_address      , type = byte[]                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.bacnet_ip_nat_traversal          , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.bacnet_ip_udp_port               , type = Unsigned16                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.bacnet_ipv6_mode                 , type = BACnetIPMode                     .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.bacnet_ipv6_multicast_address    , type = byte[]                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.bacnet_ipv6_udp_port             , type = Unsigned16                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.bbmd_accept_fd_registrations     , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.bbmd_broadcast_distribution_table, type = BACnetBDTEntry                   .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.bbmd_foreign_device_table        , type = BACnetFDTEntry                   .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.command                          , type = BACnetNetworkPortCommand         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                      , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable           , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                     , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts              , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config       , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                      , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps                , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fd_bbmd_address                  , type = BACnetHostNPort                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.fd_subscription_lifetime         , type = Unsigned16                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ip_address                       , type = byte[]                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ip_default_gateway               , type = byte[]                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ip_dhcp_enable                   , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ip_dhcp_lease_time               , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ip_dhcp_lease_time_remaining     , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ip_dhcp_server                   , type = byte[]                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ip_dns_server                    , type = byte[]                           .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.ip_subnet_mask                   , type = byte[]                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ipv6_address                     , type = byte[]                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ipv6_auto_addressing_enable      , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ipv6_default_gateway             , type = byte[]                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ipv6_dhcp_lease_time             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ipv6_dhcp_lease_time_remaining   , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ipv6_dhcp_server                 , type = byte[]                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ipv6_dns_server                  , type = byte[]                           .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.ipv6_prefix_length               , type = Unsigned8                        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.ipv6_zone_index                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.link_speed_autonegotiate         , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.link_speeds                      , type = float                            .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.mac_address                      , type = byte[]                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.manual_slave_address_binding     , type = BACnetAddressBinding             .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.max_info_frames                  , type = Unsigned8                        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.max_master                       , type = Unsigned8                        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.network_interface_name           , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class               , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                      , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location                 , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                     , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reference_port                   , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit   , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.routing_table                    , type = BACnetRouterEntry                .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.slave_address_binding            , type = BACnetAddressBinding             .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.slave_proxy_enable               , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                             , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.virtual_mac_address_table        , type = BACnetVMACEntry                  .class, conformance = BACnetConformance.Optional, isList = true)
    network_port          (56, com.optio3.protocol.model.bacnet.objects.network_port.class),
    @PropertyType(property = BACnetPropertyIdentifier.distribution_key_revision       , type = Unsigned8                        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.key_sets                        , type = BACnetSecurityKeySet             .class, conformance = BACnetConformance.Required, isArray = true, arrayLength = 2)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier               , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                     , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                     , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                   , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.supported_security_algorithms   , type = Unsigned8                        .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.update_key_set_timeout          , type = Unsigned16                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.base_device_security_policy     , type = BACnetSecurityLevel              .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.do_not_hide                     , type = boolean                          .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.last_key_server                 , type = BACnetAddressBinding             .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.network_access_security_policies, type = BACnetNetworkSecurityPolicy      .class, conformance = BACnetConformance.RequiredAndWritable, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.packet_reorder_time             , type = Unsigned32                       .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.security_pdu_timeout            , type = Unsigned16                       .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.security_time_window            , type = Unsigned32                       .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.description                     , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location                , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                    , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                            , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    network_security      (38, com.optio3.protocol.model.bacnet.objects.network_security.class),
    @PropertyType(property = BACnetPropertyIdentifier.ack_required                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.priority                      , type = Unsigned32                       .class, conformance = BACnetConformance.Required, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.recipient_list                , type = BACnetDestination                .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    notification_class    (15, com.optio3.protocol.model.bacnet.objects.notification_class.class),
    @PropertyType(property = BACnetPropertyIdentifier.local_forwarding_only         , type = boolean                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.process_identifier_filter     , type = BACnetProcessIdSelection           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown  .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.recipient_list                , type = BACnetDestination                  .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.subscribed_recipients         , type = BACnetEventNotificationSubscription.class, conformance = BACnetConformance.RequiredAndWritable, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.port_filter                   , type = BACnetPortPermission               .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                    .class, conformance = BACnetConformance.Optional, isArray = true)
    notification_forwarder(51, com.optio3.protocol.model.bacnet.objects.notification_forwarder.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = byte[]                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = byte[]                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    octetstring_value     (47, com.optio3.protocol.model.bacnet.objects.octetstring_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.units                         , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.cov_increment                 , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.deadband                      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.fault_high_limit              , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.fault_low_limit               , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.high_limit                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.limit_enable                  , type = BACnetLimitEnable                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.low_limit                     , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.max_pres_value                , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.min_pres_value                , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.resolution                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    positive_integer_value(48, com.optio3.protocol.model.bacnet.objects.positive_integer_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.program_state                 , type = BACnetProgramState               .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.program_change                , type = BACnetProgramRequest             .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description_of_halt           , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.instance_of                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.program_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reason_for_halt               , type = BACnetProgramError               .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    program               (16, com.optio3.protocol.model.bacnet.objects.program.class),
    @PropertyType(property = BACnetPropertyIdentifier.count                         , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.count_before_change           , type = Unsigned32                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.count_change_time             , type = BACnetDateTime                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = float                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.scale_factor                  , type = float                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.units                         , type = BACnetEngineeringUnits           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.update_time                   , type = BACnetDateTime                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.adjust_value                  , type = float                            .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.cov_increment                 , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.cov_period                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.deadband                      , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.high_limit                    , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.input_reference               , type = BACnetObjectPropertyReference    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.limit_enable                  , type = BACnetLimitEnable                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.low_limit                     , type = float                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                    , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal             , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    pulse_converter       (24, com.optio3.protocol.model.bacnet.objects.pulse_converter.class),
    @PropertyType(property = BACnetPropertyIdentifier.effective_period                  , type = BACnetDateRange                    .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.list_of_object_property_references, type = BACnetDeviceObjectPropertyReference.class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier                 , type = BACnetObjectIdentifier             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                       , type = String                             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                       , type = BACnetObjectTypeOrUnknown          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                    , type = boolean                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                     , type = AnyValue                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.priority_for_writing              , type = Unsigned32                         .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                     , type = BACnetPropertyIdentifierOrUnknown  .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                       , type = BACnetReliability                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.schedule_default                  , type = AnyValue                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                      , type = BACnetStatusFlags                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions                 , type = BACnetEventTransitionBits          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                       , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable            , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                      , type = BACnetEventTransitionBits          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts               , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config        , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                       , type = BACnetEventState                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps                 , type = BACnetTimeStamp                    .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.exception_schedule                , type = BACnetSpecialEvent                 .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class                , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                       , type = BACnetNotifyType                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location                  , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                      , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit    , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                              , type = BACnetNameValue                    .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.weekly_schedule                   , type = BACnetDailySchedule                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 7)
    schedule              (17, com.optio3.protocol.model.bacnet.objects.schedule.class),
    @PropertyType(property = BACnetPropertyIdentifier.node_type                       , type = BACnetNodeType                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier               , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                     , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                     , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                   , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.subordinate_list                , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.default_subordinate_relationship, type = BACnetRelationship               .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                     , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.node_subtype                    , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location                , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                    , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.represents                      , type = BACnetDeviceObjectReference      .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.subordinate_annotations         , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.subordinate_node_types          , type = BACnetNodeType                   .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.subordinate_relationships       , type = BACnetRelationship               .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.subordinate_tags                , type = BACnetNameValueCollection        .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.tags                            , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    structured_view       (29, com.optio3.protocol.model.bacnet.objects.structured_view.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetTime                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = BACnetTime                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    time_value            (50, com.optio3.protocol.model.bacnet.objects.time_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                           .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown        .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                 , type = BACnetTime                       .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.command_time_array            , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    @PropertyType(property = BACnetPropertyIdentifier.current_command_priority      , type = Unsigned32                       .class, conformance = BACnetConformance.Optional, isOptional = true)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits        .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                           .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.last_command_time             , type = BACnetTimeStamp                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                 .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                , type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_array                , type = BACnetPriorityArray              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                           .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.relinquish_default            , type = BACnetTime                       .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                  .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.value_source                  , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.value_source_array            , type = BACnetValueSource                .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 16)
    timepattern_value     (49, com.optio3.protocol.model.bacnet.objects.timepattern_value.class),
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier                 , type = BACnetObjectIdentifier             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                       , type = String                             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                       , type = BACnetObjectTypeOrUnknown          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.present_value                     , type = Unsigned32                         .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                     , type = BACnetPropertyIdentifierOrUnknown  .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                      , type = BACnetStatusFlags                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.timer_running                     , type = boolean                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.timer_state                       , type = BACnetTimerState                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions                 , type = BACnetEventTransitionBits          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.alarm_values                      , type = BACnetTimerState                   .class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.default_timeout                   , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                       , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit           , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref       , type = BACnetObjectPropertyReference      .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable            , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                      , type = BACnetEventTransitionBits          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts               , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config        , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                       , type = BACnetEventState                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps                 , type = BACnetTimeStamp                    .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.expiration_time                   , type = BACnetDateTime                     .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.initial_timeout                   , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_state_change                 , type = BACnetTimerTransition              .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.list_of_object_property_references, type = BACnetDeviceObjectPropertyReference.class, conformance = BACnetConformance.Optional, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.max_pres_value                    , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.min_pres_value                    , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class                , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                       , type = BACnetNotifyType                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.out_of_service                    , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.priority_for_writing              , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location                  , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                      , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                       , type = BACnetReliability                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit    , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.resolution                        , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.state_change_values               , type = BACnetTimerStateChangeValue        .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 7)
    @PropertyType(property = BACnetPropertyIdentifier.tags                              , type = BACnetNameValue                    .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay                        , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.time_delay_normal                 , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.update_time                       , type = BACnetDateTime                     .class, conformance = BACnetConformance.Optional)
    timer                 (31, com.optio3.protocol.model.bacnet.objects.timer.class),
    @PropertyType(property = BACnetPropertyIdentifier.buffer_size                   , type = Unsigned32                         .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.log_buffer                    , type = BACnetLogRecord                    .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.logging_type                  , type = BACnetLoggingType                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown  .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.stop_when_full                , type = boolean                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.total_record_count            , type = Unsigned32                         .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.enable                        , type = boolean                            .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.record_count                  , type = Unsigned32                         .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.align_intervals               , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.client_cov_increment          , type = BACnetClientCOV                    .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.cov_resubscription_interval   , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference      .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                    .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.interval_offset               , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_notify_record            , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.log_device_object_property    , type = BACnetDeviceObjectPropertyReference.class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.log_interval                  , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_threshold        , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.records_since_notification    , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.start_time                    , type = BACnetDateTime                     .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.stop_time                     , type = BACnetDateTime                     .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                    .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.trigger                       , type = boolean                            .class, conformance = BACnetConformance.Optional)
    trend_log             (20, com.optio3.protocol.model.bacnet.objects.trend_log.class),
    @PropertyType(property = BACnetPropertyIdentifier.buffer_size                   , type = Unsigned32                         .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.event_state                   , type = BACnetEventState                   .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.log_buffer                    , type = BACnetLogMultipleRecord            .class, conformance = BACnetConformance.Required, isList = true)
    @PropertyType(property = BACnetPropertyIdentifier.log_device_object_property    , type = BACnetDeviceObjectPropertyReference.class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.log_interval                  , type = Unsigned32                         .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.logging_type                  , type = BACnetLoggingType                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_identifier             , type = BACnetObjectIdentifier             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_name                   , type = String                             .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.object_type                   , type = BACnetObjectTypeOrUnknown          .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.property_list                 , type = BACnetPropertyIdentifierOrUnknown  .class, conformance = BACnetConformance.Required, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.status_flags                  , type = BACnetStatusFlags                  .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.stop_when_full                , type = boolean                            .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.total_record_count            , type = Unsigned32                         .class, conformance = BACnetConformance.Required)
    @PropertyType(property = BACnetPropertyIdentifier.enable                        , type = boolean                            .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.record_count                  , type = Unsigned32                         .class, conformance = BACnetConformance.RequiredAndWritable)
    @PropertyType(property = BACnetPropertyIdentifier.acked_transitions             , type = BACnetEventTransitionBits          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.align_intervals               , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.description                   , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit       , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_algorithm_inhibit_ref   , type = BACnetObjectPropertyReference      .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_detection_enable        , type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_enable                  , type = BACnetEventTransitionBits          .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts           , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_message_texts_config    , type = String                             .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.event_time_stamps             , type = BACnetTimeStamp                    .class, conformance = BACnetConformance.Optional, isArray = true, arrayLength = 3)
    @PropertyType(property = BACnetPropertyIdentifier.interval_offset               , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.last_notify_record            , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_class            , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notification_threshold        , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.notify_type                   , type = BACnetNotifyType                   .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_location              , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.profile_name                  , type = String                             .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.records_since_notification    , type = Unsigned32                         .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability                   , type = BACnetReliability                  .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.reliability_evaluation_inhibit, type = boolean                            .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.start_time                    , type = BACnetDateTime                     .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.stop_time                     , type = BACnetDateTime                     .class, conformance = BACnetConformance.Optional)
    @PropertyType(property = BACnetPropertyIdentifier.tags                          , type = BACnetNameValue                    .class, conformance = BACnetConformance.Optional, isArray = true)
    @PropertyType(property = BACnetPropertyIdentifier.trigger                       , type = boolean                            .class, conformance = BACnetConformance.Optional)
    trend_log_multiple    (27, com.optio3.protocol.model.bacnet.objects.trend_log_multiple.class);
    // @formatter:on

    private final byte                                        m_encoding;
    private final Class<? extends BACnetObjectModel>          m_model;
    private final BACnetObjectTypeOrUnknown                   m_singleton;
    private       Map<BACnetPropertyIdentifier, PropertyType> m_propertyTypes;

    BACnetObjectType(int encoding,
                     Class<? extends BACnetObjectModel> clz)
    {
        m_encoding  = (byte) encoding;
        m_model     = clz;
        m_singleton = new BACnetObjectTypeOrUnknown(this);
    }

    public static BACnetObjectType parse(String value)
    {
        return BACnetObjectTypeOrUnknown.parseCached(value);
    }

    @HandlerForDecoding
    public static BACnetObjectType parse(byte value)
    {
        return BACnetObjectTypeOrUnknown.parseCached(value);
    }

    @HandlerForEncoding
    public byte encoding()
    {
        return m_encoding;
    }

    @Override
    public int getEncodingValue()
    {
        return m_encoding;
    }

    public BACnetObjectTypeOrUnknown forRequest()
    {
        return m_singleton;
    }

    public Map<BACnetPropertyIdentifier, PropertyType> propertyTypes()
    {
        if (m_propertyTypes == null)
        {
            Map<BACnetPropertyIdentifier, PropertyType> map = Maps.newHashMap();

            try
            {
                PropertyType[] defs = this.getClass()
                                          .getField(name())
                                          .getAnnotationsByType(PropertyType.class);
                for (PropertyType def : defs)
                {
                    map.put(def.property(), def);
                }
            }
            catch (NoSuchFieldException | SecurityException e)
            {
                throw new RuntimeException(e);
            }

            m_propertyTypes = Collections.unmodifiableMap(map);
        }

        return m_propertyTypes;
    }

    public List<BACnetPropertyIdentifier> getPropertiesByConformance(BACnetConformance code)
    {
        List<BACnetPropertyIdentifier> res = Lists.newArrayList();
        for (PropertyType pt : propertyTypes().values())
        {
            if (pt.conformance() == code)
            {
                res.add(pt.property());
            }
        }

        res.sort((o1, o2) ->
                 {
                     return o1.ordinal() - o2.ordinal();
                 });

        return res;
    }

    public boolean hasProperty(BACnetPropertyIdentifier propId)
    {
        return propertyTypes().containsKey(propId);
    }

    public boolean isArrayProperty(BACnetPropertyIdentifier propId)
    {
        PropertyType pd = propertyTypes().get(propId);
        return pd != null && pd.isArray();
    }

    public boolean isListProperty(BACnetPropertyIdentifier propId)
    {
        PropertyType pd = propertyTypes().get(propId);
        return pd != null && pd.isList();
    }

    public Class<? extends BACnetObjectModel> getModel()
    {
        return m_model;
    }

    public BACnetObjectModel allocateNewObject(BACnetObjectIdentifier objId)
    {
        BACnetObjectModel obj = Reflection.newInstance(m_model);
        obj.setObjectIdentity(objId);
        return obj;
    }

    public BACnetObjectIdentifier asObjectIdentifier(int instanceNumber)
    {
        return new BACnetObjectIdentifier(this, instanceNumber);
    }
}
