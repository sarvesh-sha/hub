/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * APN Log
 * <p>Retrieve a subscriber's APN session log or APN connection details for a specified time frame.</p><p>You can use these endpoints to retrieve the APN information, and sort and filter the returned results.</p>      <p>The <em>APN log</em> is a historical record of the subscriber-generated IP traffic. The log includes the following information&#58;</p>      <ul>        <li>Subscriber credentials used to access the APN</li>        <li>Start and stop dates and times for each session</li>        <li>Mobile codes that identify the network accessed during each session (if provided by the network operator)</li>        <li>Subscriber's IP address, either fixed or dynamic</li>        <li>Total amount of data the subscriber sent during the session (MO data)</li>        <li>Total amount of data the subscriber received during the session (MT data)</li>        <li>Reason for the termination of each session</li>      </ul>      <p>The <em>APN details</em> include the following information&#58;</p>      <ul>        <li>Name of the APN</li>        <li>Subscriber credentials used to access the APN</li>        <li>Internet access status</li>        <li>Subscriber's private IP address</li>        </ul>
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.infra.pelion.model;

public class ApnLog
{

    /**
     * The total amount of mobile originated (MO) data transferred during the session, in bytes.
     */
    public String mobileOriginatedData = null;
    /**
     * The total amount of mobile terminated (MT) data transferred during the session, in bytes.
     */
    public String mobileTerminatedData = null;
    /**
     * The Mobile Country Code and Mobile Network Code that together identify the network (if provided by the network operator). 'N/A' indicates that the operator has not provided these codes.
     */
    public String networkCode          = null;
    /**
     * The subscriber's APN password.
     */
    public String password             = null;
    /**
     * <p>The reason the session was terminated&#58;</p> <ul> <li><em>User-Request</em> - the subscriber successfully closed the session.</li> <li><em>Access-Accept</em> - the session is ongoing.</li> <li><em>Access-Reject</em> - the subscriber was refused access to the APN due to invalid user credentials.</li> <li><em>Admin-Reset</em> - the session was terminated by the network, possibly due to a location update.</li> <li><em>NAS-Error</em> - the subscriber could not connect to the APN due to a network authentication server error.</li> </ul>
     */
    public String reason               = null;
    /**
     * The subscriber's static IP address, or the word \"dynamic\" to indicate a dynamic IP address.
     */
    public String subscriberIp         = null;
    /**
     * The subscriber's username for the APN connection.
     */
    public String username             = null;

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class ApnLog {\n");

        sb.append("    mobileOriginatedData: ")
          .append(toIndentedString(mobileOriginatedData))
          .append("\n");
        sb.append("    mobileTerminatedData: ")
          .append(toIndentedString(mobileTerminatedData))
          .append("\n");
        sb.append("    networkCode: ")
          .append(toIndentedString(networkCode))
          .append("\n");
        sb.append("    password: ")
          .append(toIndentedString(password))
          .append("\n");
        sb.append("    reason: ")
          .append(toIndentedString(reason))
          .append("\n");
        sb.append("    subscriberIp: ")
          .append(toIndentedString(subscriberIp))
          .append("\n");
        sb.append("    username: ")
          .append(toIndentedString(username))
          .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(java.lang.Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString()
                .replace("\n", "\n    ");
    }
}
