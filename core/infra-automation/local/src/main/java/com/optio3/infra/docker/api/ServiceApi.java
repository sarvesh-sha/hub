/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.
 *
 * OpenAPI spec version: 1.28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.infra.docker.api;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;

import com.optio3.infra.docker.model.ExtendedServiceSpec;
import com.optio3.infra.docker.model.Service;
import com.optio3.infra.docker.model.ServiceCreateResponse;
import com.optio3.infra.docker.model.ServiceSpec;
import com.optio3.infra.docker.model.ServiceUpdateResponse;

@Path("/")
public interface ServiceApi
{
    @POST
    @Path("/services/create")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public ServiceCreateResponse serviceCreate(ServiceSpec body,
                                               @HeaderParam("X-Registry-Auth") String xRegistryAuth);

    @DELETE
    @Path("/services/{id}")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json", "text/plain" })
    public void serviceDelete(@PathParam("id") String id);

    @GET
    @Path("/services/{id}")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json", "text/plain" })
    public Service serviceInspect(@PathParam("id") String id);

    @GET
    @Path("/services")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json", "text/plain" })
    public List<Service> serviceList(@QueryParam("filters") String filters);

    @GET
    @Path("/services/{id}/logs")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/vnd.docker.raw-stream", "application/json" })
    public String serviceLogs(@PathParam("id") String id,
                              @QueryParam("details") Boolean details,
                              @QueryParam("follow") Boolean follow,
                              @QueryParam("stdout") Boolean stdout,
                              @QueryParam("stderr") Boolean stderr,
                              @QueryParam("since") Integer since,
                              @QueryParam("timestamps") Boolean timestamps,
                              @QueryParam("tail") String tail);

    @POST
    @Path("/services/{id}/update")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public ServiceUpdateResponse serviceUpdate(@PathParam("id") String id,
                                               ExtendedServiceSpec body,
                                               @QueryParam("version") Integer version,
                                               @QueryParam("registryAuthFrom") String registryAuthFrom,
                                               @QueryParam("rollback") String rollback,
                                               @HeaderParam("X-Registry-Auth") String xRegistryAuth);
}
