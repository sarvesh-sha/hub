/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.
 *
 * OpenAPI spec version: 1.28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.infra.docker.model;

public class RaftConfig
{

    /**
     * The number of log entries between snapshots.
     */
    public Long    snapshotInterval           = null;
    /**
     * The number of snapshots to keep beyond the current snapshot.
     */
    public Long    keepOldSnapshots           = null;
    /**
     * The number of log entries to keep around to sync up slow followers after a snapshot is created.
     */
    public Long    logEntriesForSlowFollowers = null;
    /**
     * The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. `ElectionTick` must be greater than `HeartbeatTick`.  A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
     */
    public Integer electionTick               = null;
    /**
     * The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.  A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
     */
    public Integer heartbeatTick              = null;

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class RaftConfig {\n");

        sb.append("    snapshotInterval: ")
          .append(toIndentedString(snapshotInterval))
          .append("\n");
        sb.append("    keepOldSnapshots: ")
          .append(toIndentedString(keepOldSnapshots))
          .append("\n");
        sb.append("    logEntriesForSlowFollowers: ")
          .append(toIndentedString(logEntriesForSlowFollowers))
          .append("\n");
        sb.append("    electionTick: ")
          .append(toIndentedString(electionTick))
          .append("\n");
        sb.append("    heartbeatTick: ")
          .append(toIndentedString(heartbeatTick))
          .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(java.lang.Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString()
                .replace("\n", "\n    ");
    }
}
