/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.
 *
 * OpenAPI spec version: 1.28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.infra.docker.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HostConfig
{

    /**
     * An integer value representing this container's relative CPU weight versus other containers.
     */
    public Integer              cpuShares            = null;
    /**
     * Memory limit in bytes.
     */
    public Integer              memory               = null;
    /**
     * Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.
     */
    public String               cgroupParent         = null;
    /**
     * Block IO weight (relative weight).
     * minimum: 0
     * maximum: 1000
     */
    public Integer              blkioWeight          = null;
    public List<WeightDevice>   blkioWeightDevice    = new ArrayList<WeightDevice>();
    /**
     * Limit read rate (bytes per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.
     */
    public List<ThrottleDevice> blkioDeviceReadBps   = new ArrayList<ThrottleDevice>();
    /**
     * Limit write rate (bytes per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.
     */
    public List<ThrottleDevice> blkioDeviceWriteBps  = new ArrayList<ThrottleDevice>();
    /**
     * Limit read rate (IO per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.
     */
    public List<ThrottleDevice> blkioDeviceReadIOps  = new ArrayList<ThrottleDevice>();
    /**
     * Limit write rate (IO per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.
     */
    public List<ThrottleDevice> blkioDeviceWriteIOps = new ArrayList<ThrottleDevice>();
    /**
     * The length of a CPU period in microseconds.
     */
    public Long                 cpuPeriod            = null;
    /**
     * Microseconds of CPU time that the container can get in a CPU period.
     */
    public Long                 cpuQuota             = null;
    /**
     * The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     */
    public Long                 cpuRealtimePeriod    = null;
    /**
     * The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     */
    public Long                 cpuRealtimeRuntime   = null;
    /**
     * CPUs in which to allow execution (e.g., `0-3`, `0,1`)
     */
    public String               cpusetCpus           = null;
    /**
     * Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.
     */
    public String               cpusetMems           = null;
    /**
     * A list of devices to add to the container.
     */
    public List<DeviceMapping>  devices              = new ArrayList<DeviceMapping>();
    /**
     * a list of cgroup rules to apply to the container
     */
    public List<String>         deviceCgroupRules    = new ArrayList<String>();
    /**
     * Disk limit (in bytes).
     */
    public Long                 diskQuota            = null;
    /**
     * Kernel memory limit in bytes.
     */
    public Long                 kernelMemory         = null;
    /**
     * Memory soft limit in bytes.
     */
    public Long                 memoryReservation    = null;
    /**
     * Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.
     */
    public Long                 memorySwap           = null;
    /**
     * Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.
     * minimum: 0
     * maximum: 100
     */
    public Long                 memorySwappiness     = null;
    /**
     * CPU quota in units of 10<sup>-9</sup> CPUs.
     */
    public Long                 nanoCPUs             = null;
    /**
     * Disable OOM Killer for the container.
     */
    public Boolean              oomKillDisable       = null;
    /**
     * Tune a container's pids limit. Set -1 for unlimited.
     */
    public Long                 pidsLimit            = null;
    /**
     * A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\"
     */
    public List<Ulimit>         ulimits              = new ArrayList<Ulimit>();
    /**
     * The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     */
    public Long                 cpuCount             = null;
    /**
     * The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     */
    public Long                 cpuPercent           = null;
    /**
     * Maximum IOps for the container system drive (Windows only)
     */
    public Long                 ioMaximumIOps        = null;
    /**
     * Maximum IO in bytes per second for the container system drive (Windows only)
     */
    public Long                 ioMaximumBandwidth   = null;
    /**
     * A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest` to bind-mount a host path into the container. Both `host-src`, and `container-dest` must be an _absolute_ path. - `host-src:container-dest:ro` to make the bind-mount read-only inside the container. Both `host-src`, and `container-dest` must be an _absolute_ path. - `volume-name:container-dest` to bind-mount a volume managed by a volume driver into the container. `container-dest` must be an _absolute_ path. - `volume-name:container-dest:ro` to mount the volume read-only inside the container.  `container-dest` must be an _absolute_ path.
     */
    public List<String>         binds                = new ArrayList<String>();
    /**
     * Path to a file where the container ID is written
     */
    public String               containerIDFile      = null;
    public LogConfig            logConfig            = null;
    /**
     * Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to.
     */
    public String               networkMode          = null;
    public Map<String, PortMap> portBindings         = new HashMap<String, PortMap>();
    public RestartPolicy        restartPolicy        = null;
    /**
     * Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set.
     */
    public Boolean              autoRemove           = null;
    /**
     * Driver that this container uses to mount volumes.
     */
    public String               volumeDriver         = null;
    /**
     * A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`.
     */
    public List<String>         volumesFrom          = new ArrayList<String>();
    /**
     * Specification for mounts to be added to the container.
     */
    public List<Mount>          mounts               = new ArrayList<Mount>();
    /**
     * A list of kernel capabilities to add to the container.
     */
    public List<String>         capAdd               = new ArrayList<String>();
    /**
     * A list of kernel capabilities to drop from the container.
     */
    public List<String>         capDrop              = new ArrayList<String>();
    /**
     * A list of DNS servers for the container to use.
     */
    public List<String>         dns                  = new ArrayList<String>();
    /**
     * A list of DNS options.
     */
    public List<String>         dnsOptions           = new ArrayList<String>();
    /**
     * A list of DNS search domains.
     */
    public List<String>         dnsSearch            = new ArrayList<String>();
    /**
     * A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`.
     */
    public List<String>         extraHosts           = new ArrayList<String>();
    /**
     * A list of additional groups that the container process will run as.
     */
    public List<String>         groupAdd             = new ArrayList<String>();
    /**
     * IPC namespace to use for the container.
     */
    public String               ipcMode              = null;
    /**
     * Cgroup to use for the container.
     */
    public String               cgroup               = null;
    /**
     * A list of links for the container in the form `container_name:alias`.
     */
    public List<String>         links                = new ArrayList<String>();
    /**
     * An integer value containing the score given to the container in order to tune OOM killer preferences.
     */
    public Integer              oomScoreAdj          = null;
    /**
     * Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container:<name|id>\"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container
     */
    public String               pidMode              = null;
    /**
     * Gives the container full access to the host.
     */
    public Boolean              privileged           = null;
    /**
     * Allocates a random host port for all of a container's exposed ports.
     */
    public Boolean              publishAllPorts      = null;
    /**
     * Mount the container's root filesystem as read only.
     */
    public Boolean              readonlyRootfs       = null;
    /**
     * A list of string values to customize labels for MLS systems, such as SELinux.
     */
    public List<String>         securityOpt          = new ArrayList<String>();
    /**
     * Storage driver options for this container, in the form `{\"size\": \"120G\"}`.
     */
    public Map<String, String>  storageOpt           = new HashMap<String, String>();
    /**
     * A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: `{ \"/run\": \"rw,noexec,nosuid,size=65536k\" }`.
     */
    public Map<String, String>  tmpfs                = new HashMap<String, String>();
    /**
     * UTS namespace to use for the container.
     */
    public String               utSMode              = null;
    /**
     * Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
     */
    public String               usernsMode           = null;
    /**
     * Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.
     * minimum: 0
     */
    public Integer              shmSize              = null;
    /**
     * A list of kernel parameters (sysctls) to set in the container. For example: `{\"net.ipv4.ip_forward\": \"1\"}`
     */
    public Map<String, String>  sysctls              = new HashMap<String, String>();
    /**
     * Runtime to use with this container.
     */
    public String               runtime              = null;
    /**
     * Initial console size, as an `[height, width]` array. (Windows only)
     */
    public List<Integer>        consoleSize          = new ArrayList<Integer>();
    /**
     * Isolation technology of the container. (Windows only)
     */
    public IsolationType        isolation            = null;

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class HostConfig {\n");

        sb.append("    cpuShares: ")
          .append(toIndentedString(cpuShares))
          .append("\n");
        sb.append("    memory: ")
          .append(toIndentedString(memory))
          .append("\n");
        sb.append("    cgroupParent: ")
          .append(toIndentedString(cgroupParent))
          .append("\n");
        sb.append("    blkioWeight: ")
          .append(toIndentedString(blkioWeight))
          .append("\n");
        sb.append("    blkioWeightDevice: ")
          .append(toIndentedString(blkioWeightDevice))
          .append("\n");
        sb.append("    blkioDeviceReadBps: ")
          .append(toIndentedString(blkioDeviceReadBps))
          .append("\n");
        sb.append("    blkioDeviceWriteBps: ")
          .append(toIndentedString(blkioDeviceWriteBps))
          .append("\n");
        sb.append("    blkioDeviceReadIOps: ")
          .append(toIndentedString(blkioDeviceReadIOps))
          .append("\n");
        sb.append("    blkioDeviceWriteIOps: ")
          .append(toIndentedString(blkioDeviceWriteIOps))
          .append("\n");
        sb.append("    cpuPeriod: ")
          .append(toIndentedString(cpuPeriod))
          .append("\n");
        sb.append("    cpuQuota: ")
          .append(toIndentedString(cpuQuota))
          .append("\n");
        sb.append("    cpuRealtimePeriod: ")
          .append(toIndentedString(cpuRealtimePeriod))
          .append("\n");
        sb.append("    cpuRealtimeRuntime: ")
          .append(toIndentedString(cpuRealtimeRuntime))
          .append("\n");
        sb.append("    cpusetCpus: ")
          .append(toIndentedString(cpusetCpus))
          .append("\n");
        sb.append("    cpusetMems: ")
          .append(toIndentedString(cpusetMems))
          .append("\n");
        sb.append("    devices: ")
          .append(toIndentedString(devices))
          .append("\n");
        sb.append("    deviceCgroupRules: ")
          .append(toIndentedString(deviceCgroupRules))
          .append("\n");
        sb.append("    diskQuota: ")
          .append(toIndentedString(diskQuota))
          .append("\n");
        sb.append("    kernelMemory: ")
          .append(toIndentedString(kernelMemory))
          .append("\n");
        sb.append("    memoryReservation: ")
          .append(toIndentedString(memoryReservation))
          .append("\n");
        sb.append("    memorySwap: ")
          .append(toIndentedString(memorySwap))
          .append("\n");
        sb.append("    memorySwappiness: ")
          .append(toIndentedString(memorySwappiness))
          .append("\n");
        sb.append("    nanoCPUs: ")
          .append(toIndentedString(nanoCPUs))
          .append("\n");
        sb.append("    oomKillDisable: ")
          .append(toIndentedString(oomKillDisable))
          .append("\n");
        sb.append("    pidsLimit: ")
          .append(toIndentedString(pidsLimit))
          .append("\n");
        sb.append("    ulimits: ")
          .append(toIndentedString(ulimits))
          .append("\n");
        sb.append("    cpuCount: ")
          .append(toIndentedString(cpuCount))
          .append("\n");
        sb.append("    cpuPercent: ")
          .append(toIndentedString(cpuPercent))
          .append("\n");
        sb.append("    ioMaximumIOps: ")
          .append(toIndentedString(ioMaximumIOps))
          .append("\n");
        sb.append("    ioMaximumBandwidth: ")
          .append(toIndentedString(ioMaximumBandwidth))
          .append("\n");
        sb.append("    binds: ")
          .append(toIndentedString(binds))
          .append("\n");
        sb.append("    containerIDFile: ")
          .append(toIndentedString(containerIDFile))
          .append("\n");
        sb.append("    logConfig: ")
          .append(toIndentedString(logConfig))
          .append("\n");
        sb.append("    networkMode: ")
          .append(toIndentedString(networkMode))
          .append("\n");
        sb.append("    portBindings: ")
          .append(toIndentedString(portBindings))
          .append("\n");
        sb.append("    restartPolicy: ")
          .append(toIndentedString(restartPolicy))
          .append("\n");
        sb.append("    autoRemove: ")
          .append(toIndentedString(autoRemove))
          .append("\n");
        sb.append("    volumeDriver: ")
          .append(toIndentedString(volumeDriver))
          .append("\n");
        sb.append("    volumesFrom: ")
          .append(toIndentedString(volumesFrom))
          .append("\n");
        sb.append("    mounts: ")
          .append(toIndentedString(mounts))
          .append("\n");
        sb.append("    capAdd: ")
          .append(toIndentedString(capAdd))
          .append("\n");
        sb.append("    capDrop: ")
          .append(toIndentedString(capDrop))
          .append("\n");
        sb.append("    dns: ")
          .append(toIndentedString(dns))
          .append("\n");
        sb.append("    dnsOptions: ")
          .append(toIndentedString(dnsOptions))
          .append("\n");
        sb.append("    dnsSearch: ")
          .append(toIndentedString(dnsSearch))
          .append("\n");
        sb.append("    extraHosts: ")
          .append(toIndentedString(extraHosts))
          .append("\n");
        sb.append("    groupAdd: ")
          .append(toIndentedString(groupAdd))
          .append("\n");
        sb.append("    ipcMode: ")
          .append(toIndentedString(ipcMode))
          .append("\n");
        sb.append("    cgroup: ")
          .append(toIndentedString(cgroup))
          .append("\n");
        sb.append("    links: ")
          .append(toIndentedString(links))
          .append("\n");
        sb.append("    oomScoreAdj: ")
          .append(toIndentedString(oomScoreAdj))
          .append("\n");
        sb.append("    pidMode: ")
          .append(toIndentedString(pidMode))
          .append("\n");
        sb.append("    privileged: ")
          .append(toIndentedString(privileged))
          .append("\n");
        sb.append("    publishAllPorts: ")
          .append(toIndentedString(publishAllPorts))
          .append("\n");
        sb.append("    readonlyRootfs: ")
          .append(toIndentedString(readonlyRootfs))
          .append("\n");
        sb.append("    securityOpt: ")
          .append(toIndentedString(securityOpt))
          .append("\n");
        sb.append("    storageOpt: ")
          .append(toIndentedString(storageOpt))
          .append("\n");
        sb.append("    tmpfs: ")
          .append(toIndentedString(tmpfs))
          .append("\n");
        sb.append("    utSMode: ")
          .append(toIndentedString(utSMode))
          .append("\n");
        sb.append("    usernsMode: ")
          .append(toIndentedString(usernsMode))
          .append("\n");
        sb.append("    shmSize: ")
          .append(toIndentedString(shmSize))
          .append("\n");
        sb.append("    sysctls: ")
          .append(toIndentedString(sysctls))
          .append("\n");
        sb.append("    runtime: ")
          .append(toIndentedString(runtime))
          .append("\n");
        sb.append("    consoleSize: ")
          .append(toIndentedString(consoleSize))
          .append("\n");
        sb.append("    isolation: ")
          .append(toIndentedString(isolation))
          .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(java.lang.Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString()
                .replace("\n", "\n    ");
    }
}
