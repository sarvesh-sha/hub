/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.
 *
 * OpenAPI spec version: 1.28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.infra.docker.api;

import java.io.InputStream;
import java.util.List;
import java.util.Map;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

import com.optio3.infra.docker.model.Config;
import com.optio3.infra.docker.model.HistoryResponseItem;
import com.optio3.infra.docker.model.IdResponse;
import com.optio3.infra.docker.model.Image;
import com.optio3.infra.docker.model.ImageDeleteResponseItem;
import com.optio3.infra.docker.model.ImageSummary;
import com.optio3.infra.docker.model.ImagesPruneReport;
import com.optio3.infra.docker.model.SearchResult;

@Path("/")
public interface ImageApi
{
    @POST
    @Path("/build")
    @Consumes({ "application/octet-stream" })
    @Produces({ "application/json" })
    public Response imageBuild(InputStream inputStream,
                               @QueryParam("dockerfile") String dockerfile,
                               @QueryParam("t") String t,
                               @QueryParam("extrahosts") String extrahosts,
                               @QueryParam("remote") String remote,
                               @QueryParam("q") Boolean q,
                               @QueryParam("nocache") Boolean nocache,
                               @QueryParam("cachefrom") String cachefrom,
                               @QueryParam("pull") String pull,
                               @QueryParam("rm") Boolean rm,
                               @QueryParam("forcerm") Boolean forcerm,
                               @QueryParam("memory") Integer memory,
                               @QueryParam("memswap") Integer memswap,
                               @QueryParam("cpushares") Integer cpushares,
                               @QueryParam("cpusetcpus") String cpusetcpus,
                               @QueryParam("cpuperiod") Integer cpuperiod,
                               @QueryParam("cpuquota") Integer cpuquota,
                               @QueryParam("buildargs") Map<String, String> buildargs,
                               @QueryParam("shmsize") Integer shmsize,
                               @QueryParam("squash") Boolean squash,
                               @QueryParam("labels") String labels,
                               @QueryParam("networkmode") String networkmode,
                               @HeaderParam("Content-type") String contentType,
                               @HeaderParam("X-Registry-Config") String xRegistryConfig);

    @POST
    @Path("/commit")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public IdResponse imageCommit(Config containerConfig,
                                  @QueryParam("container") String container,
                                  @QueryParam("repo") String repo,
                                  @QueryParam("tag") String tag,
                                  @QueryParam("comment") String comment,
                                  @QueryParam("author") String author,
                                  @QueryParam("pause") Boolean pause,
                                  @QueryParam("changes") String changes);

    @POST
    @Path("/images/create")
    @Consumes({ "text/plain", "application/octet-stream" })
    @Produces({ "application/json" })
    public Response imageCreate(@QueryParam("fromImage") String fromImage,
                                @QueryParam("fromSrc") String fromSrc,
                                @QueryParam("repo") String repo,
                                @QueryParam("tag") String tag,
                                String inputImage,
                                @HeaderParam("X-Registry-Auth") String xRegistryAuth);

    @DELETE
    @Path("/images/{name}")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json" })
    public List<ImageDeleteResponseItem> imageDelete(@PathParam("name") String name,
                                                     @QueryParam("force") Boolean force,
                                                     @QueryParam("noprune") Boolean noprune);

    @GET
    @Path("/images/{name}/get")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/x-tar" })
    public InputStream imageGet(@PathParam("name") String name);

    @GET
    @Path("/images/get")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/x-tar" })
    public InputStream imageGetAll(@QueryParam("names") List<String> names);

    @GET
    @Path("/images/{name}/history")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json" })
    public List<HistoryResponseItem> imageHistory(@PathParam("name") String name);

    @GET
    @Path("/images/{name}/json")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json" })
    public Image imageInspect(@PathParam("name") String name);

    @GET
    @Path("/images/json")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json" })
    public List<ImageSummary> imageList(@QueryParam("all") Boolean all,
                                        @QueryParam("filters") String filters,
                                        @QueryParam("digests") Boolean digests);

    @POST
    @Path("/images/load")
    @Consumes({ "application/x-tar" })
    @Produces({ "application/json" })
    public void imageLoad(InputStream imagesTarball,
                          @QueryParam("quiet") Boolean quiet);

    @POST
    @Path("/images/prune")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json" })
    public ImagesPruneReport imagePrune(@QueryParam("filters") String filters);

    @POST
    @Path("/images/{name}/push")
    @Consumes({ "application/octet-stream" })
    @Produces({ "application/json" })
    public Response imagePush(@PathParam("name") String name,
                              @HeaderParam("X-Registry-Auth") String xRegistryAuth,
                              @QueryParam("tag") String tag);

    @GET
    @Path("/images/search")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json" })
    public List<SearchResult> imageSearch(@QueryParam("term") String term,
                                          @QueryParam("limit") Integer limit,
                                          @QueryParam("filters") String filters);

    @POST
    @Path("/images/{name}/tag")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json", "text/plain" })
    public void imageTag(@PathParam("name") String name,
                         @QueryParam("repo") String repo,
                         @QueryParam("tag") String tag);
}
