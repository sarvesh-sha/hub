/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.
 *
 * OpenAPI spec version: 1.28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.infra.docker.model;

import java.util.ArrayList;
import java.util.List;

public class PluginConfig
{

    public String                description     = null;
    public String                documentation   = null;
    public PluginConfigInterface _interface      = null;
    public List<String>          entrypoint      = new ArrayList<String>();
    public String                workDir         = null;
    public PluginConfigUser      user            = null;
    public PluginConfigNetwork   network         = null;
    public PluginConfigLinux     linux           = null;
    public String                propagatedMount = null;
    public List<PluginMount>     mounts          = new ArrayList<PluginMount>();
    public List<PluginEnv>       env             = new ArrayList<PluginEnv>();
    public PluginConfigArgs      args            = null;
    public PluginConfigRootfs    rootfs          = null;

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class PluginConfig {\n");

        sb.append("    description: ")
          .append(toIndentedString(description))
          .append("\n");
        sb.append("    documentation: ")
          .append(toIndentedString(documentation))
          .append("\n");
        sb.append("    _interface: ")
          .append(toIndentedString(_interface))
          .append("\n");
        sb.append("    entrypoint: ")
          .append(toIndentedString(entrypoint))
          .append("\n");
        sb.append("    workDir: ")
          .append(toIndentedString(workDir))
          .append("\n");
        sb.append("    user: ")
          .append(toIndentedString(user))
          .append("\n");
        sb.append("    network: ")
          .append(toIndentedString(network))
          .append("\n");
        sb.append("    linux: ")
          .append(toIndentedString(linux))
          .append("\n");
        sb.append("    propagatedMount: ")
          .append(toIndentedString(propagatedMount))
          .append("\n");
        sb.append("    mounts: ")
          .append(toIndentedString(mounts))
          .append("\n");
        sb.append("    env: ")
          .append(toIndentedString(env))
          .append("\n");
        sb.append("    args: ")
          .append(toIndentedString(args))
          .append("\n");
        sb.append("    rootfs: ")
          .append(toIndentedString(rootfs))
          .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(java.lang.Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString()
                .replace("\n", "\n    ");
    }
}
