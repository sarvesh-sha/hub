/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.
 *
 * OpenAPI spec version: 1.28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.infra.docker.model;

import java.util.ArrayList;
import java.util.List;

public class Info
{

    public String                architecture       = null;
    public Integer               containers         = null;
    public Integer               containersRunning  = null;
    public Integer               containersStopped  = null;
    public Integer               containersPaused   = null;
    public Boolean               cpuCfsPeriod       = null;
    public Boolean               cpuCfsQuota        = null;
    public Boolean               debug              = null;
    public String                discoveryBackend   = null;
    public String                dockerRootDir      = null;
    public String                driver             = null;
    public List<List<String>>    driverStatus       = new ArrayList<List<String>>();
    public List<List<String>>    systemStatus       = new ArrayList<List<String>>();
    public PluginsInfo           plugins            = null;
    public Boolean               experimentalBuild  = null;
    public String                httpProxy          = null;
    public String                httpsProxy         = null;
    public String                ID                 = null;
    public Boolean               ipv4Forwarding     = null;
    public Integer               images             = null;
    public String                indexServerAddress = null;
    public String                initPath           = null;
    public String                initSha1           = null;
    public String                kernelVersion      = null;
    public List<String>          labels             = new ArrayList<String>();
    public Integer               memTotal           = null;
    public Boolean               memoryLimit        = null;
    public Integer               NCPU               = null;
    public Integer               neventsListener    = null;
    public Integer               nfd                = null;
    public Integer               ngoroutines        = null;
    public String                name               = null;
    public String                noProxy            = null;
    public Boolean               oomKillDisable     = null;
    public String                osType             = null;
    public Integer               oomScoreAdj        = null;
    public String                operatingSystem    = null;
    public RegistryServiceConfig registryConfig     = null;
    public Boolean               swapLimit          = null;
    public String                systemTime         = null;
    public String                serverVersion      = null;

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class Info {\n");

        sb.append("    architecture: ")
          .append(toIndentedString(architecture))
          .append("\n");
        sb.append("    containers: ")
          .append(toIndentedString(containers))
          .append("\n");
        sb.append("    containersRunning: ")
          .append(toIndentedString(containersRunning))
          .append("\n");
        sb.append("    containersStopped: ")
          .append(toIndentedString(containersStopped))
          .append("\n");
        sb.append("    containersPaused: ")
          .append(toIndentedString(containersPaused))
          .append("\n");
        sb.append("    cpuCfsPeriod: ")
          .append(toIndentedString(cpuCfsPeriod))
          .append("\n");
        sb.append("    cpuCfsQuota: ")
          .append(toIndentedString(cpuCfsQuota))
          .append("\n");
        sb.append("    debug: ")
          .append(toIndentedString(debug))
          .append("\n");
        sb.append("    discoveryBackend: ")
          .append(toIndentedString(discoveryBackend))
          .append("\n");
        sb.append("    dockerRootDir: ")
          .append(toIndentedString(dockerRootDir))
          .append("\n");
        sb.append("    driver: ")
          .append(toIndentedString(driver))
          .append("\n");
        sb.append("    driverStatus: ")
          .append(toIndentedString(driverStatus))
          .append("\n");
        sb.append("    systemStatus: ")
          .append(toIndentedString(systemStatus))
          .append("\n");
        sb.append("    plugins: ")
          .append(toIndentedString(plugins))
          .append("\n");
        sb.append("    experimentalBuild: ")
          .append(toIndentedString(experimentalBuild))
          .append("\n");
        sb.append("    httpProxy: ")
          .append(toIndentedString(httpProxy))
          .append("\n");
        sb.append("    httpsProxy: ")
          .append(toIndentedString(httpsProxy))
          .append("\n");
        sb.append("    ID: ")
          .append(toIndentedString(ID))
          .append("\n");
        sb.append("    ipv4Forwarding: ")
          .append(toIndentedString(ipv4Forwarding))
          .append("\n");
        sb.append("    images: ")
          .append(toIndentedString(images))
          .append("\n");
        sb.append("    indexServerAddress: ")
          .append(toIndentedString(indexServerAddress))
          .append("\n");
        sb.append("    initPath: ")
          .append(toIndentedString(initPath))
          .append("\n");
        sb.append("    initSha1: ")
          .append(toIndentedString(initSha1))
          .append("\n");
        sb.append("    kernelVersion: ")
          .append(toIndentedString(kernelVersion))
          .append("\n");
        sb.append("    labels: ")
          .append(toIndentedString(labels))
          .append("\n");
        sb.append("    memTotal: ")
          .append(toIndentedString(memTotal))
          .append("\n");
        sb.append("    memoryLimit: ")
          .append(toIndentedString(memoryLimit))
          .append("\n");
        sb.append("    NCPU: ")
          .append(toIndentedString(NCPU))
          .append("\n");
        sb.append("    neventsListener: ")
          .append(toIndentedString(neventsListener))
          .append("\n");
        sb.append("    nfd: ")
          .append(toIndentedString(nfd))
          .append("\n");
        sb.append("    ngoroutines: ")
          .append(toIndentedString(ngoroutines))
          .append("\n");
        sb.append("    name: ")
          .append(toIndentedString(name))
          .append("\n");
        sb.append("    noProxy: ")
          .append(toIndentedString(noProxy))
          .append("\n");
        sb.append("    oomKillDisable: ")
          .append(toIndentedString(oomKillDisable))
          .append("\n");
        sb.append("    osType: ")
          .append(toIndentedString(osType))
          .append("\n");
        sb.append("    oomScoreAdj: ")
          .append(toIndentedString(oomScoreAdj))
          .append("\n");
        sb.append("    operatingSystem: ")
          .append(toIndentedString(operatingSystem))
          .append("\n");
        sb.append("    registryConfig: ")
          .append(toIndentedString(registryConfig))
          .append("\n");
        sb.append("    swapLimit: ")
          .append(toIndentedString(swapLimit))
          .append("\n");
        sb.append("    systemTime: ")
          .append(toIndentedString(systemTime))
          .append("\n");
        sb.append("    serverVersion: ")
          .append(toIndentedString(serverVersion))
          .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(java.lang.Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString()
                .replace("\n", "\n    ");
    }
}
