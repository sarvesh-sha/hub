/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.
 *
 * OpenAPI spec version: 1.28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.infra.docker.api;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;

import com.optio3.infra.docker.model.Plugin;
import com.optio3.infra.docker.model.PluginPrivilege;

@Path("/")
public interface PluginApi
{
    @GET
    @Path("/plugins/privileges")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json", "text/plain" })
    public List<PluginPrivilege> getPluginPrivileges(@QueryParam("remote") String remote);

    @POST
    @Path("/plugins/create")
    @Consumes({ "application/x-tar" })
    @Produces({ "application/json", "text/plain" })
    public void pluginCreate(@QueryParam("name") String name,
                             byte[] tarContext);

    @DELETE
    @Path("/plugins/{name}")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json", "text/plain" })
    public Plugin pluginDelete(@PathParam("name") String name,
                               @QueryParam("force") Boolean force);

    @POST
    @Path("/plugins/{name}/disable")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json", "text/plain" })
    public void pluginDisable(@PathParam("name") String name);

    @POST
    @Path("/plugins/{name}/enable")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json", "text/plain" })
    public void pluginEnable(@PathParam("name") String name,
                             @QueryParam("timeout") Integer timeout);

    @GET
    @Path("/plugins/{name}/json")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json", "text/plain" })
    public Plugin pluginInspect(@PathParam("name") String name);

    @GET
    @Path("/plugins")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json" })
    public List<Plugin> pluginList(@QueryParam("filters") String filters);

    @POST
    @Path("/plugins/pull")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json" })
    public void pluginPull(@QueryParam("remote") String remote,
                           @QueryParam("name") String name,
                           @HeaderParam("X-Registry-Auth") String xRegistryAuth,
                           List<PluginPrivilege> body);

    @POST
    @Path("/plugins/{name}/push")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json", "text/plain" })
    public void pluginPush(@PathParam("name") String name);

    @POST
    @Path("/plugins/{name}/set")
    @Consumes({ "application/json" })
    @Produces({ "application/json", "text/plain" })
    public void pluginSet(@PathParam("name") String name,
                          List<String> body);

    @POST
    @Path("/plugins/{name}/upgrade")
    @Consumes({ "application/json", "text/plain" })
    @Produces({ "application/json", "text/plain" })
    public void pluginUpgrade(@PathParam("name") String name,
                              @QueryParam("remote") String remote,
                              @HeaderParam("X-Registry-Auth") String xRegistryAuth,
                              List<PluginPrivilege> body);
}
