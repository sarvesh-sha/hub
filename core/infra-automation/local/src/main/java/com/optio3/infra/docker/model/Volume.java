/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.
 *
 * OpenAPI spec version: 1.28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.infra.docker.model;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.databind.JsonNode;

public class Volume
{

    /**
     * Name of the volume.
     */
    public String                name       = null;
    /**
     * Name of the volume driver used by the volume.
     */
    public String                driver     = null;
    /**
     * Mount path of the volume on the host.
     */
    public String                mountpoint = null;
    /**
     * Low-level details about the volume, provided by the volume driver. Details are returned as a map with key/value pairs: `{\"key\":\"value\",\"key2\":\"value2\"}`.  The `Status` field is optional, and is omitted if the volume driver does not support this feature.
     */
    public Map<String, JsonNode> status     = new HashMap<String, JsonNode>();
    /**
     * User-defined key/value metadata.
     */
    public Map<String, String>   labels     = new HashMap<String, String>();
    /**
     * The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level.
     */
    public ScopeLevel            scope      = ScopeLevel.LOCAL;
    /**
     * The driver specific options used when creating the volume.
     */
    public Map<String, String>   options    = new HashMap<String, String>();
    public VolumeUsageData       usageData  = null;

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class Volume {\n");

        sb.append("    name: ")
          .append(toIndentedString(name))
          .append("\n");
        sb.append("    driver: ")
          .append(toIndentedString(driver))
          .append("\n");
        sb.append("    mountpoint: ")
          .append(toIndentedString(mountpoint))
          .append("\n");
        sb.append("    status: ")
          .append(toIndentedString(status))
          .append("\n");
        sb.append("    labels: ")
          .append(toIndentedString(labels))
          .append("\n");
        sb.append("    scope: ")
          .append(toIndentedString(scope))
          .append("\n");
        sb.append("    options: ")
          .append(toIndentedString(options))
          .append("\n");
        sb.append("    usageData: ")
          .append(toIndentedString(usageData))
          .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(java.lang.Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString()
                .replace("\n", "\n    ");
    }
}
