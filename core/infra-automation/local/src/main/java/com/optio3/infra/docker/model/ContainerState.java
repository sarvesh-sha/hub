/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.
 *
 * OpenAPI spec version: 1.28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.infra.docker.model;

public class ContainerState
{

    /**
     * The status of the container. For example, `running` or `exited`.
     */
    public String  status     = null;
    /**
     * Whether this container is running.
     */
    public Boolean running    = null;
    /**
     * Whether this container is paused.
     */
    public Boolean paused     = null;
    /**
     * Whether this container is restarting.
     */
    public Boolean restarting = null;
    /**
     * Whether this container has been killed because it ran out of memory.
     */
    public Boolean ooMKilled  = null;
    public Boolean dead       = null;
    /**
     * The process ID of this container
     */
    public Integer pid        = null;
    /**
     * The last exit code of this container
     */
    public Integer exitCode   = null;
    public String  error      = null;
    /**
     * The time when this container was last started.
     */
    public String  startedAt  = null;
    /**
     * The time when this container last exited.
     */
    public String  finishedAt = null;

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class ContainerState {\n");

        sb.append("    status: ")
          .append(toIndentedString(status))
          .append("\n");
        sb.append("    running: ")
          .append(toIndentedString(running))
          .append("\n");
        sb.append("    paused: ")
          .append(toIndentedString(paused))
          .append("\n");
        sb.append("    restarting: ")
          .append(toIndentedString(restarting))
          .append("\n");
        sb.append("    ooMKilled: ")
          .append(toIndentedString(ooMKilled))
          .append("\n");
        sb.append("    dead: ")
          .append(toIndentedString(dead))
          .append("\n");
        sb.append("    pid: ")
          .append(toIndentedString(pid))
          .append("\n");
        sb.append("    exitCode: ")
          .append(toIndentedString(exitCode))
          .append("\n");
        sb.append("    error: ")
          .append(toIndentedString(error))
          .append("\n");
        sb.append("    startedAt: ")
          .append(toIndentedString(startedAt))
          .append("\n");
        sb.append("    finishedAt: ")
          .append(toIndentedString(finishedAt))
          .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(java.lang.Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString()
                .replace("\n", "\n    ");
    }
}
