/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.
 *
 * OpenAPI spec version: 1.28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.infra.docker.model;

import java.util.ArrayList;
import java.util.List;

public class ExecConfig
{

    /**
     * Attach to `stdin` of the exec command.
     */
    public Boolean      attachStdin  = null;
    /**
     * Attach to `stdout` of the exec command.
     */
    public Boolean      attachStdout = null;
    /**
     * Attach to `stderr` of the exec command.
     */
    public Boolean      attachStderr = null;
    /**
     * Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.
     */
    public String       detachKeys   = null;
    /**
     * Allocate a pseudo-TTY.
     */
    public Boolean      tty          = null;
    /**
     * A list of environment variables in the form `[\"VAR=value\", ...]`.
     */
    public List<String> env          = new ArrayList<String>();
    /**
     * Command to run, as a string or array of strings.
     */
    public List<String> cmd          = new ArrayList<String>();
    /**
     * Runs the exec process with extended privileges.
     */
    public Boolean      privileged   = false;
    /**
     * The user, and optionally, group to run the exec process inside the container. Format is one of: `user`, `user:group`, `uid`, or `uid:gid`.
     */
    public String       user         = null;

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExecConfig {\n");

        sb.append("    attachStdin: ")
          .append(toIndentedString(attachStdin))
          .append("\n");
        sb.append("    attachStdout: ")
          .append(toIndentedString(attachStdout))
          .append("\n");
        sb.append("    attachStderr: ")
          .append(toIndentedString(attachStderr))
          .append("\n");
        sb.append("    detachKeys: ")
          .append(toIndentedString(detachKeys))
          .append("\n");
        sb.append("    tty: ")
          .append(toIndentedString(tty))
          .append("\n");
        sb.append("    env: ")
          .append(toIndentedString(env))
          .append("\n");
        sb.append("    cmd: ")
          .append(toIndentedString(cmd))
          .append("\n");
        sb.append("    privileged: ")
          .append(toIndentedString(privileged))
          .append("\n");
        sb.append("    user: ")
          .append(toIndentedString(user))
          .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(java.lang.Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString()
                .replace("\n", "\n    ");
    }
}
