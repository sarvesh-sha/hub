/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.
 *
 * OpenAPI spec version: 1.28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.infra.docker.model;

import java.util.ArrayList;
import java.util.List;

public class ContainerInspection
{

    /**
     * The ID of the container
     */
    public String           id              = null;
    /**
     * The time the container was created
     */
    public String           created         = null;
    /**
     * The path to the command being run
     */
    public String           path            = null;
    /**
     * The arguments to the command being run
     */
    public List<String>     args            = new ArrayList<String>();
    public ContainerState   state           = null;
    /**
     * The container's image
     */
    public String           image           = null;
    public String           resolvConfPath  = null;
    public String           hostnamePath    = null;
    public String           hostsPath       = null;
    public String           logPath         = null;
    public ContainerNode    node            = null;
    public String           name            = null;
    public Integer          restartCount    = null;
    public String           driver          = null;
    public String           mountLabel      = null;
    public String           processLabel    = null;
    public String           appArmorProfile = null;
    public List<String>     execIDs         = new ArrayList<String>();
    public HostConfig       hostConfig      = null;
    public GraphDriverData  graphDriver     = null;
    /**
     * The size of files that have been created or changed by this container.
     */
    public Long             sizeRw          = null;
    /**
     * The total size of all the files in this container.
     */
    public Long             sizeRootFs      = null;
    public List<MountPoint> mounts          = new ArrayList<MountPoint>();
    public Config           config          = null;
    public NetworkConfig    networkSettings = null;

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class ContainerInspection {\n");

        sb.append("    id: ")
          .append(toIndentedString(id))
          .append("\n");
        sb.append("    created: ")
          .append(toIndentedString(created))
          .append("\n");
        sb.append("    path: ")
          .append(toIndentedString(path))
          .append("\n");
        sb.append("    args: ")
          .append(toIndentedString(args))
          .append("\n");
        sb.append("    state: ")
          .append(toIndentedString(state))
          .append("\n");
        sb.append("    image: ")
          .append(toIndentedString(image))
          .append("\n");
        sb.append("    resolvConfPath: ")
          .append(toIndentedString(resolvConfPath))
          .append("\n");
        sb.append("    hostnamePath: ")
          .append(toIndentedString(hostnamePath))
          .append("\n");
        sb.append("    hostsPath: ")
          .append(toIndentedString(hostsPath))
          .append("\n");
        sb.append("    logPath: ")
          .append(toIndentedString(logPath))
          .append("\n");
        sb.append("    node: ")
          .append(toIndentedString(node))
          .append("\n");
        sb.append("    name: ")
          .append(toIndentedString(name))
          .append("\n");
        sb.append("    restartCount: ")
          .append(toIndentedString(restartCount))
          .append("\n");
        sb.append("    driver: ")
          .append(toIndentedString(driver))
          .append("\n");
        sb.append("    mountLabel: ")
          .append(toIndentedString(mountLabel))
          .append("\n");
        sb.append("    processLabel: ")
          .append(toIndentedString(processLabel))
          .append("\n");
        sb.append("    appArmorProfile: ")
          .append(toIndentedString(appArmorProfile))
          .append("\n");
        sb.append("    execIDs: ")
          .append(toIndentedString(execIDs))
          .append("\n");
        sb.append("    hostConfig: ")
          .append(toIndentedString(hostConfig))
          .append("\n");
        sb.append("    graphDriver: ")
          .append(toIndentedString(graphDriver))
          .append("\n");
        sb.append("    sizeRw: ")
          .append(toIndentedString(sizeRw))
          .append("\n");
        sb.append("    sizeRootFs: ")
          .append(toIndentedString(sizeRootFs))
          .append("\n");
        sb.append("    mounts: ")
          .append(toIndentedString(mounts))
          .append("\n");
        sb.append("    config: ")
          .append(toIndentedString(config))
          .append("\n");
        sb.append("    networkSettings: ")
          .append(toIndentedString(networkSettings))
          .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(java.lang.Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString()
                .replace("\n", "\n    ");
    }
}
