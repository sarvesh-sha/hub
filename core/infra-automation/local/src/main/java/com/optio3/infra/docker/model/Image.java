/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.
 *
 * OpenAPI spec version: 1.28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.infra.docker.model;

import java.util.ArrayList;
import java.util.List;

public class Image
{

    public String          id              = null;
    public List<String>    repoTags        = new ArrayList<String>();
    public List<String>    repoDigests     = new ArrayList<String>();
    public String          parent          = null;
    public String          comment         = null;
    public String          created         = null;
    public String          container       = null;
    public Config          containerConfig = null;
    public String          dockerVersion   = null;
    public String          author          = null;
    public Config          config          = null;
    public String          architecture    = null;
    public String          os              = null;
    public String          osVersion       = null;
    public Long            size            = null;
    public Long            virtualSize     = null;
    public GraphDriverData graphDriver     = null;
    public RootFS          rootFS          = null;

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class Image {\n");

        sb.append("    id: ")
          .append(toIndentedString(id))
          .append("\n");
        sb.append("    repoTags: ")
          .append(toIndentedString(repoTags))
          .append("\n");
        sb.append("    repoDigests: ")
          .append(toIndentedString(repoDigests))
          .append("\n");
        sb.append("    parent: ")
          .append(toIndentedString(parent))
          .append("\n");
        sb.append("    comment: ")
          .append(toIndentedString(comment))
          .append("\n");
        sb.append("    created: ")
          .append(toIndentedString(created))
          .append("\n");
        sb.append("    container: ")
          .append(toIndentedString(container))
          .append("\n");
        sb.append("    containerConfig: ")
          .append(toIndentedString(containerConfig))
          .append("\n");
        sb.append("    dockerVersion: ")
          .append(toIndentedString(dockerVersion))
          .append("\n");
        sb.append("    author: ")
          .append(toIndentedString(author))
          .append("\n");
        sb.append("    config: ")
          .append(toIndentedString(config))
          .append("\n");
        sb.append("    architecture: ")
          .append(toIndentedString(architecture))
          .append("\n");
        sb.append("    os: ")
          .append(toIndentedString(os))
          .append("\n");
        sb.append("    osVersion: ")
          .append(toIndentedString(osVersion))
          .append("\n");
        sb.append("    size: ")
          .append(toIndentedString(size))
          .append("\n");
        sb.append("    virtualSize: ")
          .append(toIndentedString(virtualSize))
          .append("\n");
        sb.append("    graphDriver: ")
          .append(toIndentedString(graphDriver))
          .append("\n");
        sb.append("    rootFS: ")
          .append(toIndentedString(rootFS))
          .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(java.lang.Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString()
                .replace("\n", "\n    ");
    }
}
