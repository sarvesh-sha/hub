/*
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.
 *
 * OpenAPI spec version: 1.28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.optio3.infra.docker.model;

import java.util.ArrayList;
import java.util.List;

public class Resources
{

    /**
     * An integer value representing this container's relative CPU weight versus other containers.
     */
    public Integer              cpuShares            = null;
    /**
     * Memory limit in bytes.
     */
    public Integer              memory               = null;
    /**
     * Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.
     */
    public String               cgroupParent         = null;
    /**
     * Block IO weight (relative weight).
     * minimum: 0
     * maximum: 1000
     */
    public Integer              blkioWeight          = null;
    public List<WeightDevice>   blkioWeightDevice    = new ArrayList<WeightDevice>();
    /**
     * Limit read rate (bytes per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.
     */
    public List<ThrottleDevice> blkioDeviceReadBps   = new ArrayList<ThrottleDevice>();
    /**
     * Limit write rate (bytes per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.
     */
    public List<ThrottleDevice> blkioDeviceWriteBps  = new ArrayList<ThrottleDevice>();
    /**
     * Limit read rate (IO per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.
     */
    public List<ThrottleDevice> blkioDeviceReadIOps  = new ArrayList<ThrottleDevice>();
    /**
     * Limit write rate (IO per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.
     */
    public List<ThrottleDevice> blkioDeviceWriteIOps = new ArrayList<ThrottleDevice>();
    /**
     * The length of a CPU period in microseconds.
     */
    public Long                 cpuPeriod            = null;
    /**
     * Microseconds of CPU time that the container can get in a CPU period.
     */
    public Long                 cpuQuota             = null;
    /**
     * The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     */
    public Long                 cpuRealtimePeriod    = null;
    /**
     * The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     */
    public Long                 cpuRealtimeRuntime   = null;
    /**
     * CPUs in which to allow execution (e.g., `0-3`, `0,1`)
     */
    public String               cpusetCpus           = null;
    /**
     * Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.
     */
    public String               cpusetMems           = null;
    /**
     * A list of devices to add to the container.
     */
    public List<DeviceMapping>  devices              = new ArrayList<DeviceMapping>();
    /**
     * a list of cgroup rules to apply to the container
     */
    public List<String>         deviceCgroupRules    = new ArrayList<String>();
    /**
     * Disk limit (in bytes).
     */
    public Long                 diskQuota            = null;
    /**
     * Kernel memory limit in bytes.
     */
    public Long                 kernelMemory         = null;
    /**
     * Memory soft limit in bytes.
     */
    public Long                 memoryReservation    = null;
    /**
     * Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.
     */
    public Long                 memorySwap           = null;
    /**
     * Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.
     * minimum: 0
     * maximum: 100
     */
    public Long                 memorySwappiness     = null;
    /**
     * CPU quota in units of 10<sup>-9</sup> CPUs.
     */
    public Long                 nanoCPUs             = null;
    /**
     * Disable OOM Killer for the container.
     */
    public Boolean              oomKillDisable       = null;
    /**
     * Tune a container's pids limit. Set -1 for unlimited.
     */
    public Long                 pidsLimit            = null;
    /**
     * A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\"
     */
    public List<Ulimit>         ulimits              = new ArrayList<Ulimit>();
    /**
     * The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     */
    public Long                 cpuCount             = null;
    /**
     * The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     */
    public Long                 cpuPercent           = null;
    /**
     * Maximum IOps for the container system drive (Windows only)
     */
    public Long                 ioMaximumIOps        = null;
    /**
     * Maximum IO in bytes per second for the container system drive (Windows only)
     */
    public Long                 ioMaximumBandwidth   = null;

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class Resources {\n");

        sb.append("    cpuShares: ")
          .append(toIndentedString(cpuShares))
          .append("\n");
        sb.append("    memory: ")
          .append(toIndentedString(memory))
          .append("\n");
        sb.append("    cgroupParent: ")
          .append(toIndentedString(cgroupParent))
          .append("\n");
        sb.append("    blkioWeight: ")
          .append(toIndentedString(blkioWeight))
          .append("\n");
        sb.append("    blkioWeightDevice: ")
          .append(toIndentedString(blkioWeightDevice))
          .append("\n");
        sb.append("    blkioDeviceReadBps: ")
          .append(toIndentedString(blkioDeviceReadBps))
          .append("\n");
        sb.append("    blkioDeviceWriteBps: ")
          .append(toIndentedString(blkioDeviceWriteBps))
          .append("\n");
        sb.append("    blkioDeviceReadIOps: ")
          .append(toIndentedString(blkioDeviceReadIOps))
          .append("\n");
        sb.append("    blkioDeviceWriteIOps: ")
          .append(toIndentedString(blkioDeviceWriteIOps))
          .append("\n");
        sb.append("    cpuPeriod: ")
          .append(toIndentedString(cpuPeriod))
          .append("\n");
        sb.append("    cpuQuota: ")
          .append(toIndentedString(cpuQuota))
          .append("\n");
        sb.append("    cpuRealtimePeriod: ")
          .append(toIndentedString(cpuRealtimePeriod))
          .append("\n");
        sb.append("    cpuRealtimeRuntime: ")
          .append(toIndentedString(cpuRealtimeRuntime))
          .append("\n");
        sb.append("    cpusetCpus: ")
          .append(toIndentedString(cpusetCpus))
          .append("\n");
        sb.append("    cpusetMems: ")
          .append(toIndentedString(cpusetMems))
          .append("\n");
        sb.append("    devices: ")
          .append(toIndentedString(devices))
          .append("\n");
        sb.append("    deviceCgroupRules: ")
          .append(toIndentedString(deviceCgroupRules))
          .append("\n");
        sb.append("    diskQuota: ")
          .append(toIndentedString(diskQuota))
          .append("\n");
        sb.append("    kernelMemory: ")
          .append(toIndentedString(kernelMemory))
          .append("\n");
        sb.append("    memoryReservation: ")
          .append(toIndentedString(memoryReservation))
          .append("\n");
        sb.append("    memorySwap: ")
          .append(toIndentedString(memorySwap))
          .append("\n");
        sb.append("    memorySwappiness: ")
          .append(toIndentedString(memorySwappiness))
          .append("\n");
        sb.append("    nanoCPUs: ")
          .append(toIndentedString(nanoCPUs))
          .append("\n");
        sb.append("    oomKillDisable: ")
          .append(toIndentedString(oomKillDisable))
          .append("\n");
        sb.append("    pidsLimit: ")
          .append(toIndentedString(pidsLimit))
          .append("\n");
        sb.append("    ulimits: ")
          .append(toIndentedString(ulimits))
          .append("\n");
        sb.append("    cpuCount: ")
          .append(toIndentedString(cpuCount))
          .append("\n");
        sb.append("    cpuPercent: ")
          .append(toIndentedString(cpuPercent))
          .append("\n");
        sb.append("    ioMaximumIOps: ")
          .append(toIndentedString(ioMaximumIOps))
          .append("\n");
        sb.append("    ioMaximumBandwidth: ")
          .append(toIndentedString(ioMaximumBandwidth))
          .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private static String toIndentedString(java.lang.Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString()
                .replace("\n", "\n    ");
    }
}
