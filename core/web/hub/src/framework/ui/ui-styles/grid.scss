@use "sass:math";

@import "../app.variables.scss";
@import "breakpoints";


// Make column
@mixin make-col($size) {
    flex: 0 0 percentage(math.div($size, $grid-columns));
    max-width: percentage(math.div($size, $grid-columns));
}

@mixin make-col-offset($size) {
    $num: math.div($size, $grid-columns);

    margin-left: if($num == 0, 0, percentage($num));
}

@mixin make-col-ready() {
    min-height: 1px;
    padding-right: math.div($grid-gutter-width, 2);
    padding-left: math.div($grid-gutter-width, 2);
    position: relative;
    width: 100%;
}

// Make container

@mixin make-container() {
    margin-right: auto;
    margin-left: auto;
    padding-right: math.div($grid-gutter-width, 2);
    padding-left: math.div($grid-gutter-width, 2);
    width: 100%;
}

@mixin make-container-max-widths() {
    @each $breakpoint, $container-max-width in $container-max-widths {
        @include media-breakpoint-up($breakpoint) {
            max-width: $container-max-width;
        }
    }
}

// Make row

@mixin make-row() {
    display: flex;
    flex-wrap: wrap;
    margin-right: math.div($grid-gutter-width, -2);
    margin-left: math.div($grid-gutter-width, -2);
}

@mixin make-grid-columns() {
    %grid-column {
        min-height: 1px;
        padding-right: math.div($grid-gutter-width, 2);
        padding-left: math.div($grid-gutter-width, 2);
        position: relative;
        width: 100%;
        box-sizing: border-box;
    }

    // stylelint-disable-next-line order/order
    @each $breakpoint in map-keys($grid-breakpoints) {
        $infix: breakpoint-infix($breakpoint);

        @for $i from 1 through $grid-columns {
            .col#{$infix}-#{$i} {
                @extend %grid-column;
            }
        }

        @include media-breakpoint-up($breakpoint) {
            @for $i from 1 through $grid-columns {
                .col#{$infix}-#{$i} {
                    @include make-col($i);
                }
            }

            @for $i from 0 through ($grid-columns - 1) {
                @if not ($infix == '' and $i == 0) {
                    .offset#{$infix}-#{$i} {
                        @include make-col-offset($i);
                    }
                }
            }

            @for $i from 0 through $grid-columns {
                .order#{$infix}-#{$i} {
                    order: $i;
                }
            }

            .col#{$infix} {
                flex-basis: 0;
                flex-grow: 1;
                max-width: 100%;
            }

            .col#{$infix}-auto {
                flex: 0 0 auto;
                max-width: none;
                width: auto;
            }

            .order#{$infix}-first {
                order: -1;
            }

            .order#{$infix}-last {
                order: $grid-columns + 1;
            }
        }

        .col#{$infix},
        .col#{$infix}-auto {
            @extend %grid-column;
        }
    }
}


@mixin grid($theme) {
    @include make-grid-columns;

    .container {
        @include make-container;
        @include make-container-max-widths;
    }

    .container-fluid {
        @include make-container;
    }

    .row {
        @include make-row;
    }

    .no-gutters {
        margin-right: 0;
        margin-left: 0;

        > .col,
        > [class*='col-'] {
            padding-right: 0;
            padding-left: 0;
        }
    }
}
