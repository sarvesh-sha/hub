/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class GatewayDetails {
    getFixupPrototypeFunction() { return GatewayDetails.fixupPrototype; }

    static newInstance(model: Partial<GatewayDetails>): GatewayDetails {
        let obj = Object.assign(new GatewayDetails(), model);
        GatewayDetails.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<GatewayDetails>): GatewayDetails {
        if (!model) return null;
        return GatewayDetails.newInstance(<GatewayDetails> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: GatewayDetails) {
        if (!obj) return;

        Object.setPrototypeOf(obj, models.GatewayDetails.prototype);

        obj.fixupFields();
    }

    fixupFields() {
        if (this.availableProcessors === undefined) {
            this.availableProcessors = 0;
        }
        if (this.freeMemory === undefined) {
            this.freeMemory = 0;
        }
        if (this.totalMemory === undefined) {
            this.totalMemory = 0;
        }
        if (this.maxMemory === undefined) {
            this.maxMemory = 0;
        }
        if (this.hardwareVersion === undefined) {
            this.hardwareVersion = 0;
        }
        if (this.firmwareVersion === undefined) {
            this.firmwareVersion = 0;
        }
        if (typeof this.lastRefresh === "string") {
            this.lastRefresh = new Date(<string><any>this.lastRefresh);
        }
        if (this.queueStatus) {
            models.GatewayQueueStatus.fixupPrototype(this.queueStatus);
        }
    }

    lastRefresh: Date;

    availableProcessors: number;

    freeMemory: number;

    totalMemory: number;

    maxMemory: number;

    hardwareVersion: number;

    firmwareVersion: number;

    networkInterfaces: { [key: string]: string; };

    queueStatus: models.GatewayQueueStatus;

}
