/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class UserMessage {
    __type: string;

    protected setDiscriminator(type: string) {
        this.__type = type;
    }

    static readonly RECORD_IDENTITY: string = "UserMessage";

    getFixupPrototypeFunction() { return UserMessage.fixupPrototype; }

    static newInstance(model: Partial<UserMessage>): UserMessage {
        let obj = Object.assign(new UserMessage(), model);
        UserMessage.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<UserMessage>): UserMessage {
        if (!model) return null;
        return UserMessage.newInstance(<UserMessage> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: UserMessage) {
        if (!obj) return;

        switch (obj.__type)
        {
            case "UserMessageAlert":
                Object.setPrototypeOf(obj, models.UserMessageAlert.prototype);
                break;
            case "UserMessageDevice":
                Object.setPrototypeOf(obj, models.UserMessageDevice.prototype);
                break;
            case "UserMessageGeneric":
                Object.setPrototypeOf(obj, models.UserMessageGeneric.prototype);
                break;
            case "UserMessageReport":
                Object.setPrototypeOf(obj, models.UserMessageReport.prototype);
                break;
            case "UserMessageRoleManagement":
                Object.setPrototypeOf(obj, models.UserMessageRoleManagement.prototype);
                break;
            case "UserMessageWorkflow":
                Object.setPrototypeOf(obj, models.UserMessageWorkflow.prototype);
                break;
        }

        obj.fixupFields();
    }

    fixupFields() {
        if (typeof this.createdOn === "string") {
            this.createdOn = new Date(<string><any>this.createdOn);
        }
        if (typeof this.updatedOn === "string") {
            this.updatedOn = new Date(<string><any>this.updatedOn);
        }
        if (this.user) {
            models.RecordIdentity.fixupPrototype(this.user);
        }
    }

    sysId: string;

    createdOn: Date;

    updatedOn: Date;

    user: models.RecordIdentity;

    subject: string;

    body: string;

    flagNew: boolean;

    flagRead: boolean;

    flagActive: boolean;

}
