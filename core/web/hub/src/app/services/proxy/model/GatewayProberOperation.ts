/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class GatewayProberOperation {
    static readonly RECORD_IDENTITY: string = "GatewayProberOperation";

    getFixupPrototypeFunction() { return GatewayProberOperation.fixupPrototype; }

    static newInstance(model: Partial<GatewayProberOperation>): GatewayProberOperation {
        let obj = Object.assign(new GatewayProberOperation(), model);
        GatewayProberOperation.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<GatewayProberOperation>): GatewayProberOperation {
        if (!model) return null;
        return GatewayProberOperation.newInstance(<GatewayProberOperation> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: GatewayProberOperation) {
        if (!obj) return;

        Object.setPrototypeOf(obj, models.GatewayProberOperation.prototype);

        obj.fixupFields();
    }

    fixupFields() {
        if (this.lastOffset === undefined) {
            this.lastOffset = 0;
        }
        if (typeof this.createdOn === "string") {
            this.createdOn = new Date(<string><any>this.createdOn);
        }
        if (typeof this.updatedOn === "string") {
            this.updatedOn = new Date(<string><any>this.updatedOn);
        }
        if (typeof this.lastHeartbeat === "string") {
            this.lastHeartbeat = new Date(<string><any>this.lastHeartbeat);
        }
        if (typeof this.lastOutput === "string") {
            this.lastOutput = new Date(<string><any>this.lastOutput);
        }
        if (this.gateway) {
            models.RecordIdentity.fixupPrototype(this.gateway);
        }
        if (this.inputDetails) {
            models.ProberOperation.fixupPrototype(this.inputDetails);
        }
        if (this.outputDetails) {
            models.ProberOperationBaseResults.fixupPrototype(this.outputDetails);
        }
        if (this.currentActivity) {
            models.RecordIdentity.fixupPrototype(this.currentActivity);
        }
    }

    sysId: string;

    createdOn: Date;

    updatedOn: Date;

    lastHeartbeat: Date;

    gateway: models.RecordIdentity;

    inputDetails: models.ProberOperation;

    outputDetails: models.ProberOperationBaseResults;

    lastOutput: Date;

    lastOffset: number;

    currentActivity: models.RecordIdentity;

}
