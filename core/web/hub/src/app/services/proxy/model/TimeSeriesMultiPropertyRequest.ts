/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class TimeSeriesMultiPropertyRequest {
    getFixupPrototypeFunction() { return TimeSeriesMultiPropertyRequest.fixupPrototype; }

    static newInstance(model: Partial<TimeSeriesMultiPropertyRequest>): TimeSeriesMultiPropertyRequest {
        let obj = Object.assign(new TimeSeriesMultiPropertyRequest(), model);
        TimeSeriesMultiPropertyRequest.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<TimeSeriesMultiPropertyRequest>): TimeSeriesMultiPropertyRequest {
        if (!model) return null;
        return TimeSeriesMultiPropertyRequest.newInstance(<TimeSeriesMultiPropertyRequest> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: TimeSeriesMultiPropertyRequest) {
        if (!obj) return;

        Object.setPrototypeOf(obj, models.TimeSeriesMultiPropertyRequest.prototype);

        obj.fixupFields();
    }

    fixupFields() {
        if (this.maxSamples === undefined) {
            this.maxSamples = 0;
        }
        if (this.maxGapBetweenSamples === undefined) {
            this.maxGapBetweenSamples = 0;
        }
        if (this.maxInterpolationGap === undefined) {
            this.maxInterpolationGap = 0;
        }
        if (typeof this.rangeStart === "string") {
            this.rangeStart = new Date(<string><any>this.rangeStart);
        }
        if (typeof this.rangeEnd === "string") {
            this.rangeEnd = new Date(<string><any>this.rangeEnd);
        }
        if (this.specs) {
            for (let val of this.specs) {
                models.TimeSeriesPropertyRequest.fixupPrototype(val);
            }
        }
    }

    maxSamples: number;

    maxGapBetweenSamples: number;

    skipMissing: boolean;

    rangeStart: Date;

    rangeEnd: Date;

    specs: Array<models.TimeSeriesPropertyRequest>;

    maxInterpolationGap: number;

    deltaEncode: boolean;

}
