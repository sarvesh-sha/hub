/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class EngineExecutionStep {
    __type: string;

    protected setDiscriminator(type: string) {
        this.__type = type;
    }

    constructor() {
        this.setDiscriminator("EngineExecutionStep");
    }

    getFixupPrototypeFunction() { return EngineExecutionStep.fixupPrototype; }

    static newInstance(model: Partial<EngineExecutionStep>): EngineExecutionStep {
        let obj = Object.assign(new EngineExecutionStep(), model);
        EngineExecutionStep.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<EngineExecutionStep>): EngineExecutionStep {
        if (!model) return null;
        return EngineExecutionStep.newInstance(<EngineExecutionStep> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: EngineExecutionStep) {
        if (!obj) return;

        switch (obj.__type)
        {
            case "EngineExecutionStep":
                Object.setPrototypeOf(obj, models.EngineExecutionStep.prototype);
                break;
            case "AlertEngineExecutionStep":
                Object.setPrototypeOf(obj, models.AlertEngineExecutionStep.prototype);
                break;
            case "AlertEngineExecutionStepCommitAction":
                Object.setPrototypeOf(obj, models.AlertEngineExecutionStepCommitAction.prototype);
                break;
            case "AlertEngineExecutionStepCreateAlert":
                Object.setPrototypeOf(obj, models.AlertEngineExecutionStepCreateAlert.prototype);
                break;
            case "AlertEngineExecutionStepSetAlertDescription":
                Object.setPrototypeOf(obj, models.AlertEngineExecutionStepSetAlertDescription.prototype);
                break;
            case "AlertEngineExecutionStepSetAlertSeverity":
                Object.setPrototypeOf(obj, models.AlertEngineExecutionStepSetAlertSeverity.prototype);
                break;
            case "AlertEngineExecutionStepSetAlertStatus":
                Object.setPrototypeOf(obj, models.AlertEngineExecutionStepSetAlertStatus.prototype);
                break;
            case "AlertEngineExecutionStepSetAlertText":
                Object.setPrototypeOf(obj, models.AlertEngineExecutionStepSetAlertText.prototype);
                break;
            case "AlertEngineExecutionStepSetControlPointValue":
                Object.setPrototypeOf(obj, models.AlertEngineExecutionStepSetControlPointValue.prototype);
                break;
            case "MetricsEngineExecutionStep":
                Object.setPrototypeOf(obj, models.MetricsEngineExecutionStep.prototype);
                break;
            case "NormalizationEngineExecutionStep":
                Object.setPrototypeOf(obj, models.NormalizationEngineExecutionStep.prototype);
                break;
            case "NormalizationEngineExecutionStepEquipmentClassification":
                Object.setPrototypeOf(obj, models.NormalizationEngineExecutionStepEquipmentClassification.prototype);
                break;
            case "NormalizationEngineExecutionStepPointClassification":
                Object.setPrototypeOf(obj, models.NormalizationEngineExecutionStepPointClassification.prototype);
                break;
            case "NormalizationEngineExecutionStepPushEquipment":
                Object.setPrototypeOf(obj, models.NormalizationEngineExecutionStepPushEquipment.prototype);
                break;
            case "NormalizationEngineExecutionStepUnits":
                Object.setPrototypeOf(obj, models.NormalizationEngineExecutionStepUnits.prototype);
                break;
        }

        obj.fixupFields();
    }

    fixupFields() {
        if (this.assignment) {
            models.EngineExecutionAssignment.fixupPrototype(this.assignment);
        }
    }

    enteringBlockId: string;

    leavingBlockId: string;

    assignment: models.EngineExecutionAssignment;

    notImplemented: string;

    failure: string;

}
