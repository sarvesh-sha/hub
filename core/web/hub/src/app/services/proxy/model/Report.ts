/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class Report {
    static readonly RECORD_IDENTITY: string = "Report";

    getFixupPrototypeFunction() { return Report.fixupPrototype; }

    static newInstance(model: Partial<Report>): Report {
        let obj = Object.assign(new Report(), model);
        Report.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<Report>): Report {
        if (!model) return null;
        return Report.newInstance(<Report> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: Report) {
        if (!obj) return;

        Object.setPrototypeOf(obj, models.Report.prototype);

        obj.fixupFields();
    }

    fixupFields() {
        if (this.size === undefined) {
            this.size = 0;
        }
        if (typeof this.createdOn === "string") {
            this.createdOn = new Date(<string><any>this.createdOn);
        }
        if (typeof this.updatedOn === "string") {
            this.updatedOn = new Date(<string><any>this.updatedOn);
        }
        if (typeof this.rangeStart === "string") {
            this.rangeStart = new Date(<string><any>this.rangeStart);
        }
        if (typeof this.rangeEnd === "string") {
            this.rangeEnd = new Date(<string><any>this.rangeEnd);
        }
        if (this.reportDefinition) {
            models.RecordIdentity.fixupPrototype(this.reportDefinition);
        }
        if (this.reportDefinitionVersion) {
            models.RecordIdentity.fixupPrototype(this.reportDefinitionVersion);
        }
    }

    sysId: string;

    createdOn: Date;

    updatedOn: Date;

    reportDefinition: models.RecordIdentity;

    reportDefinitionVersion: models.RecordIdentity;

    rangeStart: Date;

    rangeEnd: Date;

    status: models.ReportStatus;

    reason: models.ReportReason;

    size: number;

}
