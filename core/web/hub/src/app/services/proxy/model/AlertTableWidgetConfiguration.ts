/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class AlertTableWidgetConfiguration extends models.WidgetConfiguration {
    constructor() {
        super();
        this.setDiscriminator("AlertTableWidgetConfiguration");
    }

    getFixupPrototypeFunction() { return AlertTableWidgetConfiguration.fixupPrototype; }

    static newInstance(model: Partial<AlertTableWidgetConfiguration>): AlertTableWidgetConfiguration {
        let obj = Object.assign(new AlertTableWidgetConfiguration(), model);
        AlertTableWidgetConfiguration.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<AlertTableWidgetConfiguration>): AlertTableWidgetConfiguration {
        if (!model) return null;
        return AlertTableWidgetConfiguration.newInstance(<AlertTableWidgetConfiguration> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: AlertTableWidgetConfiguration) {
        models.WidgetConfiguration.fixupPrototype(obj);
    }

    fixupFields() {
        super.fixupFields();
        if (this.filterableRanges) {
            for (let val of this.filterableRanges) {
                models.FilterableTimeRange.fixupPrototype(val);
            }
        }
        if (this.severityColors) {
            for (let val of this.severityColors) {
                models.AlertMapSeverityColor.fixupPrototype(val);
            }
        }
        if (this.alertRules) {
            for (let val of this.alertRules) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
    }

    filterableRanges: Array<models.FilterableTimeRange>;

    groupBy: models.SummaryFlavor;

    rollupType: models.LocationType;

    alertStatusIDs: Array<models.AlertStatus>;

    alertTypeIDs: Array<models.AlertType>;

    alertSeverityIDs: Array<models.AlertSeverity>;

    severityColors: Array<models.AlertMapSeverityColor>;

    alertRules: Array<models.RecordIdentity>;

}
