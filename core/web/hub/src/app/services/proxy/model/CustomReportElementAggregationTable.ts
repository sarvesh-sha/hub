/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class CustomReportElementAggregationTable extends models.CustomReportElement {
    constructor() {
        super();
        this.setDiscriminator("CustomReportElementAggregationTable");
    }

    getFixupPrototypeFunction() { return CustomReportElementAggregationTable.fixupPrototype; }

    static newInstance(model: Partial<CustomReportElementAggregationTable>): CustomReportElementAggregationTable {
        let obj = Object.assign(new CustomReportElementAggregationTable(), model);
        CustomReportElementAggregationTable.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<CustomReportElementAggregationTable>): CustomReportElementAggregationTable {
        if (!model) return null;
        return CustomReportElementAggregationTable.newInstance(<CustomReportElementAggregationTable> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: CustomReportElementAggregationTable) {
        models.CustomReportElement.fixupPrototype(obj);
    }

    fixupFields() {
        super.fixupFields();
        if (this.initialSort) {
            models.SortCriteria.fixupPrototype(this.initialSort);
        }
        if (this.groups) {
            for (let val of this.groups) {
                models.ControlPointsGroup.fixupPrototype(val);
            }
        }
        if (this.columns) {
            for (let val of this.columns) {
                models.AggregationNodeBinding.fixupPrototype(val);
            }
        }
    }

    label: string;

    groups: Array<models.ControlPointsGroup>;

    columns: Array<models.AggregationNodeBinding>;

    graphId: string;

    isolateGroupRanges: boolean;

    controlPointDisplayType: models.ControlPointDisplayType;

    visualizationMode: models.HierarchicalVisualizationType;

    initialSort: models.SortCriteria;

}
