/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class EventFilterRequest {
    __type: string;

    protected setDiscriminator(type: string) {
        this.__type = type;
    }

    constructor() {
        this.setDiscriminator("EventFilterRequest");
    }

    getFixupPrototypeFunction() { return EventFilterRequest.fixupPrototype; }

    static newInstance(model: Partial<EventFilterRequest>): EventFilterRequest {
        let obj = Object.assign(new EventFilterRequest(), model);
        EventFilterRequest.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<EventFilterRequest>): EventFilterRequest {
        if (!model) return null;
        return EventFilterRequest.newInstance(<EventFilterRequest> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: EventFilterRequest) {
        if (!obj) return;

        switch (obj.__type)
        {
            case "EventFilterRequest":
                Object.setPrototypeOf(obj, models.EventFilterRequest.prototype);
                break;
            case "AlertFilterRequest":
                Object.setPrototypeOf(obj, models.AlertFilterRequest.prototype);
                break;
            case "AuditFilterRequest":
                Object.setPrototypeOf(obj, models.AuditFilterRequest.prototype);
                break;
            case "WorkflowFilterRequest":
                Object.setPrototypeOf(obj, models.WorkflowFilterRequest.prototype);
                break;
        }

        obj.fixupFields();
    }

    fixupFields() {
        if (this.version === undefined) {
            this.version = 0;
        }
        if (this.startOffset === undefined) {
            this.startOffset = 0;
        }
        if (this.maxResults === undefined) {
            this.maxResults = 0;
        }
        if (typeof this.rangeStart === "string") {
            this.rangeStart = new Date(<string><any>this.rangeStart);
        }
        if (typeof this.rangeEnd === "string") {
            this.rangeEnd = new Date(<string><any>this.rangeEnd);
        }
        if (this.sortBy) {
            for (let val of this.sortBy) {
                models.SortCriteria.fixupPrototype(val);
            }
        }
    }

    version: number;

    startOffset: number;

    maxResults: number;

    assetIDs: Array<string>;

    locationIDs: Array<string>;

    locationInclusive: boolean;

    likeDeviceManufacturerName: string;

    likeDeviceProductName: string;

    likeDeviceModelName: string;

    sortBy: Array<models.SortCriteria>;

    evaluateUpdatedOn: boolean;

    rangeStart: Date;

    rangeEnd: Date;

}
