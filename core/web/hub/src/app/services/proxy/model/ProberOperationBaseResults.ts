/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class ProberOperationBaseResults {
    __type_result: string;

    protected setDiscriminator(type: string) {
        this.__type_result = type;
    }

    getFixupPrototypeFunction() { return ProberOperationBaseResults.fixupPrototype; }

    static newInstance(model: Partial<ProberOperationBaseResults>): ProberOperationBaseResults {
        let obj = Object.assign(new ProberOperationBaseResults(), model);
        ProberOperationBaseResults.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<ProberOperationBaseResults>): ProberOperationBaseResults {
        if (!model) return null;
        return ProberOperationBaseResults.newInstance(<ProberOperationBaseResults> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: ProberOperationBaseResults) {
        if (!obj) return;

        switch (obj.__type_result)
        {
            case "ProberOperationForBACnetToAutoDiscoveryResults":
                Object.setPrototypeOf(obj, models.ProberOperationForBACnetToAutoDiscoveryResults.prototype);
                break;
            case "ProberOperationForBACnetToDiscoverBBMDsResults":
                Object.setPrototypeOf(obj, models.ProberOperationForBACnetToDiscoverBBMDsResults.prototype);
                break;
            case "ProberOperationForBACnetToDiscoverDevicesResults":
                Object.setPrototypeOf(obj, models.ProberOperationForBACnetToDiscoverDevicesResults.prototype);
                break;
            case "ProberOperationForBACnetToDiscoverRoutersResults":
                Object.setPrototypeOf(obj, models.ProberOperationForBACnetToDiscoverRoutersResults.prototype);
                break;
            case "ProberOperationForBACnetToReadBBMDsResults":
                Object.setPrototypeOf(obj, models.ProberOperationForBACnetToReadBBMDsResults.prototype);
                break;
            case "ProberOperationForBACnetToReadDevicesResults":
                Object.setPrototypeOf(obj, models.ProberOperationForBACnetToReadDevicesResults.prototype);
                break;
            case "ProberOperationForBACnetToReadObjectNamesResults":
                Object.setPrototypeOf(obj, models.ProberOperationForBACnetToReadObjectNamesResults.prototype);
                break;
            case "ProberOperationForBACnetToReadObjectsResults":
                Object.setPrototypeOf(obj, models.ProberOperationForBACnetToReadObjectsResults.prototype);
                break;
            case "ProberOperationForBACnetToScanMstpTrunkForDevicesResults":
                Object.setPrototypeOf(obj, models.ProberOperationForBACnetToScanMstpTrunkForDevicesResults.prototype);
                break;
            case "ProberOperationForBACnetToScanSubnetForDevicesResults":
                Object.setPrototypeOf(obj, models.ProberOperationForBACnetToScanSubnetForDevicesResults.prototype);
                break;
            case "ProberOperationForCANbusToDecodedReadResults":
                Object.setPrototypeOf(obj, models.ProberOperationForCANbusToDecodedReadResults.prototype);
                break;
            case "ProberOperationForCANbusToRawReadResults":
                Object.setPrototypeOf(obj, models.ProberOperationForCANbusToRawReadResults.prototype);
                break;
            case "ProberOperationForIpnToDecodedReadResults":
                Object.setPrototypeOf(obj, models.ProberOperationForIpnToDecodedReadResults.prototype);
                break;
            case "ProberOperationForIpnToObdiiReadResults":
                Object.setPrototypeOf(obj, models.ProberOperationForIpnToObdiiReadResults.prototype);
                break;
        }

        obj.fixupFields();
    }

    fixupFields() {
    }

}
