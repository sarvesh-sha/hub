/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class ProberOperationForBACnet extends models.ProberOperation {
    getFixupPrototypeFunction() { return ProberOperationForBACnet.fixupPrototype; }

    static newInstance(model: Partial<ProberOperationForBACnet>): ProberOperationForBACnet {
        let obj = Object.assign(new ProberOperationForBACnet(), model);
        ProberOperationForBACnet.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<ProberOperationForBACnet>): ProberOperationForBACnet {
        if (!model) return null;
        return ProberOperationForBACnet.newInstance(<ProberOperationForBACnet> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: ProberOperationForBACnet) {
        models.ProberOperation.fixupPrototype(obj);
    }

    fixupFields() {
        super.fixupFields();
        if (this.udpPort === undefined) {
            this.udpPort = 0;
        }
        if (this.defaultTimeout === undefined) {
            this.defaultTimeout = 0;
        }
        if (this.maxParallelRequestsPerHost === undefined) {
            this.maxParallelRequestsPerHost = 0;
        }
        if (this.maxParallelRequestsPerNetwork === undefined) {
            this.maxParallelRequestsPerNetwork = 0;
        }
        if (this.limitPacketRate === undefined) {
            this.limitPacketRate = 0;
        }
        if (this.limitScan) {
            models.WhoIsRange.fixupPrototype(this.limitScan);
        }
        if (this.bbmds) {
            for (let val of this.bbmds) {
                models.BACnetBBMD.fixupPrototype(val);
            }
        }
    }

    cidr: string;

    staticAddress: string;

    networkInterface: string;

    useUDP: boolean;

    udpPort: number;

    useEthernet: boolean;

    bbmds: Array<models.BACnetBBMD>;

    limitScan: models.WhoIsRange;

    defaultTimeout: number;

    maxParallelRequestsPerHost: number;

    maxParallelRequestsPerNetwork: number;

    limitPacketRate: number;

}
