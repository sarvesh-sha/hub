/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class NetworkAsset extends models.Asset {
    constructor() {
        super();
        this.setDiscriminator("NetworkAsset");
    }

    static readonly RECORD_IDENTITY: string = "NetworkAsset";

    getFixupPrototypeFunction() { return NetworkAsset.fixupPrototype; }

    static newInstance(model: Partial<NetworkAsset>): NetworkAsset {
        let obj = Object.assign(new NetworkAsset(), model);
        NetworkAsset.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<NetworkAsset>): NetworkAsset {
        if (!model) return null;
        return NetworkAsset.newInstance(<NetworkAsset> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: NetworkAsset) {
        models.Asset.fixupPrototype(obj);
    }

    fixupFields() {
        super.fixupFields();
        if (this.samplingPeriod === undefined) {
            this.samplingPeriod = 0;
        }
        if (this.lastOffset === undefined) {
            this.lastOffset = 0;
        }
        if (typeof this.lastOutput === "string") {
            this.lastOutput = new Date(<string><any>this.lastOutput);
        }
        if (this.discoveryState) {
            models.DiscoveryState.fixupPrototype(this.discoveryState);
        }
        if (this.protocolsConfiguration) {
            for (let val of this.protocolsConfiguration) {
                models.ProtocolConfig.fixupPrototype(val);
            }
        }
    }

    cidr: string;

    staticAddress: string;

    networkInterface: string;

    samplingPeriod: number;

    protocolsConfiguration: Array<models.ProtocolConfig>;

    discoveryState: models.DiscoveryState;

    lastOutput: Date;

    lastOffset: number;

}
