/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class TimeSeriesChartConfiguration extends models.TimeSeriesConfigurationBase {
    constructor() {
        super();
        this.setDiscriminator("TimeSeriesChartConfiguration");
    }

    getFixupPrototypeFunction() { return TimeSeriesChartConfiguration.fixupPrototype; }

    static newInstance(model: Partial<TimeSeriesChartConfiguration>): TimeSeriesChartConfiguration {
        let obj = Object.assign(new TimeSeriesChartConfiguration(), model);
        TimeSeriesChartConfiguration.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<TimeSeriesChartConfiguration>): TimeSeriesChartConfiguration {
        if (!model) return null;
        return TimeSeriesChartConfiguration.newInstance(<TimeSeriesChartConfiguration> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: TimeSeriesChartConfiguration) {
        models.TimeSeriesConfigurationBase.fixupPrototype(obj);
    }

    fixupFields() {
        super.fixupFields();
        if (this.display) {
            models.TimeSeriesDisplayConfiguration.fixupPrototype(this.display);
        }
        if (this.tooltip) {
            models.TimeSeriesTooltipConfiguration.fixupPrototype(this.tooltip);
        }
        if (this.hierarchy) {
            models.HierarchicalVisualization.fixupPrototype(this.hierarchy);
        }
        if (this.graph) {
            models.TimeSeriesGraphConfiguration.fixupPrototype(this.graph);
        }
        if (this.scatterPlot) {
            models.ScatterPlot.fixupPrototype(this.scatterPlot);
        }
        if (this.panels) {
            for (let val of this.panels) {
                models.TimeSeriesPanelConfiguration.fixupPrototype(val);
            }
        }
        if (this.annotations) {
            for (let val of this.annotations) {
                models.TimeSeriesAnnotationConfiguration.fixupPrototype(val);
            }
        }
        if (this.dataSources) {
            for (let val of this.dataSources) {
                models.TimeSeriesSourceConfiguration.fixupPrototype(val);
            }
        }
    }

    type: models.TimeSeriesChartType;

    display: models.TimeSeriesDisplayConfiguration;

    panels: Array<models.TimeSeriesPanelConfiguration>;

    tooltip: models.TimeSeriesTooltipConfiguration;

    annotations: Array<models.TimeSeriesAnnotationConfiguration>;

    hierarchy: models.HierarchicalVisualization;

    graph: models.TimeSeriesGraphConfiguration;

    dataSources: Array<models.TimeSeriesSourceConfiguration>;

    scatterPlot: models.ScatterPlot;

    palette: string;

}
