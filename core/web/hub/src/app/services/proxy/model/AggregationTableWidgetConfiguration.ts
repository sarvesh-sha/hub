/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class AggregationTableWidgetConfiguration extends models.WidgetConfiguration {
    constructor() {
        super();
        this.setDiscriminator("AggregationTableWidgetConfiguration");
    }

    getFixupPrototypeFunction() { return AggregationTableWidgetConfiguration.fixupPrototype; }

    static newInstance(model: Partial<AggregationTableWidgetConfiguration>): AggregationTableWidgetConfiguration {
        let obj = Object.assign(new AggregationTableWidgetConfiguration(), model);
        AggregationTableWidgetConfiguration.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<AggregationTableWidgetConfiguration>): AggregationTableWidgetConfiguration {
        if (!model) return null;
        return AggregationTableWidgetConfiguration.newInstance(<AggregationTableWidgetConfiguration> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: AggregationTableWidgetConfiguration) {
        models.WidgetConfiguration.fixupPrototype(obj);
    }

    fixupFields() {
        super.fixupFields();
        if (this.graph) {
            models.AssetGraph.fixupPrototype(this.graph);
        }
        if (this.clickBehavior) {
            models.InteractionBehavior.fixupPrototype(this.clickBehavior);
        }
        if (this.groups) {
            for (let val of this.groups) {
                models.ControlPointsGroup.fixupPrototype(val);
            }
        }
        if (this.columns) {
            for (let val of this.columns) {
                models.AggregationNodeBinding.fixupPrototype(val);
            }
        }
        if (this.filterableRanges) {
            for (let val of this.filterableRanges) {
                models.FilterableTimeRange.fixupPrototype(val);
            }
        }
    }

    groups: Array<models.ControlPointsGroup>;

    columns: Array<models.AggregationNodeBinding>;

    graph: models.AssetGraph;

    filterableRanges: Array<models.FilterableTimeRange>;

    controlPointDisplayType: models.ControlPointDisplayType;

    visualizationMode: models.HierarchicalVisualizationType;

    isolateGroupRanges: boolean;

    visualizationLegend: boolean;

    visualizationRanges: boolean;

    clickBehavior: models.InteractionBehavior;

}
