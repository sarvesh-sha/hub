/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class AssetFilterRequest {
    __type: string;

    protected setDiscriminator(type: string) {
        this.__type = type;
    }

    constructor() {
        this.setDiscriminator("AssetFilterRequest");
    }

    getFixupPrototypeFunction() { return AssetFilterRequest.fixupPrototype; }

    static newInstance(model: Partial<AssetFilterRequest>): AssetFilterRequest {
        let obj = Object.assign(new AssetFilterRequest(), model);
        AssetFilterRequest.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<AssetFilterRequest>): AssetFilterRequest {
        if (!model) return null;
        return AssetFilterRequest.newInstance(<AssetFilterRequest> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: AssetFilterRequest) {
        if (!obj) return;

        switch (obj.__type)
        {
            case "AssetFilterRequest":
                Object.setPrototypeOf(obj, models.AssetFilterRequest.prototype);
                break;
            case "DeviceElementFilterRequest":
                Object.setPrototypeOf(obj, models.DeviceElementFilterRequest.prototype);
                break;
            case "DeviceFilterRequest":
                Object.setPrototypeOf(obj, models.DeviceFilterRequest.prototype);
                break;
            case "GatewayFilterRequest":
                Object.setPrototypeOf(obj, models.GatewayFilterRequest.prototype);
                break;
            case "HostFilterRequest":
                Object.setPrototypeOf(obj, models.HostFilterRequest.prototype);
                break;
            case "LocationFilterRequest":
                Object.setPrototypeOf(obj, models.LocationFilterRequest.prototype);
                break;
            case "NetworkFilterRequest":
                Object.setPrototypeOf(obj, models.NetworkFilterRequest.prototype);
                break;
        }

        obj.fixupFields();
    }

    fixupFields() {
        if (this.version === undefined) {
            this.version = 0;
        }
        if (this.startOffset === undefined) {
            this.startOffset = 0;
        }
        if (this.maxResults === undefined) {
            this.maxResults = 0;
        }
        if (typeof this.discoveryRangeStart === "string") {
            this.discoveryRangeStart = new Date(<string><any>this.discoveryRangeStart);
        }
        if (typeof this.discoveryRangeEnd === "string") {
            this.discoveryRangeEnd = new Date(<string><any>this.discoveryRangeEnd);
        }
        if (this.parentTagsQuery) {
            models.TagsCondition.fixupPrototype(this.parentTagsQuery);
        }
        if (this.tagsQuery) {
            models.TagsCondition.fixupPrototype(this.tagsQuery);
        }
        if (this.sortBy) {
            for (let val of this.sortBy) {
                models.SortCriteria.fixupPrototype(val);
            }
        }
    }

    version: number;

    startOffset: number;

    maxResults: number;

    locationIDs: Array<string>;

    locationInclusive: boolean;

    locationMissing: boolean;

    sysIds: Array<string>;

    parentIDs: Array<string>;

    parentRelations: Array<models.AssetRelationship>;

    parentTagsQuery: models.TagsCondition;

    likeFilter: string;

    childrenIDs: Array<string>;

    childrenRelations: Array<models.AssetRelationship>;

    stateIDs: Array<models.AssetState>;

    sortBy: Array<models.SortCriteria>;

    discoveryRangeStart: Date;

    discoveryRangeEnd: Date;

    hasNoMetadata: boolean;

    hasMetadata: boolean;

    tagsQuery: models.TagsCondition;

    isHidden: boolean;

    isNotHidden: boolean;

}
