/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class NormalizationsApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    * @param id
    */
    public checkNormalization__generateUrl(id: string): string
    {
        return this.basePath + '/normalizations/normalization/check/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param detailed
     */
    public async checkNormalization(id: string, detailed?: boolean): Promise<models.DeviceElementNormalizationProgress>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling checkNormalization.');
        }

        const __path = this.checkNormalization__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (detailed !== undefined)
        {
            __requestOptions.setQueryParam('detailed', <any>detailed);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.DeviceElementNormalizationProgress> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeviceElementNormalizationProgress.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public create__generateUrl(): string
    {
        return this.basePath + '/normalizations/create';
    }

    /**
     *
     *
     * @param body
     */
    public async create(body?: models.Normalization): Promise<models.Normalization>
    {

        const __path = this.create__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.Normalization> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.Normalization.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public evaluate__generateUrl(): string
    {
        return this.basePath + '/normalizations/normalization/eval';
    }

    /**
     *
     *
     * @param body
     * @param maxSteps
     * @param trace
     */
    public async evaluate(body?: models.DeviceElementNormalizationSample, maxSteps?: number, trace?: boolean): Promise<models.NormalizationEvaluation>
    {

        const __path = this.evaluate__generateUrl();

        let __requestOptions = new ApiRequest();

        if (maxSteps !== undefined)
        {
            __requestOptions.setQueryParam('maxSteps', <any>maxSteps);
        }

        if (trace !== undefined)
        {
            __requestOptions.setQueryParam('trace', <any>trace);
        }

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.NormalizationEvaluation> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.NormalizationEvaluation.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public exportNormalization__generateUrl(id: string): string
    {
        return this.basePath + '/normalizations/export/device/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async exportNormalization(id: string): Promise<models.DeviceNormalizationExport>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling exportNormalization.');
        }

        const __path = this.exportNormalization__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.DeviceNormalizationExport> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeviceNormalizationExport.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public get__generateUrl(id: string): string
    {
        return this.basePath + '/normalizations/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async get(id: string): Promise<models.Normalization>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling get.');
        }

        const __path = this.get__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.Normalization> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.Normalization.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getActive__generateUrl(): string
    {
        return this.basePath + '/normalizations/item/active';
    }

    /**
     *
     *
     */
    public async getActive(): Promise<models.RecordIdentity>
    {

        const __path = this.getActive__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.RecordIdentity> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.RecordIdentity.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getAll__generateUrl(): string
    {
        return this.basePath + '/normalizations/all';
    }

    /**
     *
     *
     */
    public async getAll(): Promise<Array<models.RecordIdentity>>
    {

        const __path = this.getAll__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.RecordIdentity>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.RecordIdentity.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public getBatch__generateUrl(): string
    {
        return this.basePath + '/normalizations/batch';
    }

    /**
     *
     *
     * @param body
     */
    public async getBatch(body?: Array<string>): Promise<Array<models.Normalization>>
    {

        const __path = this.getBatch__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.Normalization>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.Normalization.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param sysId
    */
    public loadSample__generateUrl(sysId: string): string
    {
        return this.basePath + '/normalizations/classification/sample/${sysId}'
                   .replace('${' + 'sysId' + '}', encodeURIComponent(String(sysId)));
    }

    /**
     *
     *
     * @param sysId
     */
    public async loadSample(sysId: string): Promise<models.DeviceElementNormalizationSample>
    {
        // verify required parameter 'sysId' is not null or undefined
        if (sysId === null || sysId === undefined)
        {
            throw new Error('Required parameter sysId was null or undefined when calling loadSample.');
        }

        const __path = this.loadSample__generateUrl(sysId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.DeviceElementNormalizationSample> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeviceElementNormalizationSample.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public makeActive__generateUrl(id: string): string
    {
        return this.basePath + '/normalizations/item/${id}/activate'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async makeActive(id: string): Promise<models.Normalization>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling makeActive.');
        }

        const __path = this.makeActive__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.Normalization> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.Normalization.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public parseImport__generateUrl(): string
    {
        return this.basePath + '/normalizations/parse-import';
    }

    /**
     *
     *
     * @param body
     */
    public async parseImport(body?: models.RawImport): Promise<models.NormalizationRules>
    {

        const __path = this.parseImport__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.NormalizationRules> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.NormalizationRules.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public parseOverridesImport__generateUrl(): string
    {
        return this.basePath + '/normalizations/normalization/override/import';
    }

    /**
     *
     *
     * @param body
     */
    public async parseOverridesImport(body?: models.RawImport): Promise<Array<models.DeviceElementClassificationOverridesRequest>>
    {

        const __path = this.parseOverridesImport__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.DeviceElementClassificationOverridesRequest>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.DeviceElementClassificationOverridesRequest.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public remove__generateUrl(id: string): string
    {
        return this.basePath + '/normalizations/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param dryRun
     */
    public async remove(id: string, dryRun?: boolean): Promise<models.ValidationResults>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling remove.');
        }

        const __path = this.remove__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (dryRun !== undefined)
        {
            __requestOptions.setQueryParam('dryRun', <any>dryRun);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "DELETE";

        let __res = <models.ValidationResults> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.ValidationResults.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public startNormalization__generateUrl(): string
    {
        return this.basePath + '/normalizations/normalization/start';
    }

    /**
     *
     *
     * @param body
     * @param dryRun
     */
    public startNormalization(body?: models.DeviceElementNormalizationRun, dryRun?: boolean): Promise<string>
    {

        const __path = this.startNormalization__generateUrl();

        let __requestOptions = new ApiRequest();

        if (dryRun !== undefined)
        {
            __requestOptions.setQueryParam('dryRun', <any>dryRun);
        }

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('text/plain');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public testClassification__generateUrl(): string
    {
        return this.basePath + '/normalizations/classification/test';
    }

    /**
     *
     *
     * @param body
     */
    public async testClassification(body?: models.DeviceElementNormalizationSample): Promise<models.ClassificationPointOutput>
    {

        const __path = this.testClassification__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.ClassificationPointOutput> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.ClassificationPointOutput.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public testNormalization__generateUrl(): string
    {
        return this.basePath + '/normalizations/normalization/test';
    }

    /**
     *
     *
     * @param body
     */
    public async testNormalization(body?: models.DeviceElementNormalizationSample): Promise<models.ClassificationPointOutput>
    {

        const __path = this.testNormalization__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.ClassificationPointOutput> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.ClassificationPointOutput.fixupPrototype(__res);
        }

        return __res;
    }

}
