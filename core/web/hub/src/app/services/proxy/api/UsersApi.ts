/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class UsersApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    * @param id
    */
    public changePassword__generateUrl(id: string): string
    {
        return this.basePath + '/users/item/${id}/changePwd'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param currentPassword
     * @param newPassword
     */
    public async changePassword(id: string, currentPassword?: string, newPassword?: string): Promise<models.User>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling changePassword.');
        }

        const __path = this.changePassword__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/x-www-form-urlencoded');
        __requestOptions.setProduce('application/json');
        __requestOptions.hasFormParams = true;
        if (currentPassword !== undefined)
        {
            __requestOptions.setFormParam('currentPassword', <any>currentPassword);
        }
        if (newPassword !== undefined)
        {
            __requestOptions.setFormParam('newPassword', <any>newPassword);
        }
        __requestOptions.method = "POST";

        let __res = <models.User> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.User.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public create__generateUrl(): string
    {
        return this.basePath + '/users/create';
    }

    /**
     *
     *
     * @param body
     */
    public async create(body?: models.UserCreationRequest): Promise<models.User>
    {

        const __path = this.create__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.User> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.User.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public forgotPassword__generateUrl(): string
    {
        return this.basePath + '/users/forgotPwd';
    }

    /**
     *
     *
     * @param emailAddress
     */
    public async forgotPassword(emailAddress?: string): Promise<models.User>
    {

        const __path = this.forgotPassword__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/x-www-form-urlencoded');
        __requestOptions.setProduce('application/json');
        __requestOptions.hasFormParams = true;
        if (emailAddress !== undefined)
        {
            __requestOptions.setFormParam('emailAddress', <any>emailAddress);
        }
        __requestOptions.method = "POST";

        let __res = <models.User> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.User.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public get__generateUrl(id: string): string
    {
        return this.basePath + '/users/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async get(id: string): Promise<models.User>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling get.');
        }

        const __path = this.get__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.User> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.User.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getAll__generateUrl(): string
    {
        return this.basePath + '/users/all';
    }

    /**
     *
     *
     */
    public async getAll(): Promise<Array<models.User>>
    {

        const __path = this.getAll__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.User>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.User.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param userId
    */
    public impersonate__generateUrl(userId: string): string
    {
        return this.basePath + '/users/impersonate/${userId}'
                   .replace('${' + 'userId' + '}', encodeURIComponent(String(userId)));
    }

    /**
     *
     *
     * @param userId
     */
    public async impersonate(userId: string): Promise<models.User>
    {
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined)
        {
            throw new Error('Required parameter userId was null or undefined when calling impersonate.');
        }

        const __path = this.impersonate__generateUrl(userId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.User> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.User.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public login__generateUrl(): string
    {
        return this.basePath + '/users/login';
    }

    /**
     *
     *
     * @param username
     * @param password
     */
    public async login(username?: string, password?: string): Promise<models.User>
    {

        const __path = this.login__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/x-www-form-urlencoded');
        __requestOptions.setProduce('application/json');
        __requestOptions.hasFormParams = true;
        if (username !== undefined)
        {
            __requestOptions.setFormParam('username', <any>username);
        }
        if (password !== undefined)
        {
            __requestOptions.setFormParam('password', <any>password);
        }
        __requestOptions.method = "POST";

        let __res = <models.User> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.User.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public logout__generateUrl(): string
    {
        return this.basePath + '/users/logout';
    }

    /**
     *
     *
     */
    public logout(): Promise<string>
    {

        const __path = this.logout__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public remove__generateUrl(id: string): string
    {
        return this.basePath + '/users/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param dryRun
     */
    public async remove(id: string, dryRun?: boolean): Promise<models.ValidationResults>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling remove.');
        }

        const __path = this.remove__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (dryRun !== undefined)
        {
            __requestOptions.setQueryParam('dryRun', <any>dryRun);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "DELETE";

        let __res = <models.ValidationResults> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.ValidationResults.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public resetPassword__generateUrl(): string
    {
        return this.basePath + '/users/resetPwd';
    }

    /**
     *
     *
     * @param emailAddress
     * @param token
     * @param newPassword
     */
    public async resetPassword(emailAddress?: string, token?: string, newPassword?: string): Promise<models.User>
    {

        const __path = this.resetPassword__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/x-www-form-urlencoded');
        __requestOptions.setProduce('application/json');
        __requestOptions.hasFormParams = true;
        if (emailAddress !== undefined)
        {
            __requestOptions.setFormParam('emailAddress', <any>emailAddress);
        }
        if (token !== undefined)
        {
            __requestOptions.setFormParam('token', <any>token);
        }
        if (newPassword !== undefined)
        {
            __requestOptions.setFormParam('newPassword', <any>newPassword);
        }
        __requestOptions.method = "POST";

        let __res = <models.User> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.User.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public update__generateUrl(id: string): string
    {
        return this.basePath + '/users/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param dryRun
     * @param body
     */
    public async update(id: string, dryRun?: boolean, body?: models.User): Promise<models.ValidationResults>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling update.');
        }

        const __path = this.update__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (dryRun !== undefined)
        {
            __requestOptions.setQueryParam('dryRun', <any>dryRun);
        }

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.ValidationResults> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.ValidationResults.fixupPrototype(__res);
        }

        return __res;
    }

}
