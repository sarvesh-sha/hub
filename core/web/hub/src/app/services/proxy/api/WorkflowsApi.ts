/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class WorkflowsApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    * @param id
    * @param userId
    */
    public assign__generateUrl(id: string, userId: string): string
    {
        return this.basePath + '/workflows/assign/${id}/${userId}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'userId' + '}', encodeURIComponent(String(userId)));
    }

    /**
     *
     *
     * @param id
     * @param userId
     */
    public async assign(id: string, userId: string): Promise<models.Workflow>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling assign.');
        }
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined)
        {
            throw new Error('Required parameter userId was null or undefined when calling assign.');
        }

        const __path = this.assign__generateUrl(id, userId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.Workflow> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.Workflow.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public create__generateUrl(): string
    {
        return this.basePath + '/workflows/create';
    }

    /**
     *
     *
     * @param body
     */
    public async create(body?: models.Workflow): Promise<models.Workflow>
    {

        const __path = this.create__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.Workflow> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.Workflow.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getSummary__generateUrl(): string
    {
        return this.basePath + '/workflows/summary';
    }

    /**
     *
     *
     * @param groupBy
     * @param body
     */
    public async getSummary(groupBy?: string, body?: models.WorkflowFilterRequest): Promise<Array<models.SummaryResult>>
    {

        const __path = this.getSummary__generateUrl();

        let __requestOptions = new ApiRequest();

        if (groupBy !== undefined)
        {
            __requestOptions.setQueryParam('groupBy', <any>groupBy);
        }

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.SummaryResult>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.SummaryResult.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public getWorkflowFeed__generateUrl(): string
    {
        return this.basePath + '/workflows/feed';
    }

    /**
     *
     *
     * @param rangeStart
     * @param rangeEnd
     */
    public async getWorkflowFeed(rangeStart?: Date, rangeEnd?: Date): Promise<Array<models.RecordIdentity>>
    {

        const __path = this.getWorkflowFeed__generateUrl();

        let __requestOptions = new ApiRequest();

        if (rangeStart !== undefined)
        {
            __requestOptions.setQueryParam('rangeStart', <any>rangeStart.toISOString());
        }

        if (rangeEnd !== undefined)
        {
            __requestOptions.setQueryParam('rangeEnd', <any>rangeEnd.toISOString());
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.RecordIdentity>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.RecordIdentity.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public getWorkflowHistoryBatch__generateUrl(): string
    {
        return this.basePath + '/workflows/batch-history';
    }

    /**
     *
     *
     * @param body
     */
    public async getWorkflowHistoryBatch(body?: Array<string>): Promise<Array<models.WorkflowHistory>>
    {

        const __path = this.getWorkflowHistoryBatch__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.WorkflowHistory>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.WorkflowHistory.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getWorkflowHistoryByID__generateUrl(id: string): string
    {
        return this.basePath + '/workflows/fetch-history/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async getWorkflowHistoryByID(id: string): Promise<models.WorkflowHistory>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getWorkflowHistoryByID.');
        }

        const __path = this.getWorkflowHistoryByID__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.WorkflowHistory> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.WorkflowHistory.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public listWorkflowHistoryByID__generateUrl(id: string): string
    {
        return this.basePath + '/workflows/history/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param rangeStart
     * @param rangeEnd
     */
    public async listWorkflowHistoryByID(id: string, rangeStart?: Date, rangeEnd?: Date): Promise<Array<models.RecordIdentity>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling listWorkflowHistoryByID.');
        }

        const __path = this.listWorkflowHistoryByID__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (rangeStart !== undefined)
        {
            __requestOptions.setQueryParam('rangeStart', <any>rangeStart.toISOString());
        }

        if (rangeEnd !== undefined)
        {
            __requestOptions.setQueryParam('rangeEnd', <any>rangeEnd.toISOString());
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.RecordIdentity>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.RecordIdentity.fixupPrototype(val);
            }
        }

        return __res;
    }

}
