/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AssetRelationshipsApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    * @param id
    */
    public checkEquipmentReport__generateUrl(id: string): string
    {
        return this.basePath + '/assets-relationships/equipment/report/check/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param detailed
     */
    public async checkEquipmentReport(id: string, detailed?: boolean): Promise<models.EquipmentReportProgress>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling checkEquipmentReport.');
        }

        const __path = this.checkEquipmentReport__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (detailed !== undefined)
        {
            __requestOptions.setQueryParam('detailed', <any>detailed);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.EquipmentReportProgress> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.EquipmentReportProgress.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getTopEquipments__generateUrl(): string
    {
        return this.basePath + '/assets-relationships/top-equipments';
    }

    /**
     *
     *
     */
    public async getTopEquipments(): Promise<Array<models.RecordIdentity>>
    {

        const __path = this.getTopEquipments__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.RecordIdentity>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.RecordIdentity.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public lookupBatch__generateUrl(): string
    {
        return this.basePath + '/assets-relationships/lookup';
    }

    /**
     *
     *
     * @param body
     */
    public async lookupBatch(body?: Array<models.AssetRelationshipRequest>): Promise<Array<models.AssetRelationshipResponse>>
    {

        const __path = this.lookupBatch__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.AssetRelationshipResponse>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.AssetRelationshipResponse.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public startEquipmentReport__generateUrl(): string
    {
        return this.basePath + '/assets-relationships/equipment/report';
    }

    /**
     *
     *
     * @param id
     */
    public startEquipmentReport(id?: string): Promise<string>
    {

        const __path = this.startEquipmentReport__generateUrl();

        let __requestOptions = new ApiRequest();

        if (id !== undefined)
        {
            __requestOptions.setQueryParam('id', <any>id);
        }

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    * @param fileName
    */
    public streamEquipmentReport__generateUrl(id: string, fileName: string): string
    {
        return this.basePath + '/assets-relationships/equipment/report/excel/${id}/${fileName}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'fileName' + '}', encodeURIComponent(String(fileName)));
    }

    /**
     *
     *
     * @param id
     * @param fileName
     */
    public streamEquipmentReport(id: string, fileName: string): Promise<Blob>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling streamEquipmentReport.');
        }
        // verify required parameter 'fileName' is not null or undefined
        if (fileName === null || fileName === undefined)
        {
            throw new Error('Required parameter fileName was null or undefined when calling streamEquipmentReport.');
        }

        const __path = this.streamEquipmentReport__generateUrl(id, fileName);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/octet-stream');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

}
