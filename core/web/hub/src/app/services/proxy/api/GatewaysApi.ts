/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class GatewaysApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    * @param gatewayId
    */
    public checkNetworkStatus__generateUrl(gatewayId: string): string
    {
        return this.basePath + '/gateways/item/${gatewayId}/check-network-status'
                   .replace('${' + 'gatewayId' + '}', encodeURIComponent(String(gatewayId)));
    }

    /**
     *
     *
     * @param gatewayId
     */
    public async checkNetworkStatus(gatewayId: string): Promise<models.ProberNetworkStatus>
    {
        // verify required parameter 'gatewayId' is not null or undefined
        if (gatewayId === null || gatewayId === undefined)
        {
            throw new Error('Required parameter gatewayId was null or undefined when calling checkNetworkStatus.');
        }

        const __path = this.checkNetworkStatus__generateUrl(gatewayId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.ProberNetworkStatus> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.ProberNetworkStatus.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param gatewayId
    */
    public deleteLog__generateUrl(gatewayId: string): string
    {
        return this.basePath + '/gateways/item/${gatewayId}/log'
                   .replace('${' + 'gatewayId' + '}', encodeURIComponent(String(gatewayId)));
    }

    /**
     *
     *
     * @param gatewayId
     * @param olderThanXMinutes
     */
    public deleteLog(gatewayId: string, olderThanXMinutes?: number): Promise<number>
    {
        // verify required parameter 'gatewayId' is not null or undefined
        if (gatewayId === null || gatewayId === undefined)
        {
            throw new Error('Required parameter gatewayId was null or undefined when calling deleteLog.');
        }

        const __path = this.deleteLog__generateUrl(gatewayId);

        let __requestOptions = new ApiRequest();

        if (olderThanXMinutes !== undefined)
        {
            __requestOptions.setQueryParam('olderThanXMinutes', <any>olderThanXMinutes);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "DELETE";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param gatewayId
    */
    public dumpThreads__generateUrl(gatewayId: string): string
    {
        return this.basePath + '/gateways/item/${gatewayId}/threads'
                   .replace('${' + 'gatewayId' + '}', encodeURIComponent(String(gatewayId)));
    }

    /**
     *
     *
     * @param gatewayId
     * @param includeMemInfo
     */
    public dumpThreads(gatewayId: string, includeMemInfo?: boolean): Promise<string>
    {
        // verify required parameter 'gatewayId' is not null or undefined
        if (gatewayId === null || gatewayId === undefined)
        {
            throw new Error('Required parameter gatewayId was null or undefined when calling dumpThreads.');
        }

        const __path = this.dumpThreads__generateUrl(gatewayId);

        let __requestOptions = new ApiRequest();

        if (includeMemInfo !== undefined)
        {
            __requestOptions.setQueryParam('includeMemInfo', <any>includeMemInfo);
        }

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param gatewayId
    */
    public filterLog__generateUrl(gatewayId: string): string
    {
        return this.basePath + '/gateways/item/${gatewayId}/log/filter'
                   .replace('${' + 'gatewayId' + '}', encodeURIComponent(String(gatewayId)));
    }

    /**
     *
     *
     * @param gatewayId
     * @param body
     */
    public async filterLog(gatewayId: string, body?: models.LogEntryFilterRequest): Promise<Array<models.LogRange>>
    {
        // verify required parameter 'gatewayId' is not null or undefined
        if (gatewayId === null || gatewayId === undefined)
        {
            throw new Error('Required parameter gatewayId was null or undefined when calling filterLog.');
        }

        const __path = this.filterLog__generateUrl(gatewayId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.LogRange>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.LogRange.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param fileName
    */
    public getAllLogs__generateUrl(fileName: string): string
    {
        return this.basePath + '/gateways/all-logs/stream/${fileName}'
                   .replace('${' + 'fileName' + '}', encodeURIComponent(String(fileName)));
    }

    /**
     *
     *
     * @param fileName
     */
    public getAllLogs(fileName: string): Promise<Blob>
    {
        // verify required parameter 'fileName' is not null or undefined
        if (fileName === null || fileName === undefined)
        {
            throw new Error('Required parameter fileName was null or undefined when calling getAllLogs.');
        }

        const __path = this.getAllLogs__generateUrl(fileName);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/zip');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param gatewayId
    */
    public getLog__generateUrl(gatewayId: string): string
    {
        return this.basePath + '/gateways/item/${gatewayId}/log'
                   .replace('${' + 'gatewayId' + '}', encodeURIComponent(String(gatewayId)));
    }

    /**
     *
     *
     * @param gatewayId
     * @param fromOffset
     * @param toOffset
     * @param limit
     */
    public async getLog(gatewayId: string, fromOffset?: number, toOffset?: number, limit?: number): Promise<Array<models.LogLine>>
    {
        // verify required parameter 'gatewayId' is not null or undefined
        if (gatewayId === null || gatewayId === undefined)
        {
            throw new Error('Required parameter gatewayId was null or undefined when calling getLog.');
        }

        const __path = this.getLog__generateUrl(gatewayId);

        let __requestOptions = new ApiRequest();

        if (fromOffset !== undefined)
        {
            __requestOptions.setQueryParam('fromOffset', <any>fromOffset);
        }

        if (toOffset !== undefined)
        {
            __requestOptions.setQueryParam('toOffset', <any>toOffset);
        }

        if (limit !== undefined)
        {
            __requestOptions.setQueryParam('limit', <any>limit);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.LogLine>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.LogLine.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param gatewayId
    */
    public lookup__generateUrl(gatewayId: string): string
    {
        return this.basePath + '/gateways/item/${gatewayId}/lookup'
                   .replace('${' + 'gatewayId' + '}', encodeURIComponent(String(gatewayId)));
    }

    /**
     *
     *
     * @param gatewayId
     */
    public async lookup(gatewayId: string): Promise<models.GatewayAsset>
    {
        // verify required parameter 'gatewayId' is not null or undefined
        if (gatewayId === null || gatewayId === undefined)
        {
            throw new Error('Required parameter gatewayId was null or undefined when calling lookup.');
        }

        const __path = this.lookup__generateUrl(gatewayId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.GatewayAsset> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.GatewayAsset.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param gatewayId
    */
    public startOperation__generateUrl(gatewayId: string): string
    {
        return this.basePath + '/gateways/item/${gatewayId}/start-op'
                   .replace('${' + 'gatewayId' + '}', encodeURIComponent(String(gatewayId)));
    }

    /**
     *
     *
     * @param gatewayId
     * @param body
     */
    public async startOperation(gatewayId: string, body?: models.ProberOperation): Promise<models.GatewayProberOperation>
    {
        // verify required parameter 'gatewayId' is not null or undefined
        if (gatewayId === null || gatewayId === undefined)
        {
            throw new Error('Required parameter gatewayId was null or undefined when calling startOperation.');
        }

        const __path = this.startOperation__generateUrl(gatewayId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.GatewayProberOperation> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.GatewayProberOperation.fixupPrototype(__res);
        }

        return __res;
    }

}
