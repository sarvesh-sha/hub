/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class DemoTasksApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    * @param id
    */
    public checkGatewayProgress__generateUrl(id: string): string
    {
        return this.basePath + '/demo-tasks/simulated-gateway/check/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public checkGatewayProgress(id: string): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling checkGatewayProgress.');
        }

        const __path = this.checkGatewayProgress__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public createGateway__generateUrl(): string
    {
        return this.basePath + '/demo-tasks/simulated-gateway/create';
    }

    /**
     *
     *
     * @param name
     * @param numDevice
     * @param numHistoricalDays
     * @param samplingPeriod
     */
    public createGateway(name?: string, numDevice?: number, numHistoricalDays?: number, samplingPeriod?: number): Promise<string>
    {

        const __path = this.createGateway__generateUrl();

        let __requestOptions = new ApiRequest();

        if (name !== undefined)
        {
            __requestOptions.setQueryParam('name', <any>name);
        }

        if (numDevice !== undefined)
        {
            __requestOptions.setQueryParam('numDevice', <any>numDevice);
        }

        if (numHistoricalDays !== undefined)
        {
            __requestOptions.setQueryParam('numHistoricalDays', <any>numHistoricalDays);
        }

        if (samplingPeriod !== undefined)
        {
            __requestOptions.setQueryParam('samplingPeriod', <any>samplingPeriod);
        }

        __requestOptions.setConsume('application/json');
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public hasDemoData__generateUrl(): string
    {
        return this.basePath + '/demo-tasks/demodata';
    }

    /**
     *
     *
     */
    public hasDemoData(): Promise<boolean>
    {

        const __path = this.hasDemoData__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public triggerDemoMessages__generateUrl(): string
    {
        return this.basePath + '/demo-tasks/trigger-demo-messages';
    }

    /**
     *
     *
     */
    public triggerDemoMessages(): Promise<boolean>
    {

        const __path = this.triggerDemoMessages__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

}
