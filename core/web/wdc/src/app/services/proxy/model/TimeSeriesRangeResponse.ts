/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class TimeSeriesRangeResponse {
    getFixupPrototypeFunction() { return TimeSeriesRangeResponse.fixupPrototype; }

    static newInstance(model: Partial<TimeSeriesRangeResponse>): TimeSeriesRangeResponse {
        let obj = Object.assign(new TimeSeriesRangeResponse(), model);
        TimeSeriesRangeResponse.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<TimeSeriesRangeResponse>): TimeSeriesRangeResponse {
        if (!model) return null;
        return TimeSeriesRangeResponse.newInstance(<TimeSeriesRangeResponse> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: TimeSeriesRangeResponse) {
        if (!obj) return;

        Object.setPrototypeOf(obj, models.TimeSeriesRangeResponse.prototype);

        obj.fixupFields();
    }

    fixupFields() {
        if (this.numberOfSamples === undefined) {
            this.numberOfSamples = 0;
        }
        if (this.numberOfMissingSamples === undefined) {
            this.numberOfMissingSamples = 0;
        }
        if (this.minValue === undefined) {
            this.minValue = 0;
        }
        if (this.maxValue === undefined) {
            this.maxValue = 0;
        }
        if (this.averageValue === undefined) {
            this.averageValue = 0;
        }
        if (typeof this.firstTimestamp === "string") {
            this.firstTimestamp = new Date(<string><any>this.firstTimestamp);
        }
        if (typeof this.lastTimestamp === "string") {
            this.lastTimestamp = new Date(<string><any>this.lastTimestamp);
        }
    }

    firstTimestamp: Date;

    lastTimestamp: Date;

    numberOfSamples: number;

    numberOfMissingSamples: number;

    minValue: number;

    maxValue: number;

    averageValue: number;

}
