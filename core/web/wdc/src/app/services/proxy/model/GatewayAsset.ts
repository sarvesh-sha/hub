/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class GatewayAsset extends models.Asset {
    constructor() {
        super();
        this.setDiscriminator("GatewayAsset");
    }

    static readonly RECORD_IDENTITY: string = "GatewayAsset";

    getFixupPrototypeFunction() { return GatewayAsset.fixupPrototype; }

    static newInstance(model: Partial<GatewayAsset>): GatewayAsset {
        let obj = Object.assign(new GatewayAsset(), model);
        GatewayAsset.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<GatewayAsset>): GatewayAsset {
        if (!model) return null;
        return GatewayAsset.newInstance(<GatewayAsset> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: GatewayAsset) {
        models.Asset.fixupPrototype(obj);
    }

    fixupFields() {
        super.fixupFields();
        if (this.warningThreshold === undefined) {
            this.warningThreshold = 0;
        }
        if (this.alertThreshold === undefined) {
            this.alertThreshold = 0;
        }
        if (this.cpuLoadLast4Hours === undefined) {
            this.cpuLoadLast4Hours = 0;
        }
        if (this.cpuLoadPrevious4Hours === undefined) {
            this.cpuLoadPrevious4Hours = 0;
        }
        if (this.lastOffset === undefined) {
            this.lastOffset = 0;
        }
        if (typeof this.lastOutput === "string") {
            this.lastOutput = new Date(<string><any>this.lastOutput);
        }
        if (this.details) {
            models.GatewayDetails.fixupPrototype(this.details);
        }
    }

    instanceId: string;

    warningThreshold: number;

    alertThreshold: number;

    cpuLoadLast4Hours: number;

    cpuLoadPrevious4Hours: number;

    details: models.GatewayDetails;

    lastOutput: Date;

    lastOffset: number;

}
