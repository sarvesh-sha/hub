/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class EquipmentAggregation {
    getFixupPrototypeFunction() { return EquipmentAggregation.fixupPrototype; }

    static newInstance(model: Partial<EquipmentAggregation>): EquipmentAggregation {
        let obj = Object.assign(new EquipmentAggregation(), model);
        EquipmentAggregation.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<EquipmentAggregation>): EquipmentAggregation {
        if (!model) return null;
        return EquipmentAggregation.newInstance(<EquipmentAggregation> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: EquipmentAggregation) {
        if (!obj) return;

        Object.setPrototypeOf(obj, models.EquipmentAggregation.prototype);

        obj.fixupFields();
    }

    fixupFields() {
        if (this.equipments) {
            for (let val of this.equipments) {
                models.EquipmentHierarchy.fixupPrototype(val);
            }
        }
        if (this.locationHierarchy) {
            for (let val of this.locationHierarchy) {
                models.LocationHierarchy.fixupPrototype(val);
            }
        }
        if (this.pointClasses) {
            for (let val of this.pointClasses) {
                models.PointClass.fixupPrototype(val);
            }
        }
        if (this.equipmentClasses) {
            for (let val of this.equipmentClasses) {
                models.EquipmentClass.fixupPrototype(val);
            }
        }
        if (this.locationClasses) {
            for (let val of this.locationClasses) {
                models.LocationClass.fixupPrototype(val);
            }
        }
    }

    equipments: Array<models.EquipmentHierarchy>;

    controllers: Array<string>;

    locationHierarchy: Array<models.LocationHierarchy>;

    pointClasses: Array<models.PointClass>;

    equipmentClasses: Array<models.EquipmentClass>;

    locationClasses: Array<models.LocationClass>;

}
