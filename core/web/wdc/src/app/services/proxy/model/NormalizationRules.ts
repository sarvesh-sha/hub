/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class NormalizationRules {
    getFixupPrototypeFunction() { return NormalizationRules.fixupPrototype; }

    static newInstance(model: Partial<NormalizationRules>): NormalizationRules {
        let obj = Object.assign(new NormalizationRules(), model);
        NormalizationRules.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<NormalizationRules>): NormalizationRules {
        if (!model) return null;
        return NormalizationRules.newInstance(<NormalizationRules> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: NormalizationRules) {
        if (!obj) return;

        Object.setPrototypeOf(obj, models.NormalizationRules.prototype);

        obj.fixupFields();
    }

    fixupFields() {
        if (this.scoreThreshold === undefined) {
            this.scoreThreshold = 0;
        }
        if (this.validation) {
            models.ValidationRules.fixupPrototype(this.validation);
        }
        if (this.logic) {
            models.NormalizationDefinitionDetails.fixupPrototype(this.logic);
        }
        if (this.pointClasses) {
            for (let val of this.pointClasses) {
                models.PointClass.fixupPrototype(val);
            }
        }
        if (this.equipmentClasses) {
            for (let val of this.equipmentClasses) {
                models.EquipmentClass.fixupPrototype(val);
            }
        }
        if (this.locationClasses) {
            for (let val of this.locationClasses) {
                models.LocationClass.fixupPrototype(val);
            }
        }
        if (this.knownTerms) {
            for (let key in this.knownTerms) {
                let val = this.knownTerms[key];
                if (val) {
                    models.NormalizationRulesKnownTerm.fixupPrototype(val);
                }
            }
        }
        if (this.equipments) {
            for (let key in this.equipments) {
                let val = this.equipments[key];
                if (val) {
                    models.NormalizationEquipment.fixupPrototype(val);
                }
            }
        }
        if (this.pointOverrides) {
            for (let key in this.pointOverrides) {
                let val = this.pointOverrides[key];
                if (val) {
                    models.DeviceElementClassificationOverrides.fixupPrototype(val);
                }
            }
        }
    }

    pointClasses: Array<models.PointClass>;

    equipmentClasses: Array<models.EquipmentClass>;

    locationClasses: Array<models.LocationClass>;

    knownTerms: { [key: string]: models.NormalizationRulesKnownTerm; };

    abbreviations: { [key: string]: Array<string>; };

    startsWith: { [key: string]: string; };

    endsWith: { [key: string]: string; };

    contains: { [key: string]: string; };

    disambiguations: { [key: string]: string; };

    scoreThreshold: number;

    validation: models.ValidationRules;

    equipmentRelationships: { [key: string]: Array<string>; };

    equipments: { [key: string]: models.NormalizationEquipment; };

    pointOverrides: { [key: string]: models.DeviceElementClassificationOverrides; };

    logic: models.NormalizationDefinitionDetails;

}
