/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class ControlPointsGroup {
    getFixupPrototypeFunction() { return ControlPointsGroup.fixupPrototype; }

    static newInstance(model: Partial<ControlPointsGroup>): ControlPointsGroup {
        let obj = Object.assign(new ControlPointsGroup(), model);
        ControlPointsGroup.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<ControlPointsGroup>): ControlPointsGroup {
        if (!model) return null;
        return ControlPointsGroup.newInstance(<ControlPointsGroup> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: ControlPointsGroup) {
        if (!obj) return;

        Object.setPrototypeOf(obj, models.ControlPointsGroup.prototype);

        obj.fixupFields();
    }

    fixupFields() {
        if (this.limitValue === undefined) {
            this.limitValue = 0;
        }
        if (this.valuePrecision === undefined) {
            this.valuePrecision = 0;
        }
        if (this.unitsFactors) {
            models.EngineeringUnitsFactors.fixupPrototype(this.unitsFactors);
        }
        if (this.selections) {
            models.ControlPointsSelection.fixupPrototype(this.selections);
        }
        if (this.colorConfig) {
            models.ColorConfiguration.fixupPrototype(this.colorConfig);
        }
        if (this.range) {
            models.ToggleableNumericRange.fixupPrototype(this.range);
        }
        if (this.graph) {
            models.AssetGraph.fixupPrototype(this.graph);
        }
        if (this.pointInput) {
            models.AssetGraphBinding.fixupPrototype(this.pointInput);
        }
    }

    name: string;

    unitsFactors: models.EngineeringUnitsFactors;

    unitsDisplay: string;

    aggregationType: models.AggregationTypeId;

    groupAggregationType: models.AggregationTypeId;

    granularity: models.AggregationGranularity;

    limitMode: models.AggregationLimit;

    limitValue: number;

    valuePrecision: number;

    selections: models.ControlPointsSelection;

    colorConfig: models.ColorConfiguration;

    range: models.ToggleableNumericRange;

    graph: models.AssetGraph;

    pointInput: models.AssetGraphBinding;

}
