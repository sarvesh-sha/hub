/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class Asset {
    __type: string;

    protected setDiscriminator(type: string) {
        this.__type = type;
    }

    static readonly RECORD_IDENTITY: string = "Asset";

    getFixupPrototypeFunction() { return Asset.fixupPrototype; }

    static newInstance(model: Partial<Asset>): Asset {
        let obj = Object.assign(new Asset(), model);
        Asset.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<Asset>): Asset {
        if (!model) return null;
        return Asset.newInstance(<Asset> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: Asset) {
        if (!obj) return;

        switch (obj.__type)
        {
            case "BACnetDevice":
                Object.setPrototypeOf(obj, models.BACnetDevice.prototype);
                break;
            case "Device":
                Object.setPrototypeOf(obj, models.Device.prototype);
                break;
            case "DeviceElement":
                Object.setPrototypeOf(obj, models.DeviceElement.prototype);
                break;
            case "GatewayAsset":
                Object.setPrototypeOf(obj, models.GatewayAsset.prototype);
                break;
            case "HostAsset":
                Object.setPrototypeOf(obj, models.HostAsset.prototype);
                break;
            case "IpnDevice":
                Object.setPrototypeOf(obj, models.IpnDevice.prototype);
                break;
            case "Location":
                Object.setPrototypeOf(obj, models.Location.prototype);
                break;
            case "LogicalAsset":
                Object.setPrototypeOf(obj, models.LogicalAsset.prototype);
                break;
            case "MetricsDeviceElement":
                Object.setPrototypeOf(obj, models.MetricsDeviceElement.prototype);
                break;
            case "NetworkAsset":
                Object.setPrototypeOf(obj, models.NetworkAsset.prototype);
                break;
        }

        obj.fixupFields();
    }

    fixupFields() {
        if (typeof this.createdOn === "string") {
            this.createdOn = new Date(<string><any>this.createdOn);
        }
        if (typeof this.updatedOn === "string") {
            this.updatedOn = new Date(<string><any>this.updatedOn);
        }
        if (typeof this.lastCheckedDate === "string") {
            this.lastCheckedDate = new Date(<string><any>this.lastCheckedDate);
        }
        if (typeof this.lastUpdatedDate === "string") {
            this.lastUpdatedDate = new Date(<string><any>this.lastUpdatedDate);
        }
        if (this.location) {
            models.RecordIdentity.fixupPrototype(this.location);
        }
        if (this.parentAsset) {
            models.RecordIdentity.fixupPrototype(this.parentAsset);
        }
        if (this.identityDescriptor) {
            models.BaseAssetDescriptor.fixupPrototype(this.identityDescriptor);
        }
    }

    sysId: string;

    createdOn: Date;

    updatedOn: Date;

    name: string;

    physicalName: string;

    logicalName: string;

    normalizedName: string;

    displayName: string;

    state: models.AssetState;

    assetId: string;

    serialNumber: string;

    customerNotes: string;

    lastCheckedDate: Date;

    lastUpdatedDate: Date;

    hidden: boolean;

    location: models.RecordIdentity;

    pointClassId: string;

    equipmentClassId: string;

    azureDigitalTwinModel: string;

    isEquipment: boolean;

    classificationTags: Array<string>;

    manualTags: Array<string>;

    parentAsset: models.RecordIdentity;

    identityDescriptor: models.BaseAssetDescriptor;

}
