/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class WorkflowDetails {
    __type: string;

    protected setDiscriminator(type: string) {
        this.__type = type;
    }

    getFixupPrototypeFunction() { return WorkflowDetails.fixupPrototype; }

    static newInstance(model: Partial<WorkflowDetails>): WorkflowDetails {
        let obj = Object.assign(new WorkflowDetails(), model);
        WorkflowDetails.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<WorkflowDetails>): WorkflowDetails {
        if (!model) return null;
        return WorkflowDetails.newInstance(<WorkflowDetails> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: WorkflowDetails) {
        if (!obj) return;

        switch (obj.__type)
        {
            case "WorkflowDetailsForAssignControlPointsToEquipment":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForAssignControlPointsToEquipment.prototype);
                break;
            case "WorkflowDetailsForHidingControlPoint":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForHidingControlPoint.prototype);
                break;
            case "WorkflowDetailsForIgnoreDevice":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForIgnoreDevice.prototype);
                break;
            case "WorkflowDetailsForMergeEquipments":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForMergeEquipments.prototype);
                break;
            case "WorkflowDetailsForNewEquipment":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForNewEquipment.prototype);
                break;
            case "WorkflowDetailsForRemoveEquipment":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForRemoveEquipment.prototype);
                break;
            case "WorkflowDetailsForRenameControlPoint":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForRenameControlPoint.prototype);
                break;
            case "WorkflowDetailsForRenameDevice":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForRenameDevice.prototype);
                break;
            case "WorkflowDetailsForRenameEquipment":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForRenameEquipment.prototype);
                break;
            case "WorkflowDetailsForSamplingControlPoint":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForSamplingControlPoint.prototype);
                break;
            case "WorkflowDetailsForSamplingPeriod":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForSamplingPeriod.prototype);
                break;
            case "WorkflowDetailsForSetControlPointsClass":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForSetControlPointsClass.prototype);
                break;
            case "WorkflowDetailsForSetDeviceLocation":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForSetDeviceLocation.prototype);
                break;
            case "WorkflowDetailsForSetEquipmentClass":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForSetEquipmentClass.prototype);
                break;
            case "WorkflowDetailsForSetEquipmentLocation":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForSetEquipmentLocation.prototype);
                break;
            case "WorkflowDetailsForSetEquipmentParent":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForSetEquipmentParent.prototype);
                break;
            case "WorkflowDetailsForSetLocationParent":
                Object.setPrototypeOf(obj, models.WorkflowDetailsForSetLocationParent.prototype);
                break;
        }

        obj.fixupFields();
    }

    fixupFields() {
    }

}
