/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AssetTimeSeriesApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    */
    public aggregation__generateUrl(): string
    {
        return this.basePath + '/assets-timeseries/aggregation';
    }

    /**
     *
     *
     * @param body
     */
    public async aggregation(body?: models.AggregationRequest): Promise<models.AggregationResponse>
    {

        const __path = this.aggregation__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.setProduce('application/cbor');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.AggregationResponse> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AggregationResponse.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public compactSamples__generateUrl(id: string): string
    {
        return this.basePath + '/assets-timeseries/compact/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param force
     */
    public compactSamples(id: string, force?: boolean): Promise<string>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling compactSamples.');
        }

        const __path = this.compactSamples__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (force !== undefined)
        {
            __requestOptions.setQueryParam('force', <any>force);
        }

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public emitNewValues__generateUrl(): string
    {
        return this.basePath + '/assets-timeseries/new-values';
    }

    /**
     *
     *
     * @param body
     */
    public async emitNewValues(body?: models.TimeSeriesNewValueRequest): Promise<models.TimeSeriesNewValueResponse>
    {

        const __path = this.emitNewValues__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.TimeSeriesNewValueResponse> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.TimeSeriesNewValueResponse.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getLastValue__generateUrl(): string
    {
        return this.basePath + '/assets-timeseries/last-value';
    }

    /**
     *
     *
     * @param body
     */
    public async getLastValue(body?: models.TimeSeriesLastValueRequest): Promise<models.TimeSeriesLastValueResponse>
    {

        const __path = this.getLastValue__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.setProduce('application/cbor');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.TimeSeriesLastValueResponse> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.TimeSeriesLastValueResponse.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getLastValueBatch__generateUrl(): string
    {
        return this.basePath + '/assets-timeseries/last-value-batch';
    }

    /**
     *
     *
     * @param body
     */
    public async getLastValueBatch(body?: Array<models.TimeSeriesLastValueRequest>): Promise<Array<models.TimeSeriesLastValueResponse>>
    {

        const __path = this.getLastValueBatch__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.setProduce('application/cbor');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.TimeSeriesLastValueResponse>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.TimeSeriesLastValueResponse.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public getRange__generateUrl(): string
    {
        return this.basePath + '/assets-timeseries/request-range';
    }

    /**
     *
     *
     * @param body
     */
    public async getRange(body?: models.TimeSeriesRangeRequest): Promise<models.TimeSeriesRangeResponse>
    {

        const __path = this.getRange__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.TimeSeriesRangeResponse> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.TimeSeriesRangeResponse.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getRangeBatch__generateUrl(): string
    {
        return this.basePath + '/assets-timeseries/request-range-batch';
    }

    /**
     *
     *
     * @param body
     */
    public async getRangeBatch(body?: Array<models.TimeSeriesRangeRequest>): Promise<Array<models.TimeSeriesRangeResponse>>
    {

        const __path = this.getRangeBatch__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.TimeSeriesRangeResponse>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.TimeSeriesRangeResponse.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public getSchema__generateUrl(): string
    {
        return this.basePath + '/assets-timeseries/schema';
    }

    /**
     *
     *
     * @param body
     */
    public async getSchema(body?: models.TimeSeriesSchemaRequest): Promise<models.TimeSeriesSchemaResponse>
    {

        const __path = this.getSchema__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.setProduce('application/cbor');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.TimeSeriesSchemaResponse> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.TimeSeriesSchemaResponse.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getSchemaBatch__generateUrl(): string
    {
        return this.basePath + '/assets-timeseries/schema-batch';
    }

    /**
     *
     *
     * @param body
     */
    public async getSchemaBatch(body?: Array<models.TimeSeriesSchemaRequest>): Promise<Array<models.TimeSeriesSchemaResponse>>
    {

        const __path = this.getSchemaBatch__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.setProduce('application/cbor');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.TimeSeriesSchemaResponse>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.TimeSeriesSchemaResponse.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public getValuesMultiple__generateUrl(): string
    {
        return this.basePath + '/assets-timeseries/request-multiple';
    }

    /**
     *
     *
     * @param body
     */
    public async getValuesMultiple(body?: models.TimeSeriesMultiPropertyRequest): Promise<models.TimeSeriesMultiPropertyResponse>
    {

        const __path = this.getValuesMultiple__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.setProduce('application/cbor');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.TimeSeriesMultiPropertyResponse> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.TimeSeriesMultiPropertyResponse.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getValuesSingle__generateUrl(): string
    {
        return this.basePath + '/assets-timeseries/request-single';
    }

    /**
     *
     *
     * @param body
     */
    public async getValuesSingle(body?: models.TimeSeriesSinglePropertyRequest): Promise<models.TimeSeriesSinglePropertyResponse>
    {

        const __path = this.getValuesSingle__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.setProduce('application/cbor');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.TimeSeriesSinglePropertyResponse> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.TimeSeriesSinglePropertyResponse.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getValuesSingleBatch__generateUrl(): string
    {
        return this.basePath + '/assets-timeseries/request-single-batch';
    }

    /**
     *
     *
     * @param body
     */
    public async getValuesSingleBatch(body?: Array<models.TimeSeriesSinglePropertyRequest>): Promise<Array<models.TimeSeriesSinglePropertyResponse>>
    {

        const __path = this.getValuesSingleBatch__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.setProduce('application/cbor');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.TimeSeriesSinglePropertyResponse>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.TimeSeriesSinglePropertyResponse.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    * @param days
    */
    public trimSamples__generateUrl(id: string, days: number): string
    {
        return this.basePath + '/assets-timeseries/trim/${id}/${days}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'days' + '}', encodeURIComponent(String(days)));
    }

    /**
     *
     *
     * @param id
     * @param days
     */
    public trimSamples(id: string, days: number): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling trimSamples.');
        }
        // verify required parameter 'days' is not null or undefined
        if (days === null || days === undefined)
        {
            throw new Error('Required parameter days was null or undefined when calling trimSamples.');
        }

        const __path = this.trimSamples__generateUrl(id, days);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

}
