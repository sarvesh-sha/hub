/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AdminTasksApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    */
    public checkUpgradeLevel__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/upgrade/list';
    }

    /**
     *
     *
     */
    public checkUpgradeLevel(): Promise<Array<string>>
    {

        const __path = this.checkUpgradeLevel__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public checkUsages__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/check-usages';
    }

    /**
     *
     *
     * @param body
     */
    public async checkUsages(body?: models.UsageFilterRequest): Promise<models.UsageFilterResponse>
    {

        const __path = this.checkUsages__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.UsageFilterResponse> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.UsageFilterResponse.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public compactTimeSeries__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/compact-time-series';
    }

    /**
     *
     *
     * @param force
     */
    public compactTimeSeries(force?: boolean): Promise<string>
    {

        const __path = this.compactTimeSeries__generateUrl();

        let __requestOptions = new ApiRequest();

        if (force !== undefined)
        {
            __requestOptions.setQueryParam('force', <any>force);
        }

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public configLogger__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/loggers/config';
    }

    /**
     *
     *
     * @param body
     */
    public async configLogger(body?: models.LoggerConfiguration): Promise<models.LoggerConfiguration>
    {

        const __path = this.configLogger__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.LoggerConfiguration> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.LoggerConfiguration.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param gatewaySysId
    */
    public configLoggerForGateway__generateUrl(gatewaySysId: string): string
    {
        return this.basePath + '/admin-tasks/loggers/config-gateway/${gatewaySysId}'
                   .replace('${' + 'gatewaySysId' + '}', encodeURIComponent(String(gatewaySysId)));
    }

    /**
     *
     *
     * @param gatewaySysId
     * @param body
     */
    public async configLoggerForGateway(gatewaySysId: string, body?: models.LoggerConfiguration): Promise<models.LoggerConfiguration>
    {
        // verify required parameter 'gatewaySysId' is not null or undefined
        if (gatewaySysId === null || gatewaySysId === undefined)
        {
            throw new Error('Required parameter gatewaySysId was null or undefined when calling configLoggerForGateway.');
        }

        const __path = this.configLoggerForGateway__generateUrl(gatewaySysId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.LoggerConfiguration> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.LoggerConfiguration.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public deleteBackup__generateUrl(id: string): string
    {
        return this.basePath + '/admin-tasks/backup/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public deleteBackup(id: string): Promise<string>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling deleteBackup.');
        }

        const __path = this.deleteBackup__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.method = "DELETE";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public dropNetworkStats__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/drop-network-stats';
    }

    /**
     *
     *
     * @param compact
     */
    public dropNetworkStats(compact?: boolean): Promise<string>
    {

        const __path = this.dropNetworkStats__generateUrl();

        let __requestOptions = new ApiRequest();

        if (compact !== undefined)
        {
            __requestOptions.setQueryParam('compact', <any>compact);
        }

        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public dumpDbConnections__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/db-connections';
    }

    /**
     *
     *
     */
    public dumpDbConnections(): Promise<string>
    {

        const __path = this.dumpDbConnections__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public dumpMessageBusStatistics__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/message-bus-stats';
    }

    /**
     *
     *
     */
    public dumpMessageBusStatistics(): Promise<string>
    {

        const __path = this.dumpMessageBusStatistics__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public dumpRequestStatistics__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/request-stats';
    }

    /**
     *
     *
     */
    public dumpRequestStatistics(): Promise<string>
    {

        const __path = this.dumpRequestStatistics__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public dumpRpcStatistics__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/rpc-stats';
    }

    /**
     *
     *
     */
    public dumpRpcStatistics(): Promise<string>
    {

        const __path = this.dumpRpcStatistics__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public dumpThreads__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/threads';
    }

    /**
     *
     *
     */
    public dumpThreads(): Promise<string>
    {

        const __path = this.dumpThreads__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public flushLogger__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/logger/flush';
    }

    /**
     *
     *
     * @param toConsole
     */
    public flushLogger(toConsole?: boolean): Promise<string>
    {

        const __path = this.flushLogger__generateUrl();

        let __requestOptions = new ApiRequest();

        if (toConsole !== undefined)
        {
            __requestOptions.setQueryParam('toConsole', <any>toConsole);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public flushQueryPlanCache__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/query-plan-cache/flush';
    }

    /**
     *
     *
     */
    public flushQueryPlanCache(): Promise<string>
    {

        const __path = this.flushQueryPlanCache__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public flushSpooler__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/spooler/flush';
    }

    /**
     *
     *
     */
    public flushSpooler(): Promise<string>
    {

        const __path = this.flushSpooler__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public getAppVersion__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/app-version';
    }

    /**
     *
     *
     */
    public getAppVersion(): Promise<string>
    {

        const __path = this.getAppVersion__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public getBackup__generateUrl(id: string): string
    {
        return this.basePath + '/admin-tasks/backup/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public getBackup(id: string): Promise<string>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getBackup.');
        }

        const __path = this.getBackup__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public getDatabaseVariable__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/db/get-variable';
    }

    /**
     *
     *
     * @param name
     */
    public getDatabaseVariable(name?: string): Promise<string>
    {

        const __path = this.getDatabaseVariable__generateUrl();

        let __requestOptions = new ApiRequest();

        if (name !== undefined)
        {
            __requestOptions.setQueryParam('name', <any>name);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public getDatagramSessions__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/datagram-sessions';
    }

    /**
     *
     *
     */
    public async getDatagramSessions(): Promise<Array<models.MessageBusDatagramSession>>
    {

        const __path = this.getDatagramSessions__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.MessageBusDatagramSession>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.MessageBusDatagramSession.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public getInstanceConfiguration__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/instance-config';
    }

    /**
     *
     *
     */
    public async getInstanceConfiguration(): Promise<models.InstanceConfiguration>
    {

        const __path = this.getInstanceConfiguration__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.InstanceConfiguration> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.InstanceConfiguration.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getLoggers__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/loggers/list';
    }

    /**
     *
     *
     */
    public async getLoggers(): Promise<Array<models.LoggerConfiguration>>
    {

        const __path = this.getLoggers__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.LoggerConfiguration>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.LoggerConfiguration.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param gatewaySysId
    */
    public getLoggersForGateway__generateUrl(gatewaySysId: string): string
    {
        return this.basePath + '/admin-tasks/loggers/list-gateway/${gatewaySysId}'
                   .replace('${' + 'gatewaySysId' + '}', encodeURIComponent(String(gatewaySysId)));
    }

    /**
     *
     *
     * @param gatewaySysId
     */
    public async getLoggersForGateway(gatewaySysId: string): Promise<Array<models.LoggerConfiguration>>
    {
        // verify required parameter 'gatewaySysId' is not null or undefined
        if (gatewaySysId === null || gatewaySysId === undefined)
        {
            throw new Error('Required parameter gatewaySysId was null or undefined when calling getLoggersForGateway.');
        }

        const __path = this.getLoggersForGateway__generateUrl(gatewaySysId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.LoggerConfiguration>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.LoggerConfiguration.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public listDatabaseVariables__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/db/list-variables';
    }

    /**
     *
     *
     */
    public listDatabaseVariables(): Promise<Array<string>>
    {

        const __path = this.listDatabaseVariables__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public pendingLogEntries__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/logger/pending';
    }

    /**
     *
     *
     */
    public pendingLogEntries(): Promise<number>
    {

        const __path = this.pendingLogEntries__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public reportCrash__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/report-crash';
    }

    /**
     *
     *
     * @param page
     * @param stack
     */
    public reportCrash(page?: string, stack?: string): Promise<string>
    {

        const __path = this.reportCrash__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/x-www-form-urlencoded');
        __requestOptions.setProduce('text/plain');
        __requestOptions.hasFormParams = true;
        if (page !== undefined)
        {
            __requestOptions.setFormParam('page', <any>page);
        }
        if (stack !== undefined)
        {
            __requestOptions.setFormParam('stack', <any>stack);
        }
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public setDatabaseVariableDecimal__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/db/set-variable/decimal';
    }

    /**
     *
     *
     * @param name
     * @param value
     */
    public setDatabaseVariableDecimal(name?: string, value?: number): Promise<boolean>
    {

        const __path = this.setDatabaseVariableDecimal__generateUrl();

        let __requestOptions = new ApiRequest();

        if (name !== undefined)
        {
            __requestOptions.setQueryParam('name', <any>name);
        }

        if (value !== undefined)
        {
            __requestOptions.setQueryParam('value', <any>value);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public setDatabaseVariableInteger__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/db/set-variable/integer';
    }

    /**
     *
     *
     * @param name
     * @param value
     */
    public setDatabaseVariableInteger(name?: string, value?: number): Promise<boolean>
    {

        const __path = this.setDatabaseVariableInteger__generateUrl();

        let __requestOptions = new ApiRequest();

        if (name !== undefined)
        {
            __requestOptions.setQueryParam('name', <any>name);
        }

        if (value !== undefined)
        {
            __requestOptions.setQueryParam('value', <any>value);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public setDatabaseVariableString__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/db/set-variable/string';
    }

    /**
     *
     *
     * @param name
     * @param value
     */
    public setDatabaseVariableString(name?: string, value?: string): Promise<boolean>
    {

        const __path = this.setDatabaseVariableString__generateUrl();

        let __requestOptions = new ApiRequest();

        if (name !== undefined)
        {
            __requestOptions.setQueryParam('name', <any>name);
        }

        if (value !== undefined)
        {
            __requestOptions.setQueryParam('value', <any>value);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public shutdown__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/shutdown';
    }

    /**
     *
     *
     */
    public shutdown(): Promise<string>
    {

        const __path = this.shutdown__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public startBackup__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/backup/start';
    }

    /**
     *
     *
     */
    public async startBackup(): Promise<models.RecordIdentity>
    {

        const __path = this.startBackup__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.RecordIdentity> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.RecordIdentity.fixupPrototype(__res);
        }

        return __res;
    }

}
