/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AssetsApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    * @param id
    */
    public checkDeviceElementReport__generateUrl(id: string): string
    {
        return this.basePath + '/assets/device-elements/report/check/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param detailed
     */
    public async checkDeviceElementReport(id: string, detailed?: boolean): Promise<models.DeviceElementReportProgress>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling checkDeviceElementReport.');
        }

        const __path = this.checkDeviceElementReport__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (detailed !== undefined)
        {
            __requestOptions.setQueryParam('detailed', <any>detailed);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.DeviceElementReportProgress> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeviceElementReportProgress.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public create__generateUrl(): string
    {
        return this.basePath + '/assets/create';
    }

    /**
     *
     *
     * @param body
     */
    public async create(body?: models.Asset): Promise<models.Asset>
    {

        const __path = this.create__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.Asset> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.Asset.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public evaluateAssetGraph__generateUrl(): string
    {
        return this.basePath + '/assets/asset-graph/evaluate';
    }

    /**
     *
     *
     * @param body
     */
    public async evaluateAssetGraph(body?: models.AssetGraphRequest): Promise<models.AssetGraphResponse>
    {

        const __path = this.evaluateAssetGraph__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.AssetGraphResponse> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AssetGraphResponse.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public get__generateUrl(id: string): string
    {
        return this.basePath + '/assets/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async get(id: string): Promise<models.Asset>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling get.');
        }

        const __path = this.get__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.Asset> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.Asset.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getActiveWorkflows__generateUrl(id: string): string
    {
        return this.basePath + '/assets/active-workflows/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async getActiveWorkflows(id: string): Promise<Array<models.RecordIdentity>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getActiveWorkflows.');
        }

        const __path = this.getActiveWorkflows__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.RecordIdentity>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.RecordIdentity.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public getActiveWorkflowsBatch__generateUrl(): string
    {
        return this.basePath + '/assets/active-workflows-batch';
    }

    /**
     *
     *
     * @param body
     */
    public getActiveWorkflowsBatch(body?: Array<string>): Promise<Array<Array<models.RecordIdentity>>>
    {

        const __path = this.getActiveWorkflowsBatch__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public getBatch__generateUrl(): string
    {
        return this.basePath + '/assets/batch';
    }

    /**
     *
     *
     * @param body
     */
    public async getBatch(body?: Array<string>): Promise<Array<models.Asset>>
    {

        const __path = this.getBatch__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.Asset>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.Asset.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public getFiltered__generateUrl(): string
    {
        return this.basePath + '/assets/filter';
    }

    /**
     *
     *
     * @param body
     */
    public async getFiltered(body?: models.AssetFilterRequest): Promise<models.AssetFilterResponse>
    {

        const __path = this.getFiltered__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.AssetFilterResponse> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AssetFilterResponse.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getFilteredCount__generateUrl(): string
    {
        return this.basePath + '/assets/count';
    }

    /**
     *
     *
     * @param body
     */
    public getFilteredCount(body?: models.AssetFilterRequest): Promise<number>
    {

        const __path = this.getFilteredCount__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public getHistoryByID__generateUrl(id: string): string
    {
        return this.basePath + '/assets/alert-history/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param rangeStart
     * @param rangeEnd
     */
    public async getHistoryByID(id: string, rangeStart?: Date, rangeEnd?: Date): Promise<Array<models.RecordIdentity>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getHistoryByID.');
        }

        const __path = this.getHistoryByID__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (rangeStart !== undefined)
        {
            __requestOptions.setQueryParam('rangeStart', <any>rangeStart.toISOString());
        }

        if (rangeEnd !== undefined)
        {
            __requestOptions.setQueryParam('rangeEnd', <any>rangeEnd.toISOString());
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.RecordIdentity>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.RecordIdentity.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public getSummary__generateUrl(): string
    {
        return this.basePath + '/assets/summary';
    }

    /**
     *
     *
     * @param groupBy
     * @param body
     */
    public async getSummary(groupBy?: string, body?: models.AssetFilterRequest): Promise<Array<models.SummaryResult>>
    {

        const __path = this.getSummary__generateUrl();

        let __requestOptions = new ApiRequest();

        if (groupBy !== undefined)
        {
            __requestOptions.setQueryParam('groupBy', <any>groupBy);
        }

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.SummaryResult>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.SummaryResult.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    * @param tag
    */
    public getTag__generateUrl(id: string, tag: string): string
    {
        return this.basePath + '/assets/tags/${id}/${tag}/get'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'tag' + '}', encodeURIComponent(String(tag)));
    }

    /**
     *
     *
     * @param id
     * @param tag
     */
    public getTag(id: string, tag: string): Promise<Array<string>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getTag.');
        }
        // verify required parameter 'tag' is not null or undefined
        if (tag === null || tag === undefined)
        {
            throw new Error('Required parameter tag was null or undefined when calling getTag.');
        }

        const __path = this.getTag__generateUrl(id, tag);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public getTravelLog__generateUrl(id: string): string
    {
        return this.basePath + '/assets/travel-log/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param maxGapForSegmentInMeters
     * @param maxDurationPerSegmentInSeconds
     * @param rangeStart
     * @param rangeEnd
     */
    public async getTravelLog(id: string, maxGapForSegmentInMeters?: number, maxDurationPerSegmentInSeconds?: number, rangeStart?: Date, rangeEnd?: Date): Promise<models.AssetTravelLog>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getTravelLog.');
        }

        const __path = this.getTravelLog__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (maxGapForSegmentInMeters !== undefined)
        {
            __requestOptions.setQueryParam('maxGapForSegmentInMeters', <any>maxGapForSegmentInMeters);
        }

        if (maxDurationPerSegmentInSeconds !== undefined)
        {
            __requestOptions.setQueryParam('maxDurationPerSegmentInSeconds', <any>maxDurationPerSegmentInSeconds);
        }

        if (rangeStart !== undefined)
        {
            __requestOptions.setQueryParam('rangeStart', <any>rangeStart.toISOString());
        }

        if (rangeEnd !== undefined)
        {
            __requestOptions.setQueryParam('rangeEnd', <any>rangeEnd.toISOString());
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.AssetTravelLog> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AssetTravelLog.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public lookupMetrics__generateUrl(id: string): string
    {
        return this.basePath + '/assets/lookup-metrics/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async lookupMetrics(id: string): Promise<models.MetricsDefinition>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling lookupMetrics.');
        }

        const __path = this.lookupMetrics__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.MetricsDefinition> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.MetricsDefinition.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public parseImport__generateUrl(): string
    {
        return this.basePath + '/assets/parse-import';
    }

    /**
     *
     *
     * @param body
     */
    public async parseImport(body?: models.RawImport): Promise<models.Asset>
    {

        const __path = this.parseImport__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.Asset> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.Asset.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    * @param parentId
    */
    public reassignParent__generateUrl(id: string, parentId: string): string
    {
        return this.basePath + '/assets/item/${id}/reassign-to/${parentId}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'parentId' + '}', encodeURIComponent(String(parentId)));
    }

    /**
     *
     *
     * @param id
     * @param parentId
     * @param dryRun
     */
    public async reassignParent(id: string, parentId: string, dryRun?: boolean): Promise<models.ValidationResults>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling reassignParent.');
        }
        // verify required parameter 'parentId' is not null or undefined
        if (parentId === null || parentId === undefined)
        {
            throw new Error('Required parameter parentId was null or undefined when calling reassignParent.');
        }

        const __path = this.reassignParent__generateUrl(id, parentId);

        let __requestOptions = new ApiRequest();

        if (dryRun !== undefined)
        {
            __requestOptions.setQueryParam('dryRun', <any>dryRun);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.ValidationResults> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.ValidationResults.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public remove__generateUrl(id: string): string
    {
        return this.basePath + '/assets/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param dryRun
     */
    public async remove(id: string, dryRun?: boolean): Promise<models.ValidationResults>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling remove.');
        }

        const __path = this.remove__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (dryRun !== undefined)
        {
            __requestOptions.setQueryParam('dryRun', <any>dryRun);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "DELETE";

        let __res = <models.ValidationResults> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.ValidationResults.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    * @param tag
    */
    public removeTag__generateUrl(id: string, tag: string): string
    {
        return this.basePath + '/assets/tags/${id}/${tag}/remove'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'tag' + '}', encodeURIComponent(String(tag)));
    }

    /**
     *
     *
     * @param id
     * @param tag
     */
    public removeTag(id: string, tag: string): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling removeTag.');
        }
        // verify required parameter 'tag' is not null or undefined
        if (tag === null || tag === undefined)
        {
            throw new Error('Required parameter tag was null or undefined when calling removeTag.');
        }

        const __path = this.removeTag__generateUrl(id, tag);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    * @param tag
    */
    public setTag__generateUrl(id: string, tag: string): string
    {
        return this.basePath + '/assets/tags/${id}/${tag}/set'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'tag' + '}', encodeURIComponent(String(tag)));
    }

    /**
     *
     *
     * @param id
     * @param tag
     * @param body
     */
    public setTag(id: string, tag: string, body?: Array<string>): Promise<Array<string>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling setTag.');
        }
        // verify required parameter 'tag' is not null or undefined
        if (tag === null || tag === undefined)
        {
            throw new Error('Required parameter tag was null or undefined when calling setTag.');
        }

        const __path = this.setTag__generateUrl(id, tag);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param deviceSysId
    */
    public startDeviceElementsReport__generateUrl(deviceSysId: string): string
    {
        return this.basePath + '/assets/device-elements/report/start/${deviceSysId}'
                   .replace('${' + 'deviceSysId' + '}', encodeURIComponent(String(deviceSysId)));
    }

    /**
     *
     *
     * @param deviceSysId
     */
    public startDeviceElementsReport(deviceSysId: string): Promise<string>
    {
        // verify required parameter 'deviceSysId' is not null or undefined
        if (deviceSysId === null || deviceSysId === undefined)
        {
            throw new Error('Required parameter deviceSysId was null or undefined when calling startDeviceElementsReport.');
        }

        const __path = this.startDeviceElementsReport__generateUrl(deviceSysId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    * @param fileName
    */
    public streamDeviceElementReport__generateUrl(id: string, fileName: string): string
    {
        return this.basePath + '/assets/device-elements/report/excel/${id}/${fileName}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'fileName' + '}', encodeURIComponent(String(fileName)));
    }

    /**
     *
     *
     * @param id
     * @param fileName
     */
    public streamDeviceElementReport(id: string, fileName: string): Promise<Blob>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling streamDeviceElementReport.');
        }
        // verify required parameter 'fileName' is not null or undefined
        if (fileName === null || fileName === undefined)
        {
            throw new Error('Required parameter fileName was null or undefined when calling streamDeviceElementReport.');
        }

        const __path = this.streamDeviceElementReport__generateUrl(id, fileName);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/octet-stream');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public tagsQuery__generateUrl(): string
    {
        return this.basePath + '/assets/tags-query';
    }

    /**
     *
     *
     * @param body
     */
    public tagsQuery(body?: models.TagsJoinQuery): Promise<Array<Array<string>>>
    {

        const __path = this.tagsQuery__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public tagsQueryDistinct__generateUrl(): string
    {
        return this.basePath + '/assets/tags-query-distinct';
    }

    /**
     *
     *
     * @param body
     * @param level
     */
    public async tagsQueryDistinct(body?: models.TagsJoinQuery, level?: number): Promise<Array<models.RecordIdentity>>
    {

        const __path = this.tagsQueryDistinct__generateUrl();

        let __requestOptions = new ApiRequest();

        if (level !== undefined)
        {
            __requestOptions.setQueryParam('level', <any>level);
        }

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.RecordIdentity>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.RecordIdentity.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public tagsSummary__generateUrl(): string
    {
        return this.basePath + '/assets/tags-summary';
    }

    /**
     *
     *
     * @param recomputeIfChanged
     */
    public async tagsSummary(recomputeIfChanged?: number): Promise<models.TagsSummary>
    {

        const __path = this.tagsSummary__generateUrl();

        let __requestOptions = new ApiRequest();

        if (recomputeIfChanged !== undefined)
        {
            __requestOptions.setQueryParam('recomputeIfChanged', <any>recomputeIfChanged);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.TagsSummary> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.TagsSummary.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public update__generateUrl(id: string): string
    {
        return this.basePath + '/assets/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param dryRun
     * @param body
     */
    public async update(id: string, dryRun?: boolean, body?: models.Asset): Promise<models.ValidationResults>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling update.');
        }

        const __path = this.update__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (dryRun !== undefined)
        {
            __requestOptions.setQueryParam('dryRun', <any>dryRun);
        }

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.ValidationResults> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.ValidationResults.fixupPrototype(__res);
        }

        return __res;
    }

}
