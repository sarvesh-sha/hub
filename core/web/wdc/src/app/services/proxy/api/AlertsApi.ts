/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AlertsApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    * @param id
    */
    public checkAlertsReport__generateUrl(id: string): string
    {
        return this.basePath + '/alerts/report/check/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param detailed
     */
    public async checkAlertsReport(id: string, detailed?: boolean): Promise<models.AlertsReportProgress>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling checkAlertsReport.');
        }

        const __path = this.checkAlertsReport__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (detailed !== undefined)
        {
            __requestOptions.setQueryParam('detailed', <any>detailed);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.AlertsReportProgress> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AlertsReportProgress.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getAlertFeed__generateUrl(): string
    {
        return this.basePath + '/alerts/feed';
    }

    /**
     *
     *
     * @param rangeStart
     * @param rangeEnd
     */
    public async getAlertFeed(rangeStart?: Date, rangeEnd?: Date): Promise<Array<models.RecordIdentity>>
    {

        const __path = this.getAlertFeed__generateUrl();

        let __requestOptions = new ApiRequest();

        if (rangeStart !== undefined)
        {
            __requestOptions.setQueryParam('rangeStart', <any>rangeStart.toISOString());
        }

        if (rangeEnd !== undefined)
        {
            __requestOptions.setQueryParam('rangeEnd', <any>rangeEnd.toISOString());
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.RecordIdentity>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.RecordIdentity.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public getAlertHistoryBatch__generateUrl(): string
    {
        return this.basePath + '/alerts/batch-history';
    }

    /**
     *
     *
     * @param body
     */
    public async getAlertHistoryBatch(body?: Array<string>): Promise<Array<models.AlertHistory>>
    {

        const __path = this.getAlertHistoryBatch__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.AlertHistory>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.AlertHistory.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getAlertHistoryByID__generateUrl(id: string): string
    {
        return this.basePath + '/alerts/fetch-history/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async getAlertHistoryByID(id: string): Promise<models.AlertHistory>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getAlertHistoryByID.');
        }

        const __path = this.getAlertHistoryByID__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.AlertHistory> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AlertHistory.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getSummary__generateUrl(): string
    {
        return this.basePath + '/alerts/summary';
    }

    /**
     *
     *
     * @param groupBy
     * @param rollupType
     * @param body
     */
    public async getSummary(groupBy?: string, rollupType?: string, body?: models.AlertFilterRequest): Promise<models.AlertFilterResponse>
    {

        const __path = this.getSummary__generateUrl();

        let __requestOptions = new ApiRequest();

        if (groupBy !== undefined)
        {
            __requestOptions.setQueryParam('groupBy', <any>groupBy);
        }

        if (rollupType !== undefined)
        {
            __requestOptions.setQueryParam('rollupType', <any>rollupType);
        }

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.AlertFilterResponse> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AlertFilterResponse.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public listAlertHistoryByID__generateUrl(id: string): string
    {
        return this.basePath + '/alerts/history/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param rangeStart
     * @param rangeEnd
     */
    public async listAlertHistoryByID(id: string, rangeStart?: Date, rangeEnd?: Date): Promise<Array<models.RecordIdentity>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling listAlertHistoryByID.');
        }

        const __path = this.listAlertHistoryByID__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (rangeStart !== undefined)
        {
            __requestOptions.setQueryParam('rangeStart', <any>rangeStart.toISOString());
        }

        if (rangeEnd !== undefined)
        {
            __requestOptions.setQueryParam('rangeEnd', <any>rangeEnd.toISOString());
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.RecordIdentity>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.RecordIdentity.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public startAlertsReport__generateUrl(): string
    {
        return this.basePath + '/alerts/report';
    }

    /**
     *
     *
     */
    public startAlertsReport(): Promise<string>
    {

        const __path = this.startAlertsReport__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    * @param fileName
    */
    public streamAlertsReport__generateUrl(id: string, fileName: string): string
    {
        return this.basePath + '/alerts/report/excel/${id}/${fileName}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'fileName' + '}', encodeURIComponent(String(fileName)));
    }

    /**
     *
     *
     * @param id
     * @param fileName
     */
    public streamAlertsReport(id: string, fileName: string): Promise<Blob>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling streamAlertsReport.');
        }
        // verify required parameter 'fileName' is not null or undefined
        if (fileName === null || fileName === undefined)
        {
            throw new Error('Required parameter fileName was null or undefined when calling streamAlertsReport.');
        }

        const __path = this.streamAlertsReport__generateUrl(id, fileName);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/octet-stream');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

}
