/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Hub APIs
 * APIs and Definitions for the Optio3 Hub product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AlertDefinitionVersionsApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    * @param id
    */
    public checkEvaluation__generateUrl(id: string): string
    {
        return this.basePath + '/alert-definition-versions/eval-range/${id}/check'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param detailed
     */
    public async checkEvaluation(id: string, detailed?: boolean): Promise<models.AlertTestProgress>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling checkEvaluation.');
        }

        const __path = this.checkEvaluation__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (detailed !== undefined)
        {
            __requestOptions.setQueryParam('detailed', <any>detailed);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.AlertTestProgress> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AlertTestProgress.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public create__generateUrl(): string
    {
        return this.basePath + '/alert-definition-versions/create';
    }

    /**
     *
     *
     * @param body
     */
    public async create(body?: models.AlertDefinitionVersion): Promise<models.AlertDefinitionVersion>
    {

        const __path = this.create__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.AlertDefinitionVersion> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AlertDefinitionVersion.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public evaluate__generateUrl(id: string): string
    {
        return this.basePath + '/alert-definition-versions/eval/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param maxSteps
     * @param when
     * @param trace
     */
    public async evaluate(id: string, maxSteps?: number, when?: Date, trace?: boolean): Promise<models.AlertEngineExecutionSteps>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling evaluate.');
        }

        const __path = this.evaluate__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (maxSteps !== undefined)
        {
            __requestOptions.setQueryParam('maxSteps', <any>maxSteps);
        }

        if (when !== undefined)
        {
            __requestOptions.setQueryParam('when', <any>when.toISOString());
        }

        if (trace !== undefined)
        {
            __requestOptions.setQueryParam('trace', <any>trace);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.AlertEngineExecutionSteps> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AlertEngineExecutionSteps.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public evaluateOverRange__generateUrl(id: string): string
    {
        return this.basePath + '/alert-definition-versions/eval-range/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param maxSteps
     * @param interval
     * @param rangeStart
     * @param rangeEnd
     */
    public evaluateOverRange(id: string, maxSteps?: number, interval?: number, rangeStart?: Date, rangeEnd?: Date): Promise<string>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling evaluateOverRange.');
        }

        const __path = this.evaluateOverRange__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (maxSteps !== undefined)
        {
            __requestOptions.setQueryParam('maxSteps', <any>maxSteps);
        }

        if (interval !== undefined)
        {
            __requestOptions.setQueryParam('interval', <any>interval);
        }

        if (rangeStart !== undefined)
        {
            __requestOptions.setQueryParam('rangeStart', <any>rangeStart.toISOString());
        }

        if (rangeEnd !== undefined)
        {
            __requestOptions.setQueryParam('rangeEnd', <any>rangeEnd.toISOString());
        }

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public get__generateUrl(id: string): string
    {
        return this.basePath + '/alert-definition-versions/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async get(id: string): Promise<models.AlertDefinitionVersion>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling get.');
        }

        const __path = this.get__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.AlertDefinitionVersion> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AlertDefinitionVersion.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public getBatch__generateUrl(): string
    {
        return this.basePath + '/alert-definition-versions/batch';
    }

    /**
     *
     *
     * @param body
     */
    public async getBatch(body?: Array<string>): Promise<Array<models.AlertDefinitionVersion>>
    {

        const __path = this.getBatch__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.AlertDefinitionVersion>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.AlertDefinitionVersion.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param predId
    * @param succId
    */
    public link__generateUrl(predId: string, succId: string): string
    {
        return this.basePath + '/alert-definition-versions/item/${predId}/link/${succId}'
                   .replace('${' + 'predId' + '}', encodeURIComponent(String(predId)))
                   .replace('${' + 'succId' + '}', encodeURIComponent(String(succId)));
    }

    /**
     *
     *
     * @param predId
     * @param succId
     */
    public async link(predId: string, succId: string): Promise<models.AlertDefinitionVersion>
    {
        // verify required parameter 'predId' is not null or undefined
        if (predId === null || predId === undefined)
        {
            throw new Error('Required parameter predId was null or undefined when calling link.');
        }
        // verify required parameter 'succId' is not null or undefined
        if (succId === null || succId === undefined)
        {
            throw new Error('Required parameter succId was null or undefined when calling link.');
        }

        const __path = this.link__generateUrl(predId, succId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.AlertDefinitionVersion> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AlertDefinitionVersion.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public makeHead__generateUrl(id: string): string
    {
        return this.basePath + '/alert-definition-versions/item/${id}/make-head'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async makeHead(id: string): Promise<models.AlertDefinitionVersion>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling makeHead.');
        }

        const __path = this.makeHead__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.AlertDefinitionVersion> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AlertDefinitionVersion.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public makeRelease__generateUrl(id: string): string
    {
        return this.basePath + '/alert-definition-versions/item/${id}/make-release'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async makeRelease(id: string): Promise<models.AlertDefinitionVersion>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling makeRelease.');
        }

        const __path = this.makeRelease__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.AlertDefinitionVersion> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AlertDefinitionVersion.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public parseImport__generateUrl(): string
    {
        return this.basePath + '/alert-definition-versions/parse-import';
    }

    /**
     *
     *
     * @param body
     */
    public async parseImport(body?: models.RawImport): Promise<models.AlertDefinitionDetails>
    {

        const __path = this.parseImport__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.AlertDefinitionDetails> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AlertDefinitionDetails.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param baseId
    * @param finalId
    */
    public squash__generateUrl(baseId: string, finalId: string): string
    {
        return this.basePath + '/alert-definition-versions/item/${baseId}/squash/${finalId}'
                   .replace('${' + 'baseId' + '}', encodeURIComponent(String(baseId)))
                   .replace('${' + 'finalId' + '}', encodeURIComponent(String(finalId)));
    }

    /**
     *
     *
     * @param baseId
     * @param finalId
     */
    public async squash(baseId: string, finalId: string): Promise<models.AlertDefinitionVersion>
    {
        // verify required parameter 'baseId' is not null or undefined
        if (baseId === null || baseId === undefined)
        {
            throw new Error('Required parameter baseId was null or undefined when calling squash.');
        }
        // verify required parameter 'finalId' is not null or undefined
        if (finalId === null || finalId === undefined)
        {
            throw new Error('Required parameter finalId was null or undefined when calling squash.');
        }

        const __path = this.squash__generateUrl(baseId, finalId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.AlertDefinitionVersion> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.AlertDefinitionVersion.fixupPrototype(__res);
        }

        return __res;
    }

}
