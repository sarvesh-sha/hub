/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Waypoint APIs
 * APIs and Definitions for the Optio3 Waypoint product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class ProvisionApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    */
    public checkCardFlashing__generateUrl(): string
    {
        return this.basePath + '/provision/card/write/progress';
    }

    /**
     *
     *
     */
    public async checkCardFlashing(): Promise<models.FlashingProgress>
    {

        const __path = this.checkCardFlashing__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.FlashingProgress> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.FlashingProgress.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public detectCard__generateUrl(): string
    {
        return this.basePath + '/provision/card/detect';
    }

    /**
     *
     *
     */
    public detectCard(): Promise<number>
    {

        const __path = this.detectCard__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public downloadingFirmware__generateUrl(): string
    {
        return this.basePath + '/provision/firmware/downloading';
    }

    /**
     *
     *
     */
    public downloadingFirmware(): Promise<number>
    {

        const __path = this.downloadingFirmware__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public getNewCheckins__generateUrl(): string
    {
        return this.basePath + '/provision/checkins';
    }

    /**
     *
     *
     * @param when
     */
    public async getNewCheckins(when?: Date): Promise<Array<models.ProvisionReportExt>>
    {

        const __path = this.getNewCheckins__generateUrl();

        let __requestOptions = new ApiRequest();

        if (when !== undefined)
        {
            __requestOptions.setQueryParam('when', <any>when.toISOString());
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.ProvisionReportExt>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.ProvisionReportExt.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public performCheckin__generateUrl(): string
    {
        return this.basePath + '/provision/checkin/create';
    }

    /**
     *
     *
     * @param body
     */
    public performCheckin(body?: models.ProvisionReport): Promise<boolean>
    {

        const __path = this.performCheckin__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param hostId
    */
    public printCheckin__generateUrl(hostId: string): string
    {
        return this.basePath + '/provision/checkin/print/${hostId}'
                   .replace('${' + 'hostId' + '}', encodeURIComponent(String(hostId)));
    }

    /**
     *
     *
     * @param hostId
     */
    public printCheckin(hostId: string): Promise<boolean>
    {
        // verify required parameter 'hostId' is not null or undefined
        if (hostId === null || hostId === undefined)
        {
            throw new Error('Required parameter hostId was null or undefined when calling printCheckin.');
        }

        const __path = this.printCheckin__generateUrl(hostId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public startCardFlashing__generateUrl(): string
    {
        return this.basePath + '/provision/card/write/start';
    }

    /**
     *
     *
     */
    public async startCardFlashing(): Promise<models.FlashingProgress>
    {

        const __path = this.startCardFlashing__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.FlashingProgress> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.FlashingProgress.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public triggerFirmwareDownload__generateUrl(): string
    {
        return this.basePath + '/provision/firmware/trigger';
    }

    /**
     *
     *
     */
    public triggerFirmwareDownload(): Promise<number>
    {

        const __path = this.triggerFirmwareDownload__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

}
