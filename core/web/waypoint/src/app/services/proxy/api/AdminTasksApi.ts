/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Waypoint APIs
 * APIs and Definitions for the Optio3 Waypoint product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AdminTasksApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    */
    public configLogger__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/loggers/config';
    }

    /**
     *
     *
     * @param body
     */
    public async configLogger(body?: models.LoggerConfiguration): Promise<models.LoggerConfiguration>
    {

        const __path = this.configLogger__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.LoggerConfiguration> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.LoggerConfiguration.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public dumpThreads__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/threads';
    }

    /**
     *
     *
     */
    public dumpThreads(): Promise<string>
    {

        const __path = this.dumpThreads__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public getAppVersion__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/app-version';
    }

    /**
     *
     *
     */
    public getAppVersion(): Promise<string>
    {

        const __path = this.getAppVersion__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public getLoggers__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/loggers/list';
    }

    /**
     *
     *
     */
    public async getLoggers(): Promise<Array<models.LoggerConfiguration>>
    {

        const __path = this.getLoggers__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.LoggerConfiguration>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.LoggerConfiguration.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param option
    */
    public getOption__generateUrl(option: string): string
    {
        return this.basePath + '/admin-tasks/options/${option}'
                   .replace('${' + 'option' + '}', encodeURIComponent(String(option)));
    }

    /**
     *
     *
     * @param option
     */
    public async getOption(option: string): Promise<models.BootConfigLine>
    {
        // verify required parameter 'option' is not null or undefined
        if (option === null || option === undefined)
        {
            throw new Error('Required parameter option was null or undefined when calling getOption.');
        }

        const __path = this.getOption__generateUrl(option);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.BootConfigLine> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.BootConfigLine.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public isProductionMode__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/production-mode';
    }

    /**
     *
     *
     */
    public isProductionMode(): Promise<boolean>
    {

        const __path = this.isProductionMode__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public reboot__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/reboot';
    }

    /**
     *
     *
     */
    public reboot(): Promise<string>
    {

        const __path = this.reboot__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param option
    * @param value
    */
    public setOption__generateUrl(option: string, value: string): string
    {
        return this.basePath + '/admin-tasks/options/${option}/${value}'
                   .replace('${' + 'option' + '}', encodeURIComponent(String(option)))
                   .replace('${' + 'value' + '}', encodeURIComponent(String(value)));
    }

    /**
     *
     *
     * @param option
     * @param value
     */
    public async setOption(option: string, value: string): Promise<models.BootConfigLine>
    {
        // verify required parameter 'option' is not null or undefined
        if (option === null || option === undefined)
        {
            throw new Error('Required parameter option was null or undefined when calling setOption.');
        }
        // verify required parameter 'value' is not null or undefined
        if (value === null || value === undefined)
        {
            throw new Error('Required parameter value was null or undefined when calling setOption.');
        }

        const __path = this.setOption__generateUrl(option, value);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "POST";

        let __res = <models.BootConfigLine> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.BootConfigLine.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public shutdown__generateUrl(): string
    {
        return this.basePath + '/admin-tasks/shutdown';
    }

    /**
     *
     *
     */
    public shutdown(): Promise<string>
    {

        const __path = this.shutdown__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('text/plain');
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param option
    */
    public unsetOption__generateUrl(option: string): string
    {
        return this.basePath + '/admin-tasks/options/${option}'
                   .replace('${' + 'option' + '}', encodeURIComponent(String(option)));
    }

    /**
     *
     *
     * @param option
     */
    public async unsetOption(option: string): Promise<models.BootConfigLine>
    {
        // verify required parameter 'option' is not null or undefined
        if (option === null || option === undefined)
        {
            throw new Error('Required parameter option was null or undefined when calling unsetOption.');
        }

        const __path = this.unsetOption__generateUrl(option);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "DELETE";

        let __res = <models.BootConfigLine> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.BootConfigLine.fixupPrototype(__res);
        }

        return __res;
    }

}
