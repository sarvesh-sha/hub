/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Waypoint APIs
 * APIs and Definitions for the Optio3 Waypoint product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class SensorConfig {
    __type: string;

    protected setDiscriminator(type: string) {
        this.__type = type;
    }

    getFixupPrototypeFunction() { return SensorConfig.fixupPrototype; }

    static newInstance(model: Partial<SensorConfig>): SensorConfig {
        let obj = Object.assign(new SensorConfig(), model);
        SensorConfig.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<SensorConfig>): SensorConfig {
        if (!model) return null;
        return SensorConfig.newInstance(<SensorConfig> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: SensorConfig) {
        if (!obj) return;

        switch (obj.__type)
        {
            case "SensorConfigForArgoHytos":
                Object.setPrototypeOf(obj, models.SensorConfigForArgoHytos.prototype);
                break;
            case "SensorConfigForBergstrom":
                Object.setPrototypeOf(obj, models.SensorConfigForBergstrom.prototype);
                break;
            case "SensorConfigForBluesky":
                Object.setPrototypeOf(obj, models.SensorConfigForBluesky.prototype);
                break;
            case "SensorConfigForEpSolar":
                Object.setPrototypeOf(obj, models.SensorConfigForEpSolar.prototype);
                break;
            case "SensorConfigForGps":
                Object.setPrototypeOf(obj, models.SensorConfigForGps.prototype);
                break;
            case "SensorConfigForHendricksonWatchman":
                Object.setPrototypeOf(obj, models.SensorConfigForHendricksonWatchman.prototype);
                break;
            case "SensorConfigForHolykell":
                Object.setPrototypeOf(obj, models.SensorConfigForHolykell.prototype);
                break;
            case "SensorConfigForI2CHub":
                Object.setPrototypeOf(obj, models.SensorConfigForI2CHub.prototype);
                break;
            case "SensorConfigForJ1939":
                Object.setPrototypeOf(obj, models.SensorConfigForJ1939.prototype);
                break;
            case "SensorConfigForMontageBluetoothGateway":
                Object.setPrototypeOf(obj, models.SensorConfigForMontageBluetoothGateway.prototype);
                break;
            case "SensorConfigForPalfinger":
                Object.setPrototypeOf(obj, models.SensorConfigForPalfinger.prototype);
                break;
            case "SensorConfigForRawCANbus":
                Object.setPrototypeOf(obj, models.SensorConfigForRawCANbus.prototype);
                break;
            case "SensorConfigForStealthPower":
                Object.setPrototypeOf(obj, models.SensorConfigForStealthPower.prototype);
                break;
            case "SensorConfigForTriStar":
                Object.setPrototypeOf(obj, models.SensorConfigForTriStar.prototype);
                break;
            case "SensorConfigForVictron":
                Object.setPrototypeOf(obj, models.SensorConfigForVictron.prototype);
                break;
        }

        obj.fixupFields();
    }

    fixupFields() {
        if (this.seconds === undefined) {
            this.seconds = 0;
        }
    }

    seconds: number;

}
