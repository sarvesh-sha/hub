/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Waypoint APIs
 * APIs and Definitions for the Optio3 Waypoint product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class SensorResult {
    __type: string;

    protected setDiscriminator(type: string) {
        this.__type = type;
    }

    getFixupPrototypeFunction() { return SensorResult.fixupPrototype; }

    static newInstance(model: Partial<SensorResult>): SensorResult {
        let obj = Object.assign(new SensorResult(), model);
        SensorResult.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<SensorResult>): SensorResult {
        if (!model) return null;
        return SensorResult.newInstance(<SensorResult> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: SensorResult) {
        if (!obj) return;

        switch (obj.__type)
        {
            case "SensorResultForArgoHytos":
                Object.setPrototypeOf(obj, models.SensorResultForArgoHytos.prototype);
                break;
            case "SensorResultForBergstrom":
                Object.setPrototypeOf(obj, models.SensorResultForBergstrom.prototype);
                break;
            case "SensorResultForBluesky":
                Object.setPrototypeOf(obj, models.SensorResultForBluesky.prototype);
                break;
            case "SensorResultForEpSolar":
                Object.setPrototypeOf(obj, models.SensorResultForEpSolar.prototype);
                break;
            case "SensorResultForGps":
                Object.setPrototypeOf(obj, models.SensorResultForGps.prototype);
                break;
            case "SensorResultForHendricksonWatchman":
                Object.setPrototypeOf(obj, models.SensorResultForHendricksonWatchman.prototype);
                break;
            case "SensorResultForHolykell":
                Object.setPrototypeOf(obj, models.SensorResultForHolykell.prototype);
                break;
            case "SensorResultForI2CHub":
                Object.setPrototypeOf(obj, models.SensorResultForI2CHub.prototype);
                break;
            case "SensorResultForJ1939":
                Object.setPrototypeOf(obj, models.SensorResultForJ1939.prototype);
                break;
            case "SensorResultForMontageBluetoothGateway":
                Object.setPrototypeOf(obj, models.SensorResultForMontageBluetoothGateway.prototype);
                break;
            case "SensorResultForPalfinger":
                Object.setPrototypeOf(obj, models.SensorResultForPalfinger.prototype);
                break;
            case "SensorResultForRawCANbus":
                Object.setPrototypeOf(obj, models.SensorResultForRawCANbus.prototype);
                break;
            case "SensorResultForStealthPower":
                Object.setPrototypeOf(obj, models.SensorResultForStealthPower.prototype);
                break;
            case "SensorResultForTriStar":
                Object.setPrototypeOf(obj, models.SensorResultForTriStar.prototype);
                break;
            case "SensorResultForVictron":
                Object.setPrototypeOf(obj, models.SensorResultForVictron.prototype);
                break;
            case "SensorResultForZeroRPM":
                Object.setPrototypeOf(obj, models.SensorResultForZeroRPM.prototype);
                break;
        }

        obj.fixupFields();
    }

    fixupFields() {
    }

    success: boolean;

    portDetected: boolean;

    failure: string;

}
