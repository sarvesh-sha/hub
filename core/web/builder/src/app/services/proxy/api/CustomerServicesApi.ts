/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Builder APIs
 * APIs and Definitions for the Optio3 Builder product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class CustomerServicesApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    * @param id
    */
    public addImage__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/add-image'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param body
     */
    public addImage(id: string, body?: models.RoleAndArchitectureWithImage): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling addImage.');
        }

        const __path = this.addImage__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public backup__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/backup'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async backup(id: string): Promise<models.BackgroundActivity>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling backup.');
        }

        const __path = this.backup__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.BackgroundActivity> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.BackgroundActivity.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public checkUsages__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/check-usages'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param body
     */
    public checkUsages(id: string, body?: models.UsageFilterRequest): Promise<string>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling checkUsages.');
        }

        const __path = this.checkUsages__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('text/plain');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public checkUsagesProgress__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/check-usages/progress/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param detailed
     */
    public async checkUsagesProgress(id: string, detailed?: boolean): Promise<models.CheckUsagesProgress>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling checkUsagesProgress.');
        }

        const __path = this.checkUsagesProgress__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (detailed !== undefined)
        {
            __requestOptions.setQueryParam('detailed', <any>detailed);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.CheckUsagesProgress> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.CheckUsagesProgress.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public compactTimeSeries__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/compact-time-series'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async compactTimeSeries(id: string): Promise<models.BackgroundActivity>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling compactTimeSeries.');
        }

        const __path = this.compactTimeSeries__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.BackgroundActivity> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.BackgroundActivity.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param customerId
    */
    public create__generateUrl(customerId: string): string
    {
        return this.basePath + '/customer-services/create/${customerId}'
                   .replace('${' + 'customerId' + '}', encodeURIComponent(String(customerId)));
    }

    /**
     *
     *
     * @param customerId
     * @param body
     */
    public async create(customerId: string, body?: models.CustomerService): Promise<models.CustomerService>
    {
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined)
        {
            throw new Error('Required parameter customerId was null or undefined when calling create.');
        }

        const __path = this.create__generateUrl(customerId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.CustomerService> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.CustomerService.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public deleteLog__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/log'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param olderThanXMinutes
     */
    public deleteLog(id: string, olderThanXMinutes?: number): Promise<number>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling deleteLog.');
        }

        const __path = this.deleteLog__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (olderThanXMinutes !== undefined)
        {
            __requestOptions.setQueryParam('olderThanXMinutes', <any>olderThanXMinutes);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "DELETE";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public deploy__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/deploy'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param body
     */
    public async deploy(id: string, body?: models.DeploymentHostConfig): Promise<models.DeploymentHost>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling deploy.');
        }

        const __path = this.deploy__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.DeploymentHost> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeploymentHost.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public desiredState__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/desired-state'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param body
     */
    public async desiredState(id: string, body?: models.CustomerServiceDesiredState): Promise<models.BackgroundActivity>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling desiredState.');
        }

        const __path = this.desiredState__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.BackgroundActivity> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.BackgroundActivity.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public filterLog__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/log/filter'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param body
     */
    public async filterLog(id: string, body?: models.LogEntryFilterRequest): Promise<Array<models.LogRange>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling filterLog.');
        }

        const __path = this.filterLog__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.LogRange>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.LogRange.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public get__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async get(id: string): Promise<models.CustomerService>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling get.');
        }

        const __path = this.get__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.CustomerService> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.CustomerService.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param customerId
    */
    public getAll__generateUrl(customerId: string): string
    {
        return this.basePath + '/customer-services/all/${customerId}'
                   .replace('${' + 'customerId' + '}', encodeURIComponent(String(customerId)));
    }

    /**
     *
     *
     * @param customerId
     */
    public async getAll(customerId: string): Promise<Array<models.RecordIdentity>>
    {
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined)
        {
            throw new Error('Required parameter customerId was null or undefined when calling getAll.');
        }

        const __path = this.getAll__generateUrl(customerId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.RecordIdentity>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.RecordIdentity.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param instanceType
    */
    public getAvailableAccounts__generateUrl(instanceType: string): string
    {
        return this.basePath + '/customer-services/accounts/${instanceType}'
                   .replace('${' + 'instanceType' + '}', encodeURIComponent(String(instanceType)));
    }

    /**
     *
     *
     * @param instanceType
     */
    public getAvailableAccounts(instanceType: string): Promise<Array<string>>
    {
        // verify required parameter 'instanceType' is not null or undefined
        if (instanceType === null || instanceType === undefined)
        {
            throw new Error('Required parameter instanceType was null or undefined when calling getAvailableAccounts.');
        }

        const __path = this.getAvailableAccounts__generateUrl(instanceType);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param instanceType
    */
    public getAvailableRegions__generateUrl(instanceType: string): string
    {
        return this.basePath + '/customer-services/regions/${instanceType}'
                   .replace('${' + 'instanceType' + '}', encodeURIComponent(String(instanceType)));
    }

    /**
     *
     *
     * @param instanceType
     */
    public getAvailableRegions(instanceType: string): Promise<Array<string>>
    {
        // verify required parameter 'instanceType' is not null or undefined
        if (instanceType === null || instanceType === undefined)
        {
            throw new Error('Required parameter instanceType was null or undefined when calling getAvailableRegions.');
        }

        const __path = this.getAvailableRegions__generateUrl(instanceType);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public getBatch__generateUrl(): string
    {
        return this.basePath + '/customer-services/batch';
    }

    /**
     *
     *
     * @param body
     */
    public async getBatch(body?: Array<string>): Promise<Array<models.CustomerService>>
    {

        const __path = this.getBatch__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.CustomerService>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.CustomerService.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getCharges__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/charges'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param maxTopHosts
     */
    public async getCharges(id: string, maxTopHosts?: number): Promise<models.DeploymentCellularChargesSummary>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getCharges.');
        }

        const __path = this.getCharges__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (maxTopHosts !== undefined)
        {
            __requestOptions.setQueryParam('maxTopHosts', <any>maxTopHosts);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.DeploymentCellularChargesSummary> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeploymentCellularChargesSummary.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    * @param fileName
    */
    public getChargesReport__generateUrl(id: string, fileName: string): string
    {
        return this.basePath + '/customer-services/item/${id}/charges-report/${fileName}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'fileName' + '}', encodeURIComponent(String(fileName)));
    }

    /**
     *
     *
     * @param id
     * @param fileName
     */
    public getChargesReport(id: string, fileName: string): Promise<string>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getChargesReport.');
        }
        // verify required parameter 'fileName' is not null or undefined
        if (fileName === null || fileName === undefined)
        {
            throw new Error('Required parameter fileName was null or undefined when calling getChargesReport.');
        }

        const __path = this.getChargesReport__generateUrl(id, fileName);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/csv');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public getHeapStatusHistory__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/heap-status-history'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async getHeapStatusHistory(id: string): Promise<Array<models.HubHeapAndThreads>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getHeapStatusHistory.');
        }

        const __path = this.getHeapStatusHistory__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.HubHeapAndThreads>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.HubHeapAndThreads.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getLog__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/log'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param fromOffset
     * @param toOffset
     * @param limit
     */
    public async getLog(id: string, fromOffset?: number, toOffset?: number, limit?: number): Promise<Array<models.LogLine>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getLog.');
        }

        const __path = this.getLog__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (fromOffset !== undefined)
        {
            __requestOptions.setQueryParam('fromOffset', <any>fromOffset);
        }

        if (toOffset !== undefined)
        {
            __requestOptions.setQueryParam('toOffset', <any>toOffset);
        }

        if (limit !== undefined)
        {
            __requestOptions.setQueryParam('limit', <any>limit);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.LogLine>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.LogLine.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public manageUpgradeBlocker__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/upgrade-blocker'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param until
     */
    public manageUpgradeBlocker(id: string, until?: Date): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling manageUpgradeBlocker.');
        }

        const __path = this.manageUpgradeBlocker__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (until !== undefined)
        {
            __requestOptions.setQueryParam('until', <any>until.toISOString());
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public migrate__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/migrate'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async migrate(id: string): Promise<models.BackgroundActivity>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling migrate.');
        }

        const __path = this.migrate__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "PATCH";

        let __res = <models.BackgroundActivity> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.BackgroundActivity.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public refreshAccounts__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/refresh-accounts'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async refreshAccounts(id: string): Promise<models.BackgroundActivity>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling refreshAccounts.');
        }

        const __path = this.refreshAccounts__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.BackgroundActivity> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.BackgroundActivity.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public refreshCertificate__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/refresh-certificate'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async refreshCertificate(id: string): Promise<models.BackgroundActivity>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling refreshCertificate.');
        }

        const __path = this.refreshCertificate__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "PATCH";

        let __res = <models.BackgroundActivity> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.BackgroundActivity.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public refreshSecrets__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/refresh-secrets'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async refreshSecrets(id: string): Promise<models.BackgroundActivity>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling refreshSecrets.');
        }

        const __path = this.refreshSecrets__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.BackgroundActivity> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.BackgroundActivity.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public remove__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param dryRun
     */
    public async remove(id: string, dryRun?: boolean): Promise<models.ValidationResults>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling remove.');
        }

        const __path = this.remove__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (dryRun !== undefined)
        {
            __requestOptions.setQueryParam('dryRun', <any>dryRun);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "DELETE";

        let __res = <models.ValidationResults> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.ValidationResults.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public setAlertThresholds__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/alert-thresholds'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param role
     * @param warningThreshold
     * @param alertThreshold
     */
    public setAlertThresholds(id: string, role?: string, warningThreshold?: number, alertThreshold?: number): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling setAlertThresholds.');
        }

        const __path = this.setAlertThresholds__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (role !== undefined)
        {
            __requestOptions.setQueryParam('role', <any>role);
        }

        if (warningThreshold !== undefined)
        {
            __requestOptions.setQueryParam('warningThreshold', <any>warningThreshold);
        }

        if (alertThreshold !== undefined)
        {
            __requestOptions.setQueryParam('alertThreshold', <any>alertThreshold);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public setBatteryThresholds__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}/battery-thresholds'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param body
     */
    public setBatteryThresholds(id: string, body?: models.DeployerShutdownConfiguration): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling setBatteryThresholds.');
        }

        const __path = this.setBatteryThresholds__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public update__generateUrl(id: string): string
    {
        return this.basePath + '/customer-services/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param dryRun
     * @param body
     */
    public async update(id: string, dryRun?: boolean, body?: models.CustomerService): Promise<models.ValidationResults>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling update.');
        }

        const __path = this.update__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (dryRun !== undefined)
        {
            __requestOptions.setQueryParam('dryRun', <any>dryRun);
        }

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.ValidationResults> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.ValidationResults.fixupPrototype(__res);
        }

        return __res;
    }

}
