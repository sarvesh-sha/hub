/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Builder APIs
 * APIs and Definitions for the Optio3 Builder product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class DeploymentHostProvisioningApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    * @param id
    */
    public addNotes__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-host-provisioning/item/${id}/add-notes'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param body
     */
    public addNotes(id: string, body?: models.DeploymentHostProvisioningNotes): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling addNotes.');
        }

        const __path = this.addNotes__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public checkStatus__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-host-provisioning/item/${id}/check-status'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async checkStatus(id: string): Promise<models.DeploymentHostProvisioningStatus>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling checkStatus.');
        }

        const __path = this.checkStatus__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.DeploymentHostProvisioningStatus> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeploymentHostProvisioningStatus.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    */
    public checkin__generateUrl(): string
    {
        return this.basePath + '/deployment-host-provisioning/checkin';
    }

    /**
     *
     *
     * @param body
     */
    public checkin(body?: models.ProvisionReport): Promise<boolean>
    {

        const __path = this.checkin__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public listFirmwares__generateUrl(): string
    {
        return this.basePath + '/deployment-host-provisioning/firmware/list';
    }

    /**
     *
     *
     * @param prefix
     */
    public async listFirmwares(prefix?: string): Promise<Array<models.ProvisionFirmware>>
    {

        const __path = this.listFirmwares__generateUrl();

        let __requestOptions = new ApiRequest();

        if (prefix !== undefined)
        {
            __requestOptions.setQueryParam('prefix', <any>prefix);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.ProvisionFirmware>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.ProvisionFirmware.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param manufacturingLocation
    */
    public recentCheckins__generateUrl(manufacturingLocation: string): string
    {
        return this.basePath + '/deployment-host-provisioning/recentCheckins/${manufacturingLocation}'
                   .replace('${' + 'manufacturingLocation' + '}', encodeURIComponent(String(manufacturingLocation)));
    }

    /**
     *
     *
     * @param manufacturingLocation
     */
    public async recentCheckins(manufacturingLocation: string): Promise<Array<models.ProvisionReport>>
    {
        // verify required parameter 'manufacturingLocation' is not null or undefined
        if (manufacturingLocation === null || manufacturingLocation === undefined)
        {
            throw new Error('Required parameter manufacturingLocation was null or undefined when calling recentCheckins.');
        }

        const __path = this.recentCheckins__generateUrl(manufacturingLocation);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.ProvisionReport>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.ProvisionReport.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param fileName
    */
    public streamFirmware__generateUrl(fileName: string): string
    {
        return this.basePath + '/deployment-host-provisioning/firmware/stream/${fileName}'
                   .replace('${' + 'fileName' + '}', encodeURIComponent(String(fileName)));
    }

    /**
     *
     *
     * @param fileName
     */
    public streamFirmware(fileName: string): Promise<Blob>
    {
        // verify required parameter 'fileName' is not null or undefined
        if (fileName === null || fileName === undefined)
        {
            throw new Error('Required parameter fileName was null or undefined when calling streamFirmware.');
        }

        const __path = this.streamFirmware__generateUrl(fileName);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/gzip');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

}
