/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Builder APIs
 * APIs and Definitions for the Optio3 Builder product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }  from '@angular/core';

import * as models               from '../model/models';
import { COLLECTION_FORMATS    } from '../variables';
import { ApiClient, ApiRequest } from 'framework/services/api.client';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class DeploymentHostsApi
{
    constructor(private client: ApiClient, protected basePath: string)
    {
    }

    /**
    *
    *
    * @param id
    */
    public addNotes__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/add-notes'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param body
     */
    public addNotes(id: string, body?: models.DeploymentHostProvisioningNotes): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling addNotes.');
        }

        const __path = this.addNotes__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    * @param serviceId
    * @param role
    */
    public bindToService__generateUrl(id: string, serviceId: string, role: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/bind/${serviceId}/${role}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'serviceId' + '}', encodeURIComponent(String(serviceId)))
                   .replace('${' + 'role' + '}', encodeURIComponent(String(role)));
    }

    /**
     *
     *
     * @param id
     * @param serviceId
     * @param role
     */
    public bindToService(id: string, serviceId: string, role: string): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling bindToService.');
        }
        // verify required parameter 'serviceId' is not null or undefined
        if (serviceId === null || serviceId === undefined)
        {
            throw new Error('Required parameter serviceId was null or undefined when calling bindToService.');
        }
        // verify required parameter 'role' is not null or undefined
        if (role === null || role === undefined)
        {
            throw new Error('Required parameter role was null or undefined when calling bindToService.');
        }

        const __path = this.bindToService__generateUrl(id, serviceId, role);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public deleteLog__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/log'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param olderThanXMinutes
     */
    public deleteLog(id: string, olderThanXMinutes?: number): Promise<number>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling deleteLog.');
        }

        const __path = this.deleteLog__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (olderThanXMinutes !== undefined)
        {
            __requestOptions.setQueryParam('olderThanXMinutes', <any>olderThanXMinutes);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "DELETE";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public describeFiltered__generateUrl(): string
    {
        return this.basePath + '/deployment-hosts/describe-filtered';
    }

    /**
     *
     *
     * @param body
     */
    public async describeFiltered(body?: models.DeploymentHostFilterRequest): Promise<Array<models.DeploymentHostStatusDescriptor>>
    {

        const __path = this.describeFiltered__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.DeploymentHostStatusDescriptor>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.DeploymentHostStatusDescriptor.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public fetchBootOptions__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/boot-options/fetch'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async fetchBootOptions(id: string): Promise<models.BootOptions>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling fetchBootOptions.');
        }

        const __path = this.fetchBootOptions__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.BootOptions> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.BootOptions.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public filterLog__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/log/filter'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param body
     */
    public async filterLog(id: string, body?: models.LogEntryFilterRequest): Promise<Array<models.LogRange>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling filterLog.');
        }

        const __path = this.filterLog__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.LogRange>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.LogRange.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public get__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async get(id: string): Promise<models.DeploymentHost>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling get.');
        }

        const __path = this.get__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.DeploymentHost> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeploymentHost.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getAgents__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/agents'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async getAgents(id: string): Promise<Array<models.RecordIdentity>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getAgents.');
        }

        const __path = this.getAgents__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.RecordIdentity>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.RecordIdentity.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    */
    public getBatch__generateUrl(): string
    {
        return this.basePath + '/deployment-hosts/batch';
    }

    /**
     *
     *
     * @param body
     */
    public async getBatch(body?: Array<string>): Promise<Array<models.DeploymentHost>>
    {

        const __path = this.getBatch__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.DeploymentHost>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.DeploymentHost.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getBootOptions__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/boot-options'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async getBootOptions(id: string): Promise<models.BootOptions>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getBootOptions.');
        }

        const __path = this.getBootOptions__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.BootOptions> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.BootOptions.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getCharges__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/charges'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param refresh
     */
    public async getCharges(id: string, refresh?: boolean): Promise<models.DeploymentCellularChargesSummary>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getCharges.');
        }

        const __path = this.getCharges__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (refresh !== undefined)
        {
            __requestOptions.setQueryParam('refresh', <any>refresh);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.DeploymentCellularChargesSummary> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeploymentCellularChargesSummary.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getDataConnectionStatus__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/data-connection-status'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async getDataConnectionStatus(id: string): Promise<models.DeploymentCellularStatus>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getDataConnectionStatus.');
        }

        const __path = this.getDataConnectionStatus__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.DeploymentCellularStatus> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeploymentCellularStatus.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getDataExchanges__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/data-exchanges'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param days
     */
    public async getDataExchanges(id: string, days?: number): Promise<models.DeploymentCellularCommunications>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getDataExchanges.');
        }

        const __path = this.getDataExchanges__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (days !== undefined)
        {
            __requestOptions.setQueryParam('days', <any>days);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.DeploymentCellularCommunications> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeploymentCellularCommunications.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getDataSessions__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/data-sessions'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async getDataSessions(id: string): Promise<Array<models.DeploymentCellularSession>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getDataSessions.');
        }

        const __path = this.getDataSessions__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.DeploymentCellularSession>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.DeploymentCellularSession.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getDelayedOps__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/delayed-ops'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async getDelayedOps(id: string): Promise<models.DelayedOperations>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getDelayedOps.');
        }

        const __path = this.getDelayedOps__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.DelayedOperations> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DelayedOperations.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getFiles__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/files'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async getFiles(id: string): Promise<Array<models.RecordIdentity>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getFiles.');
        }

        const __path = this.getFiles__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.RecordIdentity>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.RecordIdentity.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getLog__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/log'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param fromOffset
     * @param toOffset
     * @param limit
     */
    public async getLog(id: string, fromOffset?: number, toOffset?: number, limit?: number): Promise<Array<models.LogLine>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getLog.');
        }

        const __path = this.getLog__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (fromOffset !== undefined)
        {
            __requestOptions.setQueryParam('fromOffset', <any>fromOffset);
        }

        if (toOffset !== undefined)
        {
            __requestOptions.setQueryParam('toOffset', <any>toOffset);
        }

        if (limit !== undefined)
        {
            __requestOptions.setQueryParam('limit', <any>limit);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.LogLine>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.LogLine.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getProvisioningInfo__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/provisioning'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async getProvisioningInfo(id: string): Promise<models.DeploymentHostProvisioningInfo>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getProvisioningInfo.');
        }

        const __path = this.getProvisioningInfo__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.DeploymentHostProvisioningInfo> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeploymentHostProvisioningInfo.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getProvisioningLabel__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/label'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public getProvisioningLabel(id: string): Promise<Array<string>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getProvisioningLabel.');
        }

        const __path = this.getProvisioningLabel__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('image/jpeg');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public getRemote__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/remote'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param force
     */
    public async getRemote(id: string, force?: boolean): Promise<models.DeploymentHostServiceDetails>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getRemote.');
        }

        const __path = this.getRemote__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (force !== undefined)
        {
            __requestOptions.setQueryParam('force', <any>force);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.DeploymentHostServiceDetails> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeploymentHostServiceDetails.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public getTasks__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/tasks'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async getTasks(id: string): Promise<Array<models.RecordIdentity>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling getTasks.');
        }

        const __path = this.getTasks__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.RecordIdentity>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.RecordIdentity.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public listImages__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/images'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async listImages(id: string): Promise<Array<models.DeploymentHostImage>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling listImages.');
        }

        const __path = this.listImages__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.DeploymentHostImage>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.DeploymentHostImage.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public logRpc__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/log-rpc'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param state
     */
    public logRpc(id: string, state?: boolean): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling logRpc.');
        }

        const __path = this.logRpc__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (state !== undefined)
        {
            __requestOptions.setQueryParam('state', <any>state);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public notifyMe__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/notify-me'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public notifyMe(id: string): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling notifyMe.');
        }

        const __path = this.notifyMe__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    * @param customerId
    */
    public prepareForCustomer__generateUrl(id: string, customerId: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/prepare-for-customer/${customerId}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'customerId' + '}', encodeURIComponent(String(customerId)));
    }

    /**
     *
     *
     * @param id
     * @param customerId
     */
    public prepareForCustomer(id: string, customerId: string): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling prepareForCustomer.');
        }
        // verify required parameter 'customerId' is not null or undefined
        if (customerId === null || customerId === undefined)
        {
            throw new Error('Required parameter customerId was null or undefined when calling prepareForCustomer.');
        }

        const __path = this.prepareForCustomer__generateUrl(id, customerId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public prepareForOfflineDeployment__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/prepare-for-offline-deployment'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public async prepareForOfflineDeployment(id: string): Promise<Array<models.DeploymentHostOffline>>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling prepareForOfflineDeployment.');
        }

        const __path = this.prepareForOfflineDeployment__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <Array<models.DeploymentHostOffline>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.DeploymentHostOffline.fixupPrototype(val);
            }
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    * @param serviceId
    */
    public prepareForService__generateUrl(id: string, serviceId: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/prepare-for-service/${serviceId}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'serviceId' + '}', encodeURIComponent(String(serviceId)));
    }

    /**
     *
     *
     * @param id
     * @param serviceId
     */
    public prepareForService(id: string, serviceId: string): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling prepareForService.');
        }
        // verify required parameter 'serviceId' is not null or undefined
        if (serviceId === null || serviceId === undefined)
        {
            throw new Error('Required parameter serviceId was null or undefined when calling prepareForService.');
        }

        const __path = this.prepareForService__generateUrl(id, serviceId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    * @param days
    */
    public pruneImages__generateUrl(id: string, days: number): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/image-prune/${days}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'days' + '}', encodeURIComponent(String(days)));
    }

    /**
     *
     *
     * @param id
     * @param days
     */
    public pruneImages(id: string, days: number): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling pruneImages.');
        }
        // verify required parameter 'days' is not null or undefined
        if (days === null || days === undefined)
        {
            throw new Error('Required parameter days was null or undefined when calling pruneImages.');
        }

        const __path = this.pruneImages__generateUrl(id, days);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public refreshImages__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/refresh-images'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     */
    public refreshImages(id: string): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling refreshImages.');
        }

        const __path = this.refreshImages__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public remove__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param dryRun
     */
    public async remove(id: string, dryRun?: boolean): Promise<models.ValidationResults>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling remove.');
        }

        const __path = this.remove__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (dryRun !== undefined)
        {
            __requestOptions.setQueryParam('dryRun', <any>dryRun);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "DELETE";

        let __res = <models.ValidationResults> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.ValidationResults.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public removeDelayedOp__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/delayed-ops'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param body
     */
    public async removeDelayedOp(id: string, body?: models.DelayedOperation): Promise<models.DelayedOperations>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling removeDelayedOp.');
        }

        const __path = this.removeDelayedOp__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.DelayedOperations> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DelayedOperations.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    * @param sysId
    */
    public removeProvisioningInfo__generateUrl(id: string, sysId: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/provisioning/${sysId}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'sysId' + '}', encodeURIComponent(String(sysId)));
    }

    /**
     *
     *
     * @param id
     * @param sysId
     */
    public async removeProvisioningInfo(id: string, sysId: string): Promise<models.DeploymentHostProvisioningInfo>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling removeProvisioningInfo.');
        }
        // verify required parameter 'sysId' is not null or undefined
        if (sysId === null || sysId === undefined)
        {
            throw new Error('Required parameter sysId was null or undefined when calling removeProvisioningInfo.');
        }

        const __path = this.removeProvisioningInfo__generateUrl(id, sysId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "DELETE";

        let __res = <models.DeploymentHostProvisioningInfo> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeploymentHostProvisioningInfo.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param fileName
    */
    public reportInventory__generateUrl(fileName: string): string
    {
        return this.basePath + '/deployment-hosts/inventory/${fileName}'
                   .replace('${' + 'fileName' + '}', encodeURIComponent(String(fileName)));
    }

    /**
     *
     *
     * @param fileName
     * @param body
     */
    public reportInventory(fileName: string, body?: models.DeploymentHostFilterRequest): Promise<Blob>
    {
        // verify required parameter 'fileName' is not null or undefined
        if (fileName === null || fileName === undefined)
        {
            throw new Error('Required parameter fileName was null or undefined when calling reportInventory.');
        }

        const __path = this.reportInventory__generateUrl(fileName);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/octet-stream');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public setAlertThresholds__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/alert-thresholds'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param role
     * @param warningThreshold
     * @param alertThreshold
     */
    public setAlertThresholds(id: string, role?: string, warningThreshold?: number, alertThreshold?: number): Promise<string>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling setAlertThresholds.');
        }

        const __path = this.setAlertThresholds__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (role !== undefined)
        {
            __requestOptions.setQueryParam('role', <any>role);
        }

        if (warningThreshold !== undefined)
        {
            __requestOptions.setQueryParam('warningThreshold', <any>warningThreshold);
        }

        if (alertThreshold !== undefined)
        {
            __requestOptions.setQueryParam('alertThreshold', <any>alertThreshold);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public setBatteryThresholds__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/battery-thresholds'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param body
     */
    public setBatteryThresholds(id: string, body?: models.DeployerShutdownConfiguration): Promise<string>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling setBatteryThresholds.');
        }

        const __path = this.setBatteryThresholds__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public setBootOption__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/boot-options'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param body
     */
    public async setBootOption(id: string, body?: models.BootConfigOptionAndValue): Promise<models.BootOptions>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling setBootOption.');
        }

        const __path = this.setBootOption__generateUrl(id);

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.BootOptions> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.BootOptions.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    * @param imageId
    */
    public startAgent__generateUrl(id: string, imageId: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/start-agent/${imageId}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'imageId' + '}', encodeURIComponent(String(imageId)));
    }

    /**
     *
     *
     * @param id
     * @param imageId
     */
    public startAgent(id: string, imageId: string): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling startAgent.');
        }
        // verify required parameter 'imageId' is not null or undefined
        if (imageId === null || imageId === undefined)
        {
            throw new Error('Required parameter imageId was null or undefined when calling startAgent.');
        }

        const __path = this.startAgent__generateUrl(id, imageId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    * @param imageId
    */
    public startTask__generateUrl(id: string, imageId: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/new-task/${imageId}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'imageId' + '}', encodeURIComponent(String(imageId)));
    }

    /**
     *
     *
     * @param id
     * @param imageId
     * @param body
     */
    public async startTask(id: string, imageId: string, body?: models.DeploymentTaskConfiguration): Promise<models.DeploymentHost>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling startTask.');
        }
        // verify required parameter 'imageId' is not null or undefined
        if (imageId === null || imageId === undefined)
        {
            throw new Error('Required parameter imageId was null or undefined when calling startTask.');
        }

        const __path = this.startTask__generateUrl(id, imageId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.DeploymentHost> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.DeploymentHost.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    */
    public terminate__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/terminate'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param dryRun
     */
    public async terminate(id: string, dryRun?: boolean): Promise<models.ValidationResults>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling terminate.');
        }

        const __path = this.terminate__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (dryRun !== undefined)
        {
            __requestOptions.setQueryParam('dryRun', <any>dryRun);
        }

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        let __res = <models.ValidationResults> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.ValidationResults.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    * @param role
    */
    public unbindFromService__generateUrl(id: string, role: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/unbind/${role}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'role' + '}', encodeURIComponent(String(role)));
    }

    /**
     *
     *
     * @param id
     * @param role
     */
    public unbindFromService(id: string, role: string): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling unbindFromService.');
        }
        // verify required parameter 'role' is not null or undefined
        if (role === null || role === undefined)
        {
            throw new Error('Required parameter role was null or undefined when calling unbindFromService.');
        }

        const __path = this.unbindFromService__generateUrl(id, role);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    * @param id
    */
    public update__generateUrl(id: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)));
    }

    /**
     *
     *
     * @param id
     * @param dryRun
     * @param body
     */
    public async update(id: string, dryRun?: boolean, body?: models.DeploymentHost): Promise<models.ValidationResults>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling update.');
        }

        const __path = this.update__generateUrl(id);

        let __requestOptions = new ApiRequest();

        if (dryRun !== undefined)
        {
            __requestOptions.setQueryParam('dryRun', <any>dryRun);
        }

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <models.ValidationResults> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            models.ValidationResults.fixupPrototype(__res);
        }

        return __res;
    }

    /**
    *
    *
    * @param id
    * @param imageId
    */
    public updateWaypoint__generateUrl(id: string, imageId: string): string
    {
        return this.basePath + '/deployment-hosts/item/${id}/update-waypoint/${imageId}'
                   .replace('${' + 'id' + '}', encodeURIComponent(String(id)))
                   .replace('${' + 'imageId' + '}', encodeURIComponent(String(imageId)));
    }

    /**
     *
     *
     * @param id
     * @param imageId
     */
    public updateWaypoint(id: string, imageId: string): Promise<boolean>
    {
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined)
        {
            throw new Error('Required parameter id was null or undefined when calling updateWaypoint.');
        }
        // verify required parameter 'imageId' is not null or undefined
        if (imageId === null || imageId === undefined)
        {
            throw new Error('Required parameter imageId was null or undefined when calling updateWaypoint.');
        }

        const __path = this.updateWaypoint__generateUrl(id, imageId);

        let __requestOptions = new ApiRequest();

        __requestOptions.setProduce('application/json');
        __requestOptions.method = "GET";

        return this.client.callWithOptions(__path, __requestOptions);
    }

    /**
    *
    *
    */
    public upgradeAgents__generateUrl(): string
    {
        return this.basePath + '/deployment-hosts/upgrade-agents';
    }

    /**
     *
     *
     * @param body
     */
    public async upgradeAgents(body?: models.DeploymentAgentUpgrade): Promise<Array<models.DeploymentAgentUpgradeDescriptor>>
    {

        const __path = this.upgradeAgents__generateUrl();

        let __requestOptions = new ApiRequest();

        __requestOptions.setConsume('application/json');
        __requestOptions.setProduce('application/json');
        __requestOptions.body = body;
        __requestOptions.hasBodyParam = true;
        __requestOptions.method = "POST";

        let __res = <Array<models.DeploymentAgentUpgradeDescriptor>> await this.client.callWithOptions(__path, __requestOptions);
        if (__res)
        {
            for (let val of __res)
            {
                models.DeploymentAgentUpgradeDescriptor.fixupPrototype(val);
            }
        }

        return __res;
    }

}
