/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Builder APIs
 * APIs and Definitions for the Optio3 Builder product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class RegistryTaggedImageUsage {
    getFixupPrototypeFunction() { return RegistryTaggedImageUsage.fixupPrototype; }

    static newInstance(model: Partial<RegistryTaggedImageUsage>): RegistryTaggedImageUsage {
        let obj = Object.assign(new RegistryTaggedImageUsage(), model);
        RegistryTaggedImageUsage.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<RegistryTaggedImageUsage>): RegistryTaggedImageUsage {
        if (!model) return null;
        return RegistryTaggedImageUsage.newInstance(<RegistryTaggedImageUsage> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: RegistryTaggedImageUsage) {
        if (!obj) return;

        Object.setPrototypeOf(obj, models.RegistryTaggedImageUsage.prototype);

        obj.fixupFields();
    }

    fixupFields() {
        if (this.image) {
            models.RegistryImage.fixupPrototype(this.image);
        }
        if (this.lookupCustomer) {
            for (let key in this.lookupCustomer) {
                let val = this.lookupCustomer[key];
                if (val) {
                    models.Customer.fixupPrototype(val);
                }
            }
        }
        if (this.lookupService) {
            for (let key in this.lookupService) {
                let val = this.lookupService[key];
                if (val) {
                    models.CustomerService.fixupPrototype(val);
                }
            }
        }
        if (this.lookupBackup) {
            for (let key in this.lookupBackup) {
                let val = this.lookupBackup[key];
                if (val) {
                    models.CustomerServiceBackup.fixupPrototype(val);
                }
            }
        }
        if (this.lookupTask) {
            for (let key in this.lookupTask) {
                let val = this.lookupTask[key];
                if (val) {
                    models.DeploymentTask.fixupPrototype(val);
                }
            }
        }
        if (this.lookupHost) {
            for (let key in this.lookupHost) {
                let val = this.lookupHost[key];
                if (val) {
                    models.DeploymentHostStatusDescriptor.fixupPrototype(val);
                }
            }
        }
    }

    tag: string;

    isRC: boolean;

    isRTM: boolean;

    image: models.RegistryImage;

    services: Array<string>;

    backups: Array<string>;

    tasks: Array<string>;

    lookupCustomer: { [key: string]: models.Customer; };

    lookupService: { [key: string]: models.CustomerService; };

    lookupBackup: { [key: string]: models.CustomerServiceBackup; };

    lookupTask: { [key: string]: models.DeploymentTask; };

    lookupHost: { [key: string]: models.DeploymentHostStatusDescriptor; };

    safeToDelete: boolean;

}
