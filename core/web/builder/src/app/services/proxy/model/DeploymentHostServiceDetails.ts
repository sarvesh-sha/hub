/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Builder APIs
 * APIs and Definitions for the Optio3 Builder product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class DeploymentHostServiceDetails {
    getFixupPrototypeFunction() { return DeploymentHostServiceDetails.fixupPrototype; }

    static newInstance(model: Partial<DeploymentHostServiceDetails>): DeploymentHostServiceDetails {
        let obj = Object.assign(new DeploymentHostServiceDetails(), model);
        DeploymentHostServiceDetails.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<DeploymentHostServiceDetails>): DeploymentHostServiceDetails {
        if (!model) return null;
        return DeploymentHostServiceDetails.newInstance(<DeploymentHostServiceDetails> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: DeploymentHostServiceDetails) {
        if (!obj) return;

        Object.setPrototypeOf(obj, models.DeploymentHostServiceDetails.prototype);

        obj.fixupFields();
    }

    fixupFields() {
        if (this.warningThreshold === undefined) {
            this.warningThreshold = 0;
        }
        if (this.alertThreshold === undefined) {
            this.alertThreshold = 0;
        }
        if (typeof this.lastFetch === "string") {
            this.lastFetch = new Date(<string><any>this.lastFetch);
        }
        if (typeof this.lastUpdatedDate === "string") {
            this.lastUpdatedDate = new Date(<string><any>this.lastUpdatedDate);
        }
        if (typeof this.lastRefresh === "string") {
            this.lastRefresh = new Date(<string><any>this.lastRefresh);
        }
        if (this.queueStatus) {
            models.GatewayQueueStatus.fixupPrototype(this.queueStatus);
        }
    }

    lastFetch: Date;

    remoteSysId: string;

    lastUpdatedDate: Date;

    name: string;

    url: string;

    warningThreshold: number;

    alertThreshold: number;

    lastRefresh: Date;

    queueStatus: models.GatewayQueueStatus;

}
