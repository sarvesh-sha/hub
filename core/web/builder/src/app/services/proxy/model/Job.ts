/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Builder APIs
 * APIs and Definitions for the Optio3 Builder product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class Job {
    static readonly RECORD_IDENTITY: string = "Job";

    getFixupPrototypeFunction() { return Job.fixupPrototype; }

    static newInstance(model: Partial<Job>): Job {
        let obj = Object.assign(new Job(), model);
        Job.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<Job>): Job {
        if (!model) return null;
        return Job.newInstance(<Job> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: Job) {
        if (!obj) return;

        Object.setPrototypeOf(obj, models.Job.prototype);

        obj.fixupFields();
    }

    fixupFields() {
        if (typeof this.createdOn === "string") {
            this.createdOn = new Date(<string><any>this.createdOn);
        }
        if (typeof this.updatedOn === "string") {
            this.updatedOn = new Date(<string><any>this.updatedOn);
        }
        if (this.sources) {
            for (let val of this.sources) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
        if (this.steps) {
            for (let val of this.steps) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
        if (this.generatedImages) {
            for (let val of this.generatedImages) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
        if (this.acquiredContainers) {
            for (let val of this.acquiredContainers) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
        if (this.acquiredVolumes) {
            for (let val of this.acquiredVolumes) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
        if (this.acquiredTemporaryImages) {
            for (let val of this.acquiredTemporaryImages) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
        if (this.acquiredDirectories) {
            for (let val of this.acquiredDirectories) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
        if (this.acquiredCheckouts) {
            for (let val of this.acquiredCheckouts) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
    }

    sysId: string;

    createdOn: Date;

    updatedOn: Date;

    name: string;

    idPrefix: string;

    status: models.JobStatus;

    branch: string;

    commit: string;

    triggeredBy: string;

    sources: Array<models.RecordIdentity>;

    steps: Array<models.RecordIdentity>;

    generatedImages: Array<models.RecordIdentity>;

    acquiredContainers: Array<models.RecordIdentity>;

    acquiredVolumes: Array<models.RecordIdentity>;

    acquiredTemporaryImages: Array<models.RecordIdentity>;

    acquiredDirectories: Array<models.RecordIdentity>;

    acquiredCheckouts: Array<models.RecordIdentity>;

}
