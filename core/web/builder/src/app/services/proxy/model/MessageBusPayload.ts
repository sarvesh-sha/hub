/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Builder APIs
 * APIs and Definitions for the Optio3 Builder product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class MessageBusPayload {
    type: string;

    protected setDiscriminator(type: string) {
        this.type = type;
    }

    getFixupPrototypeFunction() { return MessageBusPayload.fixupPrototype; }

    static newInstance(model: Partial<MessageBusPayload>): MessageBusPayload {
        let obj = Object.assign(new MessageBusPayload(), model);
        MessageBusPayload.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<MessageBusPayload>): MessageBusPayload {
        if (!model) return null;
        return MessageBusPayload.newInstance(<MessageBusPayload> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: MessageBusPayload) {
        if (!obj) return;

        switch (obj.type)
        {
            case "MbControlExchangeCapabilities":
                Object.setPrototypeOf(obj, models.MbControlExchangeCapabilities.prototype);
                break;
            case "MbControlExchangeCapabilitiesReply":
                Object.setPrototypeOf(obj, models.MbControlExchangeCapabilitiesReply.prototype);
                break;
            case "MbControlGetIdentity":
                Object.setPrototypeOf(obj, models.MbControlGetIdentity.prototype);
                break;
            case "MbControlGetIdentityReply":
                Object.setPrototypeOf(obj, models.MbControlGetIdentityReply.prototype);
                break;
            case "MbControlJoinChannel":
                Object.setPrototypeOf(obj, models.MbControlJoinChannel.prototype);
                break;
            case "MbControlJoinChannelReply":
                Object.setPrototypeOf(obj, models.MbControlJoinChannelReply.prototype);
                break;
            case "MbControlKeepAlive":
                Object.setPrototypeOf(obj, models.MbControlKeepAlive.prototype);
                break;
            case "MbControlKeepAliveReply":
                Object.setPrototypeOf(obj, models.MbControlKeepAliveReply.prototype);
                break;
            case "MbControlLeaveChannel":
                Object.setPrototypeOf(obj, models.MbControlLeaveChannel.prototype);
                break;
            case "MbControlLeaveChannelReply":
                Object.setPrototypeOf(obj, models.MbControlLeaveChannelReply.prototype);
                break;
            case "MbControlListChannels":
                Object.setPrototypeOf(obj, models.MbControlListChannels.prototype);
                break;
            case "MbControlListChannelsReply":
                Object.setPrototypeOf(obj, models.MbControlListChannelsReply.prototype);
                break;
            case "MbControlListMembers":
                Object.setPrototypeOf(obj, models.MbControlListMembers.prototype);
                break;
            case "MbControlListMembersReply":
                Object.setPrototypeOf(obj, models.MbControlListMembersReply.prototype);
                break;
            case "MbControlListSubscriptions":
                Object.setPrototypeOf(obj, models.MbControlListSubscriptions.prototype);
                break;
            case "MbControlListSubscriptionsReply":
                Object.setPrototypeOf(obj, models.MbControlListSubscriptionsReply.prototype);
                break;
            case "MbControlReply":
                Object.setPrototypeOf(obj, models.MbControlReply.prototype);
                break;
            case "MbControlUpgradeToUDP":
                Object.setPrototypeOf(obj, models.MbControlUpgradeToUDP.prototype);
                break;
            case "MbControlUpgradeToUDPReply":
                Object.setPrototypeOf(obj, models.MbControlUpgradeToUDPReply.prototype);
                break;
            case "MbDataMessage":
                Object.setPrototypeOf(obj, models.MbDataMessage.prototype);
                break;
            case "MbDataMessageReply":
                Object.setPrototypeOf(obj, models.MbDataMessageReply.prototype);
                break;
        }

        obj.fixupFields();
    }

    fixupFields() {
    }

    messageId: string;

}
