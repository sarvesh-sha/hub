/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Builder APIs
 * APIs and Definitions for the Optio3 Builder product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class BackgroundActivity {
    static readonly RECORD_IDENTITY: string = "BackgroundActivity";

    getFixupPrototypeFunction() { return BackgroundActivity.fixupPrototype; }

    static newInstance(model: Partial<BackgroundActivity>): BackgroundActivity {
        let obj = Object.assign(new BackgroundActivity(), model);
        BackgroundActivity.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<BackgroundActivity>): BackgroundActivity {
        if (!model) return null;
        return BackgroundActivity.newInstance(<BackgroundActivity> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: BackgroundActivity) {
        if (!obj) return;

        Object.setPrototypeOf(obj, models.BackgroundActivity.prototype);

        obj.fixupFields();
    }

    fixupFields() {
        if (this.timeout === undefined) {
            this.timeout = 0;
        }
        if (typeof this.createdOn === "string") {
            this.createdOn = new Date(<string><any>this.createdOn);
        }
        if (typeof this.updatedOn === "string") {
            this.updatedOn = new Date(<string><any>this.updatedOn);
        }
        if (typeof this.nextActivation === "string") {
            this.nextActivation = new Date(<string><any>this.nextActivation);
        }
        if (typeof this.lastActivation === "string") {
            this.lastActivation = new Date(<string><any>this.lastActivation);
        }
        if (this.context) {
            models.RecordIdentity.fixupPrototype(this.context);
        }
        if (this.worker) {
            models.Host.fixupPrototype(this.worker);
        }
        if (this.waitingActivities) {
            for (let val of this.waitingActivities) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
        if (this.subActivities) {
            for (let val of this.subActivities) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
    }

    sysId: string;

    createdOn: Date;

    updatedOn: Date;

    title: string;

    context: models.RecordIdentity;

    status: models.BackgroundActivityStatus;

    timeout: number;

    nextActivation: Date;

    lastActivation: Date;

    lastActivationStatus: models.BackgroundActivityStatus;

    lastActivationFailure: string;

    lastActivationFailureTrace: string;

    worker: models.Host;

    waitingActivities: Array<models.RecordIdentity>;

    subActivities: Array<models.RecordIdentity>;

}
