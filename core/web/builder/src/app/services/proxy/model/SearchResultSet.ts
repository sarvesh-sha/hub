/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Builder APIs
 * APIs and Definitions for the Optio3 Builder product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class SearchResultSet {
    getFixupPrototypeFunction() { return SearchResultSet.fixupPrototype; }

    static newInstance(model: Partial<SearchResultSet>): SearchResultSet {
        let obj = Object.assign(new SearchResultSet(), model);
        SearchResultSet.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<SearchResultSet>): SearchResultSet {
        if (!model) return null;
        return SearchResultSet.newInstance(<SearchResultSet> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: SearchResultSet) {
        if (!obj) return;

        Object.setPrototypeOf(obj, models.SearchResultSet.prototype);

        obj.fixupFields();
    }

    fixupFields() {
        if (this.totalUsers === undefined) {
            this.totalUsers = 0;
        }
        if (this.totalCustomers === undefined) {
            this.totalCustomers = 0;
        }
        if (this.totalCustomerServices === undefined) {
            this.totalCustomerServices = 0;
        }
        if (this.totalDeploymentHosts === undefined) {
            this.totalDeploymentHosts = 0;
        }
        if (this.users) {
            for (let val of this.users) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
        if (this.customers) {
            for (let val of this.customers) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
        if (this.customerServices) {
            for (let val of this.customerServices) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
        if (this.deploymentHosts) {
            for (let val of this.deploymentHosts) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
    }

    totalUsers: number;

    users: Array<models.RecordIdentity>;

    totalCustomers: number;

    customers: Array<models.RecordIdentity>;

    totalCustomerServices: number;

    customerServices: Array<models.RecordIdentity>;

    totalDeploymentHosts: number;

    deploymentHosts: Array<models.RecordIdentity>;

}
