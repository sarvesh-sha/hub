/**
 * Copyright (C) 2017-, Optio3, Inc. All Rights Reserved.
 *
 * Proprietary & Confidential Information.
 *
 * Optio3 Builder APIs
 * APIs and Definitions for the Optio3 Builder product.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export class CustomerService {
    static readonly RECORD_IDENTITY: string = "CustomerService";

    getFixupPrototypeFunction() { return CustomerService.fixupPrototype; }

    static newInstance(model: Partial<CustomerService>): CustomerService {
        let obj = Object.assign(new CustomerService(), model);
        CustomerService.fixupPrototype(obj);
        return obj;
    }

    static deepClone(model: Partial<CustomerService>): CustomerService {
        if (!model) return null;
        return CustomerService.newInstance(<CustomerService> JSON.parse(JSON.stringify(model)));
    }

    static fixupPrototype(obj: CustomerService) {
        if (!obj) return;

        Object.setPrototypeOf(obj, models.CustomerService.prototype);

        obj.fixupFields();
    }

    fixupFields() {
        if (this.diskSize === undefined) {
            this.diskSize = 0;
        }
        if (this.lastOffset === undefined) {
            this.lastOffset = 0;
        }
        if (typeof this.createdOn === "string") {
            this.createdOn = new Date(<string><any>this.createdOn);
        }
        if (typeof this.updatedOn === "string") {
            this.updatedOn = new Date(<string><any>this.updatedOn);
        }
        if (typeof this.lastOutput === "string") {
            this.lastOutput = new Date(<string><any>this.lastOutput);
        }
        if (this.customer) {
            models.RecordIdentity.fixupPrototype(this.customer);
        }
        if (this.batteryThresholds) {
            models.DeployerShutdownConfiguration.fixupPrototype(this.batteryThresholds);
        }
        if (this.currentActivity) {
            models.RecordIdentity.fixupPrototype(this.currentActivity);
        }
        if (this.upgradeBlockers) {
            models.CustomerServiceUpgradeBlockers.fixupPrototype(this.upgradeBlockers);
        }
        if (this.alertThresholds) {
            for (let val of this.alertThresholds) {
                models.CustomerServiceAlertThresholds.fixupPrototype(val);
            }
        }
        if (this.backups) {
            for (let val of this.backups) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
        if (this.secrets) {
            for (let val of this.secrets) {
                models.RecordIdentity.fixupPrototype(val);
            }
        }
        if (this.roleImages) {
            for (let val of this.roleImages) {
                models.RoleAndArchitectureWithImage.fixupPrototype(val);
            }
        }
    }

    sysId: string;

    createdOn: Date;

    updatedOn: Date;

    customer: models.RecordIdentity;

    name: string;

    url: string;

    operationalStatus: models.DeploymentOperationalStatus;

    instanceAccount: string;

    instanceType: models.DeploymentInstance;

    instanceRegion: string;

    vertical: models.CustomerVertical;

    diskSize: number;

    useDemoData: boolean;

    relaunchAlways: boolean;

    disableServiceWorker: boolean;

    disableEmails: boolean;

    disableTexts: boolean;

    useTestReporter: boolean;

    certificateWarning: boolean;

    extraConfigLines: string;

    purposes: Array<models.DeploymentRole>;

    dbMode: models.DatabaseMode;

    heapStatusAbnormal: boolean;

    batteryThresholds: models.DeployerShutdownConfiguration;

    alertThresholds: Array<models.CustomerServiceAlertThresholds>;

    currentActivity: models.RecordIdentity;

    upgradeBlockers: models.CustomerServiceUpgradeBlockers;

    backups: Array<models.RecordIdentity>;

    secrets: Array<models.RecordIdentity>;

    roleImages: Array<models.RoleAndArchitectureWithImage>;

    roleOrigin: string;

    lastOutput: Date;

    lastOffset: number;

}
