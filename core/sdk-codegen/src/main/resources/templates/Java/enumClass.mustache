// OPTIO3_ENUM_EXPORT_START_NONAMESPACE
// OPTIO3_ENUM_DEF_START: {{datatypeWithEnum}} {{#allowableValues}}{{{values}}}{{/allowableValues}}
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonCreator;

public enum {{datatypeWithEnum}}
{
{{#allowableValues}}
    {{#enumVars}}{{name}}({{datatype}}.valueOf({{{value}}})){{^-last}},
    {{/-last}}{{#-last}};{{/-last}}{{/enumVars}}
{{/allowableValues}}

    private {{datatype}} value;

    {{datatypeWithEnum}}({{datatype}} v)
    {
        value = v;
    }

    public {{datatype}} value()
    {
        return value;
    }

    @Override
    public String toString()
    {
        return String.valueOf(value);
    }

    @JsonCreator
    public static {{datatypeWithEnum}} fromValue(String v)
    {
        for ({{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}} b : {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}}.values())
        {
            if (String.valueOf(b.value).equals(v))
                return b;
        }

        throw new IllegalArgumentException(String.format("'%s' is not one of the values accepted for %s class: %s", v, {{datatypeWithEnum}}.class.getSimpleName(), Arrays.toString({{datatypeWithEnum}}.values())));
    }
}
// OPTIO3_ENUM_DEF_END: {{datatypeWithEnum}}
// OPTIO3_ENUM_EXPORT_END